{
	"id": 0,
	"name": "@thoughtspot/visual-embed-sdk",
	"kind": 0,
	"kindString": "Project",
	"flags": {},
	"originalName": "",
	"children": [
		{
			"id": 1617,
			"name": "Action",
			"kind": 4,
			"kindString": "Enumeration",
			"flags": {},
			"comment": {
				"shortText": "ThoughtSpot application pages include actions and menu commands\nfor various user-initiated operations. These actions are represented\nas enumeration members in the SDK. To show, hide, or disable\nspecific actions in the embedded view, define the Action\nenumeration members in the `disabledActions`, `visibleActions`,\nor `hiddenActions` array.",
				"tags": [
					{
						"tag": "example",
						"text": "\n```js\nconst embed = new LiveboardEmbed('#embed-container', {\n   ... // other options\n   visibleActions: [Action.Save, Action.Edit, Action.Present, ActionAction.Explore],\n   disabledActions: [Action.Download],\n   //hiddenActions: [], // Set either this or visibleActions\n})\n```"
					},
					{
						"tag": "example",
						"text": "\n```js\nconst embed = new LiveboardEmbed('#embed-container', {\n   ... // other options\n   //visibleActions: [],\n   disabledActions: [Action.Download],\n   hiddenActions: [Action.Edit, ActionAction.Explore],\n})\n```\n"
					}
				]
			},
			"children": [
				{
					"id": 1729,
					"name": "AIHighlights",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **AI Highlights** action on a Liveboard.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nhiddenAction: [Action.AIHighlights]\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.27.10 | ThoughtSpot Cloud: 9.12.5.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4449,
							"character": 4
						}
					],
					"defaultValue": "\"AIHighlights\""
				},
				{
					"id": 1637,
					"name": "AddColumnSet",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **Add Column Set** action on a Answer.\nAllows adding column sets to a Answer.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.AddColumnSet]\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.32.0 | ThoughtSpot: 10.0.0.cl, 10.1.0.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3618,
							"character": 4
						}
					],
					"defaultValue": "\"addSimpleCohort\""
				},
				{
					"id": 1630,
					"name": "AddDataPanelObjects",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **Add Data Panel Objects** action on the data panel v2.\nAllows to show action menu to add different objects (such as\nformulas, Parameters) in data panel new experience.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.AddDataPanelObjects]\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.32.0 | ThoughtSpot: 10.0.0.cl, 10.1.0.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3548,
							"character": 4
						}
					],
					"defaultValue": "\"addDataPanelObjects\""
				},
				{
					"id": 1629,
					"name": "AddFilter",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **Add filter** action on a Liveboard page.\nAllows adding filters to visualizations on a Liveboard.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.AddFilter]\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3537,
							"character": 4
						}
					],
					"defaultValue": "\"addFilter\""
				},
				{
					"id": 1635,
					"name": "AddFormula",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **Create formula** action on a Search or Answer page.\nAllows adding formulas to an Answer.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.AddFormula]\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3599,
							"character": 4
						}
					],
					"defaultValue": "\"addFormula\""
				},
				{
					"id": 1636,
					"name": "AddParameter",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **Add parameter** action on a Liveboard or Answer.\nAllows adding Parameters to a Liveboard or Answer.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.AddParameter]\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3608,
							"character": 4
						}
					],
					"defaultValue": "\"addParameter\""
				},
				{
					"id": 1638,
					"name": "AddQuerySet",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **Add Query Set** action on a Answer.\nAllows adding query sets to a Answer.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.AddQuerySet]\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.32.0 | ThoughtSpot: 10.0.0.cl, 10.1.0.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3628,
							"character": 4
						}
					],
					"defaultValue": "\"addAdvancedCohort\""
				},
				{
					"id": 1712,
					"name": "AddTab",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **Add Tab** action on a Liveboard.\nAllows adding a new tab to a Liveboard view.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.AddTab]\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.26.0 | ThoughtSpot: 9.7.0.cl, 9.8.0.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4256,
							"character": 4
						}
					],
					"defaultValue": "\"addTab\""
				},
				{
					"id": 1685,
					"name": "AddToFavorites",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The Favorites icon (*) for Answers,\nLiveboard, and data objects like Worksheet, Model,\nTables and Views.\nAllows adding an object to the userâ€™s favorites list.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.AddToFavorites]\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.9.0 | ThoughtSpot: 8.1.0.cl, 8.4.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3978,
							"character": 4
						}
					],
					"defaultValue": "\"addToFavorites\""
				},
				{
					"id": 1726,
					"name": "AddToWatchlist",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **Add KPI to Watchlist** action on Home page watchlist.\nAdds a KPI chart to the watchlist on the Home page.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.AddToWatchlist]\n```"
							},
							{
								"tag": "version",
								"text": "SDK : 1.27.9 | ThoughtSpot Cloud: 9.12.5.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4416,
							"character": 4
						}
					],
					"defaultValue": "\"addToWatchlist\""
				},
				{
					"id": 1684,
					"name": "AnswerChartSwitcher",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The chart switcher icon on Answer page and\nvisualizations in edit mode.\nAllows switching to the table or chart mode\nwhen editing a visualization.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.AnswerChartSwitcher]\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.9.0 | ThoughtSpot: 8.1.0.cl, 8.4.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3966,
							"character": 4
						}
					],
					"defaultValue": "\"answerChartSwitcher\""
				},
				{
					"id": 1683,
					"name": "AnswerDelete",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **Delete** action for Answers in the full application\nembedding mode.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.AnswerDelete]\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.9.0 | ThoughtSpot: 8.1.0.cl, 8.4.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3954,
							"character": 4
						}
					],
					"defaultValue": "\"onDeleteAnswer\""
				},
				{
					"id": 1725,
					"name": "AskAi",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The *Ask Sage* action for Answers and visualizations.\nAllows initiating a Natural Language Search query.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nhiddenAction: [Action.AskAi]\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.29.0 | ThoughtSpot Cloud: 9.12.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4405,
							"character": 4
						}
					],
					"defaultValue": "\"AskAi\""
				},
				{
					"id": 1696,
					"name": "AxisMenuAggregate",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **Aggregate** option in the chart axis or the\ntable column customization menu.\nProvides aggregation options to analyze the data on a chart or table.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.AxisMenuAggregate]\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.21.0 | ThoughtSpot: 9.2.0.cl, 9.5.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4091,
							"character": 4
						}
					],
					"defaultValue": "\"axisMenuAggregate\""
				},
				{
					"id": 1699,
					"name": "AxisMenuConditionalFormat",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **Conditional formatting** action on chart or table.\nAllows adding rules for conditional formatting of data\npoints on a chart or table.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.AxisMenuConditionalFormat]\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.21.0 | ThoughtSpot: 9.2.0.cl, 9.5.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4125,
							"character": 4
						}
					],
					"defaultValue": "\"axisMenuConditionalFormat\""
				},
				{
					"id": 1704,
					"name": "AxisMenuEdit",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **Edit** action in the axis customization menu.\nAllows editing the axis name, position, minimum and maximum values,\nand format of a column.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.AxisMenuEdit]\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.21.0 | ThoughtSpot: 9.2.0.cl, 9.5.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4180,
							"character": 4
						}
					],
					"defaultValue": "\"axisMenuEdit\""
				},
				{
					"id": 1698,
					"name": "AxisMenuFilter",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **Filter** action in the chart axis or table column\ncustomization menu.\nAllows adding, editing, or removing filters.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.AxisMenuFilter]\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.21.0 | ThoughtSpot: 9.2.0.cl, 9.5.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4114,
							"character": 4
						}
					],
					"defaultValue": "\"axisMenuFilter\""
				},
				{
					"id": 1701,
					"name": "AxisMenuGroup",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **Group** option in the chart axis or table column\ncustomization menu.\nAllows grouping data points if the axes use the same\nunit of measurement and a similar scale.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.AxisMenuGroup]\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.21.0 | ThoughtSpot: 9.2.0.cl, 9.5.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4148,
							"character": 4
						}
					],
					"defaultValue": "\"axisMenuGroup\""
				},
				{
					"id": 1705,
					"name": "AxisMenuNumberFormat",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **Number format** action to customize the format of\nthe data labels on a chart or table.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.AxisMenuNumberFormat]\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.21.0 | ThoughtSpot: 9.2.0.cl, 9.5.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4190,
							"character": 4
						}
					],
					"defaultValue": "\"axisMenuNumberFormat\""
				},
				{
					"id": 1702,
					"name": "AxisMenuPosition",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **Position** option in the axis customization menu.\nAllows changing the position of the axis to the\nleft or right side of the chart.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.AxisMenuPosition]\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.21.0 | ThoughtSpot: 9.2.0.cl, 9.5.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4159,
							"character": 4
						}
					],
					"defaultValue": "\"axisMenuPosition\""
				},
				{
					"id": 1707,
					"name": "AxisMenuRemove",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **Remove** action in the chart axis or table column\ncustomization menu.\nRemoves the data labels from a chart or the column of a\ntable visualization.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.AxisMenuRemove]\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.21.0 | ThoughtSpot: 9.2.0.cl, 9.5.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4212,
							"character": 4
						}
					],
					"defaultValue": "\"axisMenuRemove\""
				},
				{
					"id": 1703,
					"name": "AxisMenuRename",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **Rename** option in the chart axis or table column customization menu.\nRenames the axis label on a chart or the column header on a table.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.AxisMenuRename]\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.21.0 | ThoughtSpot: 9.2.0.cl, 9.5.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4169,
							"character": 4
						}
					],
					"defaultValue": "\"axisMenuRename\""
				},
				{
					"id": 1700,
					"name": "AxisMenuSort",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **Sort** menu action on a table or chart axis\nSorts data in ascending or descending order.\nAllows adding, editing, or removing filters.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.AxisMenuConditionalFormat]\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.21.0 | ThoughtSpot: 9.2.0.cl, 9.5.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4136,
							"character": 4
						}
					],
					"defaultValue": "\"axisMenuSort\""
				},
				{
					"id": 1706,
					"name": "AxisMenuTextWrapping",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **Text wrapping** action on a table.\nWraps or clips column text on a table.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.AxisMenuTextWrapping]\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.21.0 | ThoughtSpot: 9.2.0.cl, 9.5.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4200,
							"character": 4
						}
					],
					"defaultValue": "\"axisMenuTextWrapping\""
				},
				{
					"id": 1697,
					"name": "AxisMenuTimeBucket",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **Time bucket** option in the chart axis or table column\ncustomization menu.\nAllows defining time metric for date comparison.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.AxisMenuTimeBucket]\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.21.0 | ThoughtSpot: 9.2.0.cl, 9.5.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4102,
							"character": 4
						}
					],
					"defaultValue": "\"axisMenuTimeBucket\""
				},
				{
					"id": 1738,
					"name": "ChangeFilterVisibilityInTab",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Action ID to show, hide, or disable filters\nin a Liveboard tab.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nhiddenAction: [Action.ChangeFilterVisibilityInTab]\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.36.0 | ThoughtSpot Cloud: 10.6.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4547,
							"character": 4
						}
					],
					"defaultValue": "\"changeFilterVisibilityInTab\""
				},
				{
					"id": 1634,
					"name": "ChooseDataSources",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **Choose sources** button on Search page.\nAllows selecting data sources for search queries.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.ChooseDataSources]\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3590,
							"character": 4
						}
					],
					"defaultValue": "\"chooseDataSources\""
				},
				{
					"id": 1633,
					"name": "CollapseDataPanel",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **Collapse data panel** icon on the Search page.\nCollapses the data panel view.",
						"tags": [
							{
								"tag": "version:",
								"text": "SDK: 1.34.0 | ThoughtSpot Cloud: 10.3.0.cl, 10.7.0.sw\n"
							},
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.CollapseDataPanel]\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3581,
							"character": 4
						}
					],
					"defaultValue": "\"collapseDataPanel\""
				},
				{
					"id": 1632,
					"name": "CollapseDataSources",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **Collapse data sources** icon on the Search page.\nCollapses the panel showing data sources.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.CollapseDataPanel]\n```"
							},
							{
								"tag": "version:",
								"text": "SDK: 1.1.0 | ThoughtSpot Cloud: ts7.may.cl, 8.4.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3569,
							"character": 4
						}
					],
					"defaultValue": "\"collapseDataSources\""
				},
				{
					"id": 1631,
					"name": "ConfigureFilter",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Filter configuration options on a Liveboard page.\nAllows configuring filters on a\nLiveboard.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.ConfigureFilter]\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3558,
							"character": 4
						}
					],
					"defaultValue": "\"configureFilter\""
				},
				{
					"id": 1676,
					"name": "CopyAndEdit",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3905,
							"character": 4
						}
					],
					"defaultValue": "\"context-menu-item-copy-and-edit\""
				},
				{
					"id": 1624,
					"name": "CopyLink",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **Copy link** menu action on a Liveboard visualization.\nCopies the visualization URL",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.CopyLink]\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3496,
							"character": 4
						}
					],
					"defaultValue": "\"embedDocument\""
				},
				{
					"id": 1675,
					"name": "CopyToClipboard",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **Copy to clipboard** menu action on tables in an Answer\nor Liveboard.\nCopies the selected data point.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.CopyToClipboard]\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3904,
							"character": 4
						}
					],
					"defaultValue": "\"context-menu-item-copy-to-clipboard\""
				},
				{
					"id": 1723,
					"name": "CreateLiveboard",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **Create Liveboard* action on\nthe Liveboards page and the Pin modal.\nAllows users to create a Liveboard.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nhiddenAction: [Action.CreateLiveboard]\ndisabledActions: [Action.CreateLiveboard]\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.32.0 | ThoughtSpot: 10.1.0.cl, 10.1.0.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4382,
							"character": 4
						}
					],
					"defaultValue": "\"createLiveboard\""
				},
				{
					"id": 1687,
					"name": "CreateMonitor",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The *Create alert* action for KPI charts.\nAllows users to schedule threshold-based alerts\nfor KPI charts.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.CreateMonitor]\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.11.0 | ThoughtSpot: 8.3.0.cl, 8.4.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3998,
							"character": 4
						}
					],
					"defaultValue": "\"createMonitor\""
				},
				{
					"id": 1692,
					"name": "CrossFilter",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **Filter** action on Liveboard visualizations.\nAllows users to apply cross-filters on a Liveboard.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.CrossFilter]\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.21.0 | ThoughtSpot: 9.2.0.cl, 9.8.0.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4049,
							"character": 4
						}
					],
					"defaultValue": "\"context-menu-item-cross-filter\""
				},
				{
					"id": 1743,
					"name": "DeletePreviousPrompt",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Action ID for hide or disable\nthe previous prompt deletion option in Spotter.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nhiddenAction: [Action.DeletePreviousPrompt]\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.36.0 | ThoughtSpot Cloud: 10.6.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4604,
							"character": 4
						}
					],
					"defaultValue": "\"deletePreviousPrompt\""
				},
				{
					"id": 1735,
					"name": "DeleteScheduleHomepage",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **Delete** action on the **Liveboard Schedules* page.\nDeletes a Liveboard schedule.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.DeleteScheduleHomepage]\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.34.0 | ThoughtSpot: 10.3.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4516,
							"character": 4
						}
					],
					"defaultValue": "\"deleteScheduleHomepage\""
				},
				{
					"id": 1737,
					"name": "DisableChipReorder",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Action ID for disabling chip reorder in Answer and Liveboard",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nconst disabledActions = [Action.DisableChipReorder]\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.36.0 | ThoughtSpot Cloud: 10.6.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4535,
							"character": 4
						}
					],
					"defaultValue": "\"disableChipReorder\""
				},
				{
					"id": 1646,
					"name": "Download",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **Download** menu action on Liveboard visualizations\nand Answers.\nAllows downloading a visualization or Answer.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.DownloadAsPng]\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3675,
							"character": 4
						}
					],
					"defaultValue": "\"download\""
				},
				{
					"id": 1649,
					"name": "DownloadAsCsv",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **Download** > **CSV** menu action for tables on a Liveboard\nor Answer page.\nDownloads a visualization or Answer in the XLSX format.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.DownloadAsCsv]\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3709,
							"character": 4
						}
					],
					"defaultValue": "\"downloadAsCSV\""
				},
				{
					"id": 1648,
					"name": "DownloadAsPdf",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **Download PDF** action that downloads a Liveboard,\nvisualization, or Answer as a PDF file.",
						"text": "**NOTE**: The **Download** > **PDF** action is available on\nvisualizations and Answers if the data is in tabular format.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.DownloadAsPdf]\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3699,
							"character": 4
						}
					],
					"defaultValue": "\"downloadAsPdf\""
				},
				{
					"id": 1647,
					"name": "DownloadAsPng",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **Download** > **PNG** menu action for charts on a Liveboard\nor Answer page.\nDownloads a visualization or Answer as a PNG file.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.DownloadAsPng]\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3685,
							"character": 4
						}
					],
					"defaultValue": "\"downloadAsPng\""
				},
				{
					"id": 1650,
					"name": "DownloadAsXlsx",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **Download** > **XLSX** menu action for tables on a Liveboard\nor Answer page.\nDownloads a visualization or Answer in the XLSX format.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.DownloadAsXlsx]\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3719,
							"character": 4
						}
					],
					"defaultValue": "\"downloadAsXLSX\""
				},
				{
					"id": 1680,
					"name": "DrillDown",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **Drill down** menu action on Answers and Liveboard\nvisualizations.\nAllows drilling down to a specific data point on a chart or table.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.DrillDown]\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3921,
							"character": 4
						}
					],
					"defaultValue": "\"DRILL\""
				},
				{
					"id": 1674,
					"name": "DrillExclude",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The action to exclude data points on a drilled-down Answer\nor visualization",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.DrillInclude]\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3894,
							"character": 4
						}
					],
					"defaultValue": "\"context-menu-item-exclude\""
				},
				{
					"id": 1673,
					"name": "DrillInclude",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The action to include data points on a drilled-down Answer\nor visualization",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.DrillInclude]\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3885,
							"character": 4
						}
					],
					"defaultValue": "\"context-menu-item-include\""
				},
				{
					"id": 1658,
					"name": "Edit",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The *Edit* action on the Liveboard page and in the\nvisualization menu.\nOpens a Liveboard or visualization in edit mode.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.Edit]\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3789,
							"character": 4
						}
					],
					"defaultValue": "\"edit\""
				},
				{
					"id": 1623,
					"name": "EditACopy",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **Copy and Edit** action on a Liveboard.\nThis action is now replaced with `Action.MakeACopy`.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.EditACopy]\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3487,
							"character": 4
						}
					],
					"defaultValue": "\"editACopy\""
				},
				{
					"id": 1686,
					"name": "EditDetails",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The edit icon on Liveboards (Classic experience).",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.EditDetails]\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.9.0 | ThoughtSpot: 8.1.0.cl, 8.4.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3987,
							"character": 4
						}
					],
					"defaultValue": "\"editDetails\""
				},
				{
					"id": 1678,
					"name": "EditMeasure",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3910,
							"character": 4
						}
					],
					"defaultValue": "\"context-menu-item-edit-measure\""
				},
				{
					"id": 1742,
					"name": "EditPreviousPrompt",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Action ID for hide or disable\nthe previous prompt edit option in Spotter.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nhiddenAction: [Action.EditPreviousPrompt]\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.36.0 | ThoughtSpot Cloud: 10.6.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4593,
							"character": 4
						}
					],
					"defaultValue": "\"editPreviousPrompt\""
				},
				{
					"id": 1715,
					"name": "EditSageAnswer",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Action ID to hide or disable the edit option for the\nresults generated from the\nNatural Language Search query.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.EditSageAnswer]\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.26.0 | ThoughtSpot Cloud: 9.7.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4289,
							"character": 4
						}
					],
					"defaultValue": "\"editSageAnswer\""
				},
				{
					"id": 1730,
					"name": "EditScheduleHomepage",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The *Edit* action on the *Liveboard Schedules* page\n(new Homepage experience).\nAllows editing Liveboard schedules.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.EditScheduleHomepage]\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.34.0 | ThoughtSpot Cloud: 10.3.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4462,
							"character": 4
						}
					],
					"defaultValue": "\"editScheduleHomepage\""
				},
				{
					"id": 1655,
					"name": "EditTML",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **Edit TML** menu action for Liveboards and Answers.\nOpens the TML editor.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.EditTML]\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3760,
							"character": 4
						}
					],
					"defaultValue": "\"editTSL\""
				},
				{
					"id": 1659,
					"name": "EditTitle",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The text edit option for Liveboard and visualization titles.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.EditTitle]\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3797,
							"character": 4
						}
					],
					"defaultValue": "\"editTitle\""
				},
				{
					"id": 1744,
					"name": "EditTokens",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Action ID for hide/disable edit of tokens on spotter results.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nhiddenAction: [Action.EditTokens]\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.36.0 | ThoughtSpot Cloud: 10.6.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4613,
							"character": 4
						}
					],
					"defaultValue": "\"editTokens\""
				},
				{
					"id": 1713,
					"name": "EnableContextualChangeAnalysis",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Initiates contextual change analysis on KPI charts.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.EnableContextualChangeAnalysis]\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.25.0 | ThoughtSpot Cloud: 9.6.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4266,
							"character": 4
						}
					],
					"defaultValue": "\"enableContextualChangeAnalysis\""
				},
				{
					"id": 1672,
					"name": "Explore",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **Explore** action on Liveboard visualizations",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.Explore]\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3875,
							"character": 4
						}
					],
					"defaultValue": "\"explore\""
				},
				{
					"id": 1652,
					"name": "ExportTML",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **Export TML** menu action on Liveboard, Answers\nWorksheets and Data Connections page.\nExports an object as a TML file.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.ExportTML]\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3733,
							"character": 4
						}
					],
					"defaultValue": "\"exportTSL\""
				},
				{
					"id": 1653,
					"name": "ImportTML",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **Import TML** menu action for Liveboards and Answers.\nImports TML representation of ThoughtSpot objects.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.ImportTML]\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3742,
							"character": 4
						}
					],
					"defaultValue": "\"importTSL\""
				},
				{
					"id": 1736,
					"name": "KPIAnalysisCTA",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **Analyze CTA** action on KPI chart.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.KPIAnalysisCTA]\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.34.0 | ThoughtSpot Cloud: 10.3.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4526,
							"character": 4
						}
					],
					"defaultValue": "\"kpiAnalysisCTA\""
				},
				{
					"id": 1666,
					"name": "LiveboardInfo",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **Show Liveboard details** menu action on a Liveboard.\nDisplays details such as the name, description, and\nauthor of the Liveboard, and timestamp of Liveboard creation\nand update.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.LiveboardInfo]\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3837,
							"character": 4
						}
					],
					"defaultValue": "\"pinboardInfo\""
				},
				{
					"id": 1721,
					"name": "LiveboardUsers",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Action ID for show or hide the user details on a\nLiveboard (Recently visited / social proof)",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.LiveboardUsers]\n```"
							},
							{
								"tag": "version",
								"text": "SDK : 1.26.0 | ThoughtSpot: 9.7.0.cl, 10.1.0.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4350,
							"character": 4
						}
					],
					"defaultValue": "\"liveboardUsers\""
				},
				{
					"id": 1622,
					"name": "MakeACopy",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **Make a copy** action on a Liveboard or Answer\npage. Creates a copy of the Liveboard.\nIn LiveboardEmbed, the **Make a copy** action is not available for\nvisualizations in the embedded Liveboard view.\nIn AppEmbed, the **Make a copy** action is available on both\nLiveboards and visualizations.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.MakeACopy]\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3478,
							"character": 4
						}
					],
					"defaultValue": "\"makeACopy\""
				},
				{
					"id": 1719,
					"name": "ManageMonitor",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **Manage Alerts** menu action on KPI visualizations.\nAllows creating, viewing, and editing monitor\nalerts for a KPI chart.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.ManageMonitor]\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4330,
							"character": 4
						}
					],
					"defaultValue": "\"manageMonitor\""
				},
				{
					"id": 1691,
					"name": "ManagePipelines",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **Manage pipelines** action on Answers and Liveboard visualizations.\nAllows users to manage data sync pipelines to third-party apps.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.SyncToOtherApps]\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.18.0| ThoughtSpot: 8.10.0.cl, 9.0.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4039,
							"character": 4
						}
					],
					"defaultValue": "\"manage-pipeline\""
				},
				{
					"id": 1734,
					"name": "ManageTags",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **Manage Tags** action on Homepage Favourite Module.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.ManageTags]\n```"
							},
							{
								"tag": "version",
								"text": "SDK : 1.34.0 | ThoughtSpot Cloud: 10.3.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4505,
							"character": 4
						}
					],
					"defaultValue": "\"manageTags\""
				},
				{
					"id": 1711,
					"name": "MarkAsVerified",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Allows users to mark a Liveboard as verified.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.MarkAsVerified]\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.25.0 | ThoughtSpot: 9.6.0.cl, 10.1.0.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4246,
							"character": 4
						}
					],
					"defaultValue": "\"markAsVerified\""
				},
				{
					"id": 1717,
					"name": "ModifySageAnswer",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.ModifySageAnswer]\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.26.0 | ThoughtSpot: 9.7.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4310,
							"character": 4
						}
					],
					"defaultValue": "\"modifySageAnswer\""
				},
				{
					"id": 1718,
					"name": "MoveToTab",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **Move to Tab** menu action on visualizations in Liveboard edit mode.\nAllows moving a visualization to a different tab.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.MoveToTab]\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4319,
							"character": 4
						}
					],
					"defaultValue": "\"onContainerMove\""
				},
				{
					"id": 1728,
					"name": "OrganiseFavourites",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **Organize Favourites** action on Homepage\n*Favorites* module.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.OrganiseFavourites]\n```"
							},
							{
								"tag": "version",
								"text": "SDK : 1.32.0 | ThoughtSpot: 10.0.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4438,
							"character": 4
						}
					],
					"defaultValue": "\"organiseFavourites\""
				},
				{
					"id": 1731,
					"name": "PauseScheduleHomepage",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The *Pause* action on the *Liveboard Schedules* page\nPauses a scheduled Liveboard job.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.PauseScheduleHomepage]\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.34.0 | ThoughtSpot Cloud: 10.3.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4473,
							"character": 4
						}
					],
					"defaultValue": "\"pauseScheduleHomepage\""
				},
				{
					"id": 1720,
					"name": "PersonalisedViewsDropdown",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The Liveboard Personalised Views dropdown.\nAllows navigating to a personalized Liveboard View.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.PersonalisedViewsDropdown]\n```"
							},
							{
								"tag": "version",
								"text": "SDK : 1.26.0 | ThoughtSpot: 9.7.0.cl, 10.1.0.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4340,
							"character": 4
						}
					],
					"defaultValue": "\"personalisedViewsDropdown\""
				},
				{
					"id": 1669,
					"name": "Pin",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **Pin** menu action on an Answer or\nSearch results page.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.Pin]\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3854,
							"character": 4
						}
					],
					"defaultValue": "\"pin\""
				},
				{
					"id": 1656,
					"name": "Present",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **Present** menu action for Liveboards and Answers.\nAllows presenting a Liveboard or visualization in\nslideshow mode.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.Present]\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3770,
							"character": 4
						}
					],
					"defaultValue": "\"present\""
				},
				{
					"id": 1739,
					"name": "PreviewDataSpotter",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **Preview data** button on the Spotter interface.\nAllows previewing the data used for Spotter queries.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nhiddenAction: [Action.PreviewDataSpotter]\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.36.0 | ThoughtSpot Cloud: 10.6.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4559,
							"character": 4
						}
					],
					"defaultValue": "\"previewDataSpotter\""
				},
				{
					"id": 1682,
					"name": "QueryDetailsButtons",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **Query visualizer** and **Query SQL** buttons in\nQuery details panel of the Answer page.",
						"text": "**Query visualizer** - Displays the tables\nand filters used in a search query.\n**Query SQL** - Displays the SQL statements used\nin a search query to fetch data.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.QueryDetailsButtons]\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3944,
							"character": 4
						}
					],
					"defaultValue": "\"queryDetailsButtons\""
				},
				{
					"id": 1660,
					"name": "Remove",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **Delete** menu action on Liveboards and visualizations.\nDeletes a Liveboard or a visualization from a Liveboard.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.Remove]\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3806,
							"character": 4
						}
					],
					"defaultValue": "\"delete\""
				},
				{
					"id": 1695,
					"name": "RemoveCrossFilter",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **Remove** action that appears when cross filters are applied\non a Liveboard.\nRemoves filters applied o a visualization.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.RemoveCrossFilter]\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.21.0 | ThoughtSpot: 9.2.0.cl, 9.5.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4080,
							"character": 4
						}
					],
					"defaultValue": "\"context-menu-item-remove-cross-filter\""
				},
				{
					"id": 1727,
					"name": "RemoveFromWatchlist",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **Remove from watchlist** menu action on KPI watchlist.\nRemoves a KPI chart from the watchlist on the Home page.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.RemoveFromWatchlist]\n```"
							},
							{
								"tag": "version",
								"text": "SDK : 1.27.9 | ThoughtSpot: 9.12.5.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4427,
							"character": 4
						}
					],
					"defaultValue": "\"removeFromWatchlist\""
				},
				{
					"id": 1709,
					"name": "RenameModalTitleDescription",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **Rename** menu action on Liveboards and visualizations.\nAllows renaming a Liveboard or visualization.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.RenameModalTitleDescription]\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.23.0 | ThoughtSpot: 9.4.0.cl, 9.8.0.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4226,
							"character": 4
						}
					],
					"defaultValue": "\"renameModalTitleDescription\""
				},
				{
					"id": 1688,
					"name": "ReportError",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "deprecated",
								"text": "\nReports errors"
							},
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.ReportError]\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.11.1 | ThoughtSpot: 8.3.0.cl, 8.4.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4008,
							"character": 4
						}
					],
					"defaultValue": "\"reportError\""
				},
				{
					"id": 1681,
					"name": "RequestAccess",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The request access action on Liveboards.\nAllows users with view permissions to request edit access to a Liveboard.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.RequestAccess]\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3930,
							"character": 4
						}
					],
					"defaultValue": "\"requestAccess\""
				},
				{
					"id": 1710,
					"name": "RequestVerification",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The *Request verification* action on a Liveboard.\nInitiates a request for Liveboard verification.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.RequestVerification]\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.25.0 | ThoughtSpot: 9.6.0.cl, 10.1.0.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4236,
							"character": 4
						}
					],
					"defaultValue": "\"requestVerification\""
				},
				{
					"id": 1740,
					"name": "ResetSpotterChat",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **Reset** link on the Spotter interface.\nResets the conversation with Spotter.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nhiddenAction: [Action.ResetSpotterChat]\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.36.0 | ThoughtSpot Cloud: 10.6.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4571,
							"character": 4
						}
					],
					"defaultValue": "\"resetSpotterChat\""
				},
				{
					"id": 1716,
					"name": "SageAnswerFeedback",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The feedback widget for AI-generated Answers.\nAllows users to send feedback on the Answers generated\nfrom a Natural Language Search query.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.SageAnswerFeedback]\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.26.0 | ThoughtSpot: 9.7.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4301,
							"character": 4
						}
					],
					"defaultValue": "\"sageAnswerFeedback\""
				},
				{
					"id": 1618,
					"name": "Save",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **Save** action on an Answer or Liveboard.\nAllows users to save the changes.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.Save]\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3447,
							"character": 4
						}
					],
					"defaultValue": "\"save\""
				},
				{
					"id": 1621,
					"name": "SaveAsView",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **Save as View** action on the Answer\npage. Saves an Answer as a View object in the full\napplication embedding mode.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.SaveAsView]\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3465,
							"character": 4
						}
					],
					"defaultValue": "\"saveAsView\""
				},
				{
					"id": 1626,
					"name": "Schedule",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **Schedule** menu action on a Liveboard.\nAllows scheduling a Liveboard job, for example,\nsending periodic notifications.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.Schedule]\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3510,
							"character": 4
						}
					],
					"defaultValue": "\"subscription\""
				},
				{
					"id": 1627,
					"name": "SchedulesList",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **Manage schedules** menu action on a Liveboard.\nAllows users to manage scheduled Liveboard jobs.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.SchedulesList]\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3519,
							"character": 4
						}
					],
					"defaultValue": "\"schedule-list\""
				},
				{
					"id": 1679,
					"name": "Separator",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3911,
							"character": 4
						}
					],
					"defaultValue": "\"context-menu-item-separator\""
				},
				{
					"id": 1628,
					"name": "Share",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **Share** action on a Liveboard, Answer, or Worksheet.\nAllows users to share an object with other users and groups.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.Share]\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3528,
							"character": 4
						}
					],
					"defaultValue": "\"share\""
				},
				{
					"id": 1643,
					"name": "ShareViz",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3650,
							"character": 4
						}
					],
					"defaultValue": "\"shareViz\""
				},
				{
					"id": 1714,
					"name": "ShowSageQuery",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Action ID to hide or disable Natural Language Search query.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.ShowSageQuery]\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.26.0 | ThoughtSpot Cloud: 9.7.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4276,
							"character": 4
						}
					],
					"defaultValue": "\"showSageQuery\""
				},
				{
					"id": 1645,
					"name": "ShowUnderlyingData",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **Show underlying data** menu action on a visualization or\nAnswer page.\nDisplays detailed information and raw data\nfor a given visualization.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.ShowUnderlyingData]\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3665,
							"character": 4
						}
					],
					"defaultValue": "\"showUnderlyingData\""
				},
				{
					"id": 1640,
					"name": "SpotIQAnalyze",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **SpotIQ analyze** menu action on a visualization or\nAnswer page.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.SpotIQAnalyze]\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3641,
							"character": 4
						}
					],
					"defaultValue": "\"spotIQAnalyze\""
				},
				{
					"id": 1741,
					"name": "SpotterFeedback",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Action ID for hide or disable the\nSpotter feedback widget.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nhiddenAction: [Action.SpotterFeedback]\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.36.0 | ThoughtSpot Cloud: 10.6.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4582,
							"character": 4
						}
					],
					"defaultValue": "\"spotterFeedback\""
				},
				{
					"id": 1671,
					"name": "Subscription",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **Schedule** menu action on a Liveboard.\nAllows scheduling a Liveboard job.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.Subscription]\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3867,
							"character": 4
						}
					],
					"defaultValue": "\"subscription\""
				},
				{
					"id": 1690,
					"name": "SyncToOtherApps",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **Sync to other apps** action on Answers and Liveboard visualizations.\nAllows sending data to third-party apps like Slack, Salesforce,\nMicrosoft Teams, and so on.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.SyncToOtherApps]\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.18.0| ThoughtSpot: 8.10.0.cl, 9.0.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4029,
							"character": 4
						}
					],
					"defaultValue": "\"sync-to-other-apps\""
				},
				{
					"id": 1689,
					"name": "SyncToSheets",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **Sync to sheets** action on Answers and Liveboard visualizations.\nAllows sending data to a Google Sheet.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.SyncToSheets]\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.18.0| ThoughtSpot: 8.10.0.cl, 9.0.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4018,
							"character": 4
						}
					],
					"defaultValue": "\"sync-to-sheets\""
				},
				{
					"id": 1693,
					"name": "SyncToSlack",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **Sync to Slack** action on Liveboard visualizations.\nAllows sending data to third-party apps Slack",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.SyncToSlack]\n```"
							},
							{
								"tag": "version",
								"text": "@version SDK : 1.32.0 | ThoughtSpot Cloud: 10.1.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4059,
							"character": 4
						}
					],
					"defaultValue": "\"syncToSlack\""
				},
				{
					"id": 1694,
					"name": "SyncToTeams",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **Sync to Teams** action on Liveboard visualizations.\nAllows sending data to third-party apps Team",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.SyncToTeams]\n```"
							},
							{
								"tag": "version",
								"text": "@version SDK : 1.32.0 | ThoughtSpot Cloud: 10.1.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4069,
							"character": 4
						}
					],
					"defaultValue": "\"syncToTeams\""
				},
				{
					"id": 1722,
					"name": "TML",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Action ID for the Parent TML action\nThe parent action **TML** must be included to access TML-related options\nwithin the cascading menu (specific to the answer page)",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\n// to include specific TML actions\nvisibleActions: [Action.TML, Action.ExportTML, Action.EditTML]\n\n```"
							},
							{
								"tag": "example",
								"text": "\n```js\nhiddenAction: [Action.TML] // hide all TML actions\ndisabledActions: [Action.TML] // to disable all TML actions\n```"
							},
							{
								"tag": "version",
								"text": "SDK : 1.28.3 | ThoughtSpot: 9.12.0.cl, 10.1.0.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4369,
							"character": 4
						}
					],
					"defaultValue": "\"tml\""
				},
				{
					"id": 1657,
					"name": "ToggleSize",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The tile resize options in the visualization menu.\nAllows switching between different preset layouts.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.ToggleSize]\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3779,
							"character": 4
						}
					],
					"defaultValue": "\"toggleSize\""
				},
				{
					"id": 1733,
					"name": "UnsubscribeScheduleHomepage",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Action ID to hide or disable the\nunsubscribe option for Liveboard schedules.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.UnsubscribeScheduleHomepage]\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.34.0 | ThoughtSpot: 10.3.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4495,
							"character": 4
						}
					],
					"defaultValue": "\"unsubscribeScheduleHomepage\""
				},
				{
					"id": 1654,
					"name": "UpdateTML",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **Update TML** menu action for Liveboards and Answers.\nUpdate TML representation of ThoughtSpot objects.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.UpdateTML]\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3751,
							"character": 4
						}
					],
					"defaultValue": "\"updateTSL\""
				},
				{
					"id": 1724,
					"name": "VerifiedLiveboard",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Action ID for to hide or disable the\nVerified Liveboard banner.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nhiddenAction: [Action.VerifiedLiveboard]\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.29.0 | ThoughtSpot: 9.10.0.cl, 10.1.0.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4393,
							"character": 4
						}
					],
					"defaultValue": "\"verifiedLiveboard\""
				},
				{
					"id": 1732,
					"name": "ViewScheduleRunHomepage",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The **View run history** action **Liveboard Schedules** page.\nAllows viewing schedule run history.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ndisabledActions: [Action.ViewScheduleRunHomepage]\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.34.0 | ThoughtSpot: 10.3.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4484,
							"character": 4
						}
					],
					"defaultValue": "\"viewScheduleRunHomepage\""
				}
			],
			"groups": [
				{
					"title": "Enumeration members",
					"kind": 16,
					"children": [
						1729,
						1637,
						1630,
						1629,
						1635,
						1636,
						1638,
						1712,
						1685,
						1726,
						1684,
						1683,
						1725,
						1696,
						1699,
						1704,
						1698,
						1701,
						1705,
						1702,
						1707,
						1703,
						1700,
						1706,
						1697,
						1738,
						1634,
						1633,
						1632,
						1631,
						1676,
						1624,
						1675,
						1723,
						1687,
						1692,
						1743,
						1735,
						1737,
						1646,
						1649,
						1648,
						1647,
						1650,
						1680,
						1674,
						1673,
						1658,
						1623,
						1686,
						1678,
						1742,
						1715,
						1730,
						1655,
						1659,
						1744,
						1713,
						1672,
						1652,
						1653,
						1736,
						1666,
						1721,
						1622,
						1719,
						1691,
						1734,
						1711,
						1717,
						1718,
						1728,
						1731,
						1720,
						1669,
						1656,
						1739,
						1682,
						1660,
						1695,
						1727,
						1709,
						1688,
						1681,
						1710,
						1740,
						1716,
						1618,
						1621,
						1626,
						1627,
						1679,
						1628,
						1643,
						1714,
						1645,
						1640,
						1741,
						1671,
						1690,
						1689,
						1693,
						1694,
						1722,
						1657,
						1733,
						1654,
						1724,
						1732
					]
				}
			],
			"sources": [
				{
					"fileName": "types.ts",
					"line": 3438,
					"character": 12
				}
			]
		},
		{
			"id": 1296,
			"name": "AuthEvent",
			"kind": 4,
			"kindString": "Enumeration",
			"flags": {},
			"comment": {
				"shortText": "Events which can be triggered on the emitter returned from {@link init}.",
				"tags": [
					{
						"tag": "group",
						"text": "Authentication / Init\n"
					}
				]
			},
			"children": [
				{
					"id": 1297,
					"name": "TRIGGER_SSO_POPUP",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Manually trigger the SSO popup. This is useful when\nauthStatus is SAMLRedirect/OIDCRedirect and inPopup is set to true"
					},
					"sources": [
						{
							"fileName": "auth.ts",
							"line": 130,
							"character": 4
						}
					],
					"defaultValue": "\"TRIGGER_SSO_POPUP\""
				}
			],
			"groups": [
				{
					"title": "Enumeration members",
					"kind": 16,
					"children": [
						1297
					]
				}
			],
			"sources": [
				{
					"fileName": "auth.ts",
					"line": 125,
					"character": 12
				}
			]
		},
		{
			"id": 1285,
			"name": "AuthFailureType",
			"kind": 4,
			"kindString": "Enumeration",
			"flags": {},
			"comment": {
				"shortText": "Enum for auth failure types. This is the parameter passed to the listner\nof {@link AuthStatus.FAILURE}.",
				"tags": [
					{
						"tag": "group",
						"text": "Authentication / Init\n"
					}
				]
			},
			"children": [
				{
					"id": 1288,
					"name": "EXPIRY",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"sources": [
						{
							"fileName": "auth.ts",
							"line": 40,
							"character": 4
						}
					],
					"defaultValue": "\"EXPIRY\""
				},
				{
					"id": 1287,
					"name": "NO_COOKIE_ACCESS",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"sources": [
						{
							"fileName": "auth.ts",
							"line": 39,
							"character": 4
						}
					],
					"defaultValue": "\"NO_COOKIE_ACCESS\""
				},
				{
					"id": 1289,
					"name": "OTHER",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"sources": [
						{
							"fileName": "auth.ts",
							"line": 41,
							"character": 4
						}
					],
					"defaultValue": "\"OTHER\""
				},
				{
					"id": 1286,
					"name": "SDK",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"sources": [
						{
							"fileName": "auth.ts",
							"line": 38,
							"character": 4
						}
					],
					"defaultValue": "\"SDK\""
				}
			],
			"groups": [
				{
					"title": "Enumeration members",
					"kind": 16,
					"children": [
						1288,
						1287,
						1289,
						1286
					]
				}
			],
			"sources": [
				{
					"fileName": "auth.ts",
					"line": 37,
					"character": 12
				}
			]
		},
		{
			"id": 1290,
			"name": "AuthStatus",
			"kind": 4,
			"kindString": "Enumeration",
			"flags": {},
			"comment": {
				"shortText": "Enum for auth status emitted by the emitter returned from {@link init}.",
				"tags": [
					{
						"tag": "group",
						"text": "Authentication / Init\n"
					}
				]
			},
			"children": [
				{
					"id": 1291,
					"name": "FAILURE",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Emits when the SDK fails to authenticate"
					},
					"sources": [
						{
							"fileName": "auth.ts",
							"line": 52,
							"character": 4
						}
					],
					"defaultValue": "\"FAILURE\""
				},
				{
					"id": 1294,
					"name": "LOGOUT",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Emits when a user logs out"
					},
					"sources": [
						{
							"fileName": "auth.ts",
							"line": 64,
							"character": 4
						}
					],
					"defaultValue": "\"LOGOUT\""
				},
				{
					"id": 1292,
					"name": "SDK_SUCCESS",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Emits when the SDK authenticates successfully"
					},
					"sources": [
						{
							"fileName": "auth.ts",
							"line": 56,
							"character": 4
						}
					],
					"defaultValue": "\"SDK_SUCCESS\""
				},
				{
					"id": 1293,
					"name": "SUCCESS",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Emits when the app sends an authentication success message"
					},
					"sources": [
						{
							"fileName": "auth.ts",
							"line": 60,
							"character": 4
						}
					],
					"defaultValue": "\"SUCCESS\""
				},
				{
					"id": 1295,
					"name": "WAITING_FOR_POPUP",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Emitted when inPopup is true in the SAMLRedirect flow and the\npopup is waiting to be triggered either programmatically\nor by the trigger button.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.19.0\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "auth.ts",
							"line": 71,
							"character": 4
						}
					],
					"defaultValue": "\"WAITING_FOR_POPUP\""
				}
			],
			"groups": [
				{
					"title": "Enumeration members",
					"kind": 16,
					"children": [
						1291,
						1294,
						1292,
						1293,
						1295
					]
				}
			],
			"sources": [
				{
					"fileName": "auth.ts",
					"line": 48,
					"character": 12
				}
			]
		},
		{
			"id": 1443,
			"name": "AuthType",
			"kind": 4,
			"kindString": "Enumeration",
			"flags": {},
			"comment": {
				"shortText": "The authentication mechanism for allowing access to the\nthe embedded app",
				"tags": [
					{
						"tag": "group",
						"text": "Authentication / Init\n"
					}
				]
			},
			"children": [
				{
					"id": 1454,
					"name": "Basic",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Use the ThoughtSpot login API to authenticate to the cluster directly.",
						"text": "Warning: This feature is primarily intended for developer testing. It is\nstrongly advised not to use this authentication method in production.\n"
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 168,
							"character": 4
						}
					],
					"defaultValue": "\"Basic\""
				},
				{
					"id": 1445,
					"name": "EmbeddedSSO",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Passthrough SSO to the embedded application within the iframe. Requires least\nconfiguration, but may not be supported by all IDPs. This will behave like `None`\nif SSO is not configured on ThoughtSpot.",
						"text": "To use this:\nYour SAML or OpenID provider must allow iframe redirects.\nFor example, if you are using Okta as IdP, you can enable iframe embedding.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ninit({\n  // ...\n  authType: AuthType.EmbeddedSSO,\n });\n```"
							},
							{
								"tag": "version:",
								"text": "SDK: 1.15.0 | ThoughtSpot: 8.8.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 48,
							"character": 4
						}
					],
					"defaultValue": "\"EmbeddedSSO\""
				},
				{
					"id": 1444,
					"name": "None",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "No authentication on the SDK. Pass-through to the embedded App. Alias for\n`Passthrough`.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ninit({\n  // ...\n  authType: AuthType.None,\n });\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 30,
							"character": 4
						}
					],
					"defaultValue": "\"None\""
				},
				{
					"id": 1450,
					"name": "OIDCRedirect",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "SSO using OIDC\nWill make the host application redirect to the OIDC IdP.\nSee code samples in {@link SAMLRedirect}."
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 117,
							"character": 4
						}
					],
					"defaultValue": "\"SSO_OIDC\""
				},
				{
					"id": 1448,
					"name": "SAMLRedirect",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "SSO using SAML\nMakes the host application redirect to the SAML IdP. Use this\nif your IdP does not allow itself to be embedded.",
						"text": "This redirects the host application to the SAML IdP. The host application\nwill be redirected back to the ThoughtSpot app after authentication.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ninit({\n  // ...\n  authType: AuthType.SAMLRedirect,\n });\n```\n\nThis opens the SAML IdP in a popup window. The popup is triggered\nwhen the user clicks the trigger button. The popup window will be\nclosed automatically after authentication."
							},
							{
								"tag": "example",
								"text": "\n```js\ninit({\n  // ...\n  authType: AuthType.SAMLRedirect,\n  authTriggerText: 'Login with SAML',\n  authTriggerContainer: '#embed-container',\n  inPopup: true,\n});\n```\n\nCan also use the event to trigger the popup flow. Works the same\nas the above example."
							},
							{
								"tag": "example",
								"text": "\n```js\nconst authEE = init({\n // ...\n authType: AuthType.SAMLRedirect,\n inPopup: true,\n});\n\nsomeButtonOnYourPage.addEventListener('click', () => {\n authEE.emit(AuthEvent.TRIGGER_SSO_POPUP);\n});\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 105,
							"character": 4
						}
					],
					"defaultValue": "\"SSO_SAML\""
				},
				{
					"id": 1452,
					"name": "TrustedAuthToken",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Trusted authentication server. Use your own authentication server\nwhich returns a bearer token, generated using the `secret_key` obtained\nfrom ThoughtSpot.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ninit({\n // ...\n authType: AuthType.TrustedAuthToken,\n getAuthToken: () => {\n   return fetch('https://my-backend.app/ts-token')\n     .then((response) => response.json())\n     .then((data) => data.token);\n }\n});\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 141,
							"character": 4
						}
					],
					"defaultValue": "\"AuthServer\""
				},
				{
					"id": 1453,
					"name": "TrustedAuthTokenCookieless",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Trusted authentication server Cookieless, Use your own authentication\nserver which returns a bearer token, generated using the `secret_key`\nobtained from ThoughtSpot. This uses a cookieless authentication\napproach, recommended to bypass the third-party cookie-blocking restriction\nimplemented by some browsers.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ninit({\n // ...\n authType: AuthType.TrustedAuthTokenCookieless,\n getAuthToken: () => {\n   return fetch('https://my-backend.app/ts-token')\n     .then((response) => response.json())\n     .then((data) => data.token);\n }\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.22.0| ThoughtSpot: 9.3.0.cl, 9.5.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 161,
							"character": 4
						}
					],
					"defaultValue": "\"AuthServerCookieless\""
				}
			],
			"groups": [
				{
					"title": "Enumeration members",
					"kind": 16,
					"children": [
						1454,
						1445,
						1444,
						1450,
						1448,
						1452,
						1453
					]
				}
			],
			"sources": [
				{
					"fileName": "types.ts",
					"line": 18,
					"character": 12
				}
			]
		},
		{
			"id": 1745,
			"name": "ContextMenuTriggerOptions",
			"kind": 4,
			"kindString": "Enumeration",
			"flags": {},
			"comment": {
				"shortText": "Enum for options to change context trigger\nBOTH_CLICKS option is introduced in 10.7"
			},
			"children": [
				{
					"id": 1748,
					"name": "BOTH_CLICKS",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4634,
							"character": 4
						}
					],
					"defaultValue": "\"both-clicks\""
				},
				{
					"id": 1746,
					"name": "LEFT_CLICK",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4632,
							"character": 4
						}
					],
					"defaultValue": "\"left-click\""
				},
				{
					"id": 1747,
					"name": "RIGHT_CLICK",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4633,
							"character": 4
						}
					],
					"defaultValue": "\"right-click\""
				}
			],
			"groups": [
				{
					"title": "Enumeration members",
					"kind": 16,
					"children": [
						1748,
						1746,
						1747
					]
				}
			],
			"sources": [
				{
					"fileName": "types.ts",
					"line": 4631,
					"character": 12
				}
			]
		},
		{
			"id": 1613,
			"name": "DataSourceVisualMode",
			"kind": 4,
			"kindString": "Enumeration",
			"flags": {},
			"comment": {
				"shortText": "The different visual modes that the data sources panel within\nsearch could appear in, such as hidden, collapsed, or expanded."
			},
			"children": [
				{
					"id": 1615,
					"name": "Collapsed",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The data source panel is collapsed, but the user can manually expand it."
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3295,
							"character": 4
						}
					],
					"defaultValue": "\"collapse\""
				},
				{
					"id": 1616,
					"name": "Expanded",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The data source panel is expanded, but the user can manually collapse it."
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3299,
							"character": 4
						}
					],
					"defaultValue": "\"expand\""
				},
				{
					"id": 1614,
					"name": "Hidden",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The data source panel is hidden."
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3291,
							"character": 4
						}
					],
					"defaultValue": "\"hide\""
				}
			],
			"groups": [
				{
					"title": "Enumeration members",
					"kind": 16,
					"children": [
						1615,
						1616,
						1614
					]
				}
			],
			"sources": [
				{
					"fileName": "types.ts",
					"line": 3287,
					"character": 12
				}
			]
		},
		{
			"id": 1475,
			"name": "EmbedEvent",
			"kind": 4,
			"kindString": "Enumeration",
			"flags": {},
			"comment": {
				"shortText": "Event types emitted by the embedded ThoughtSpot application.",
				"text": "To add an event listener use the corresponding\n{@link LiveboardEmbed.on} or {@link AppEmbed.on} or {@link SearchEmbed.on} method.",
				"tags": [
					{
						"tag": "example",
						"text": "\n```js\nimport { EmbedEvent } from '@thoughtspot/visual-embed-sdk';\n// Or\n// const { EmbedEvent } = window.tsembed;\n\n// create the liveboard embed.\n\nliveboardEmbed.on(EmbedEvent.Drilldown, (drilldown) => {\n  console.log('Drilldown event', drilldown);\n}));\n```\n\nIf you are using React components for embedding, you can register to any\nevents from the `EmbedEvent` list by using the `on<EventName>` convention.\nFor example,`onAlert`, `onCopyToClipboard` and so on."
					},
					{
						"tag": "example",
						"text": "\n```js\n// ...\nconst MyComponent = ({ dataSources }) => {\n     const onLoad = () => {\n     console.log(EmbedEvent.Load, {});\n     };\n\n     return (\n         <SearchEmbed\n             dataSources={dataSources}\n             onLoad = {logEvent(\"Load\")}\n         />\n    );\n};\n```"
					},
					{
						"tag": "group",
						"text": "Events\n"
					}
				]
			},
			"children": [
				{
					"id": 1502,
					"name": "ALL",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Emits all events.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.10.0 | ThoughtSpot: 8.2.0.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nappEmbed.on(EmbedEvent.ALL, payload => {\n console.log('Embed Events', payload)\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1711,
							"character": 4
						}
					],
					"defaultValue": "\"*\""
				},
				{
					"id": 1483,
					"name": "AddRemoveColumns",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "One or more data columns have been selected.",
						"tags": [
							{
								"tag": "returns",
								"text": "columnIds - the list of columns"
							},
							{
								"tag": "version",
								"text": "SDK: 1.10.0 | ThoughtSpot: 8.2.0.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nappEmbed.on(EmbedEvent.AddRemoveColumns, payload => {\n  console.log('AddRemoveColumns', payload);\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1484,
							"character": 4
						}
					],
					"defaultValue": "\"addRemoveColumns\""
				},
				{
					"id": 1525,
					"name": "AddToFavorites",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Emitted when a user clicks on the Favorite icon on a Liveboard",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.15.0 | ThoughtSpot: 8.7.0.cl, 8.8.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nliveboardEmbed.on(EmbedEvent.AddToFavorites, payload => {\n   console.log('favorites', payload);\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 2016,
							"character": 4
						}
					],
					"defaultValue": "\"addToFavorites\""
				},
				{
					"id": 1488,
					"name": "Alert",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The embedded object has sent an alert.",
						"tags": [
							{
								"tag": "returns",
								"text": "alert - An alert object"
							},
							{
								"tag": "version",
								"text": "SDK: 1.1.0 | ThoughtSpot: ts7.may.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nsearchEmbed.on(EmbedEvent.Alert)\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1576,
							"character": 4
						}
					],
					"defaultValue": "\"alert\""
				},
				{
					"id": 1522,
					"name": "AnswerChartSwitcher",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Emitted when an answer is switched to a chart or table view.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.11.0 | ThoughtSpot: 8.3.0.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nsearchEmbed.on(EmbedEvent.AnswerChartSwitcher, payload => {\n   console.log('switch view', payload);\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1989,
							"character": 4
						}
					],
					"defaultValue": "\"answerChartSwitcher\""
				},
				{
					"id": 1509,
					"name": "AnswerDelete",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Emitted when an Answer is deleted in the app",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.11.0 | ThoughtSpot: 8.3.0.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\n//emit when action starts\nappEmbed.on(EmbedEvent.AnswerDelete, payload => {\n   console.log('delete answer', payload)}, {start: true })\n//trigger when action is completed\nappEmbed.on(EmbedEvent.AnswerDelete, payload => {\n   console.log('delete answer', payload)})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1815,
							"character": 4
						}
					],
					"defaultValue": "\"answerDelete\""
				},
				{
					"id": 1548,
					"name": "AskSageInit",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Emitted when the *Ask Sage* is initialized.",
						"tags": [
							{
								"tag": "returns",
								"text": "viewName: string"
							},
							{
								"tag": "returns",
								"text": "viewId: string"
							},
							{
								"tag": "returns",
								"text": "liveboardId: string"
							},
							{
								"tag": "returns",
								"text": "isPublic: boolean"
							},
							{
								"tag": "version",
								"text": "SDK : 1.29.0 | ThoughtSpot Cloud: 9.12.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 2224,
							"character": 4
						}
					],
					"defaultValue": "\"AskSageInit\""
				},
				{
					"id": 1489,
					"name": "AuthExpire",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The ThoughtSpot auth session has expired.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.4.0 | ThoughtSpot: ts7.sep.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nappEmbed.on(EmbedEvent.AuthExpire, showAuthExpired)\n//show auth expired banner\nfunction showAuthExpired() {\n   document.getElementById(\"authExpiredBanner\");\n}\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1589,
							"character": 4
						}
					],
					"defaultValue": "\"ThoughtspotAuthExpired\""
				},
				{
					"id": 1477,
					"name": "AuthInit",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Authentication has either succeeded or failed.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.1.0 | ThoughtSpot: ts7.may.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nappEmbed.on(EmbedEvent.AuthInit, payload => {\n   console.log('AuthInit', payload);\n})\n```"
							},
							{
								"tag": "returns",
								"text": "isLoggedIn - A Boolean specifying whether authentication was successful.\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1387,
							"character": 4
						}
					],
					"defaultValue": "\"authInit\""
				},
				{
					"id": 1532,
					"name": "Cancel",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Emitted when a user clicks **Cancel** in edit mode on a Liveboard",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.15.0 | ThoughtSpot: 8.7.0.cl, 8.8.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nliveboardEmbed.on(EmbedEvent.Cancel)\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 2092,
							"character": 4
						}
					],
					"defaultValue": "\"cancel\""
				},
				{
					"id": 1520,
					"name": "CopyAEdit",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Emitted when the user creates a copy of an Answer",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.11.0 | ThoughtSpot: 8.3.0.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\n//emit when action starts\nappEmbed.on(EmbedEvent.CopyAEdit, payload => {\n   console.log('Copy and edit', payload)}, {start: true })\n//emit when action ends\nappEmbed.on(EmbedEvent.CopyAEdit, payload => {\n   console.log('Copy and edit', payload)})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1967,
							"character": 4
						}
					],
					"defaultValue": "\"copyAEdit\""
				},
				{
					"id": 1534,
					"name": "CopyLink",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Emitted when a user clicks **Copy link** action on a visualization.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.15.0 | ThoughtSpot: 8.7.0.cl, 8.8.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nliveboardEmbed.on(EmbedEvent.CopyLink, {\n  vizId: '730496d6-6903-4601-937e-2c691821af3c'})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 2112,
							"character": 4
						}
					],
					"defaultValue": "\"embedDocument\""
				},
				{
					"id": 1515,
					"name": "CopyToClipboard",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Emitted when a column value is copied in the embedded app.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.11.0 | ThoughtSpot: 8.3.0.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nseachEmbed.on(EmbedEvent.CopyToClipboard, payload => {\n   console.log('copy to clipboard', payload);\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1904,
							"character": 4
						}
					],
					"defaultValue": "\"context-menu-item-copy-to-clipboard\""
				},
				{
					"id": 1542,
					"name": "CreateConnection",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Emitted when a user updates a connection on the **Data** page",
						"tags": [
							{
								"tag": "version",
								"text": "SDK : 1.27.0 | ThoughtSpot: 9.8.0.cl, 9.8.0.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 2175,
							"character": 4
						}
					],
					"defaultValue": "\"createConnection\""
				},
				{
					"id": 1547,
					"name": "CreateWorksheet",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Emitted when a user creates a new worksheet",
						"tags": [
							{
								"tag": "version",
								"text": "SDK : 1.27.0 | ThoughtSpot Cloud: 9.8.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 2215,
							"character": 4
						}
					],
					"defaultValue": "\"createWorksheet\""
				},
				{
					"id": 1535,
					"name": "CrossFilterChanged",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Emitted when a user interacts with cross filters on a visualization or Liveboard",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.21.0 | ThoughtSpot: 9.2.0.cl, 9.5.0.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nliveboardEmbed.trigger(HostEvent.CrossFilterChanged, {\n   vizId: '730496d6-6903-4601-937e-2c691821af3c'})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 2122,
							"character": 4
						}
					],
					"defaultValue": "\"cross-filter-changed\""
				},
				{
					"id": 1484,
					"name": "CustomAction",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "A custom action has been triggered.",
						"tags": [
							{
								"tag": "returns",
								"text": "actionId - ID of the custom action"
							},
							{
								"tag": "returns",
								"text": "payload {@link CustomActionPayload} - Response payload with the\nAnswer or Liveboard data"
							},
							{
								"tag": "version",
								"text": "SDK: 1.1.0 | ThoughtSpot: ts7.may.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nappEmbed.on(EmbedEvent.customAction, payload => {\n    const data = payload.data;\n    if (data.id === 'insert Custom Action ID here') {\n        console.log('Custom Action event:', data.embedAnswerData);\n    }\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1501,
							"character": 4
						}
					],
					"defaultValue": "\"customAction\""
				},
				{
					"id": 1479,
					"name": "Data",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Data pertaining to answer or Liveboard is received",
						"tags": [
							{
								"tag": "returns",
								"text": "data - The answer or Liveboard data"
							},
							{
								"tag": "version",
								"text": "SDK: 1.1.0 | ThoughtSpot: ts7.may.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nliveboardEmbed.on(EmbedEvent.Data, payload => {\n   console.log('data', payload);\n})\n```"
							},
							{
								"tag": "important",
								"text": "\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1414,
							"character": 4
						}
					],
					"defaultValue": "\"data\""
				},
				{
					"id": 1482,
					"name": "DataSourceSelected",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "One or more data sources have been selected.",
						"tags": [
							{
								"tag": "returns",
								"text": "dataSourceIds - the list of data sources"
							},
							{
								"tag": "version",
								"text": "SDK: 1.1.0 | ThoughtSpot: ts7.may.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nsearchEmbed.on(EmbedEvent.DataSourceSelected, payload => {\n   console.log('DataSourceSelected', payload);\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1472,
							"character": 4
						}
					],
					"defaultValue": "\"dataSourceSelected\""
				},
				{
					"id": 1530,
					"name": "Delete",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Emitted when a user clicks **Delete** on a visualization",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.15.0 | ThoughtSpot: 8.7.0.cl, 8.8.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nliveboardEmbed.on(EmbedEvent.Delete,\n  {vizId: '730496d6-6903-4601-937e-2c691821af3c'})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 2074,
							"character": 4
						}
					],
					"defaultValue": "\"delete\""
				},
				{
					"id": 1546,
					"name": "DeletePersonalisedView",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Emitted when a PersonalisedView is deleted.",
						"tags": [
							{
								"tag": "returns",
								"text": "views: string[]"
							},
							{
								"tag": "returns",
								"text": "liveboardId: string"
							},
							{
								"tag": "version",
								"text": "SDK : 1.26.0 | ThoughtSpot: 9.7.0.cl, 9.8.0.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 2210,
							"character": 4
						}
					],
					"defaultValue": "\"deletePersonalisedView\""
				},
				{
					"id": 1500,
					"name": "DialogClose",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Emitted when any modal is closed in the app",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.6.0 | ThoughtSpot: ts8.nov.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nappEmbed.on(EmbedEvent.DialogClose, payload => {\n    console.log('dialog close', payload);\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1678,
							"character": 4
						}
					],
					"defaultValue": "\"dialog-close\""
				},
				{
					"id": 1499,
					"name": "DialogOpen",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Emitted when any modal is opened in the app",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.6.0 | ThoughtSpot: ts8.nov.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nappEmbed.on(EmbedEvent.DialogOpen, payload => {\n   console.log('dialog open', payload);\n })\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1667,
							"character": 4
						}
					],
					"defaultValue": "\"dialog-open\""
				},
				{
					"id": 1504,
					"name": "Download",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Emitted when the download action is triggered on an answer",
						"text": "**Note**: This event is deprecated in v1.21.0.\nTo fire an event when a download action is initiated on a chart or table,\nuse `EmbedEvent.DownloadAsPng`, `EmbedEvent.DownloadAsPDF`,\n`EmbedEvent.DownloadAsCSV`, or `EmbedEvent.DownloadAsXLSX`",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.11.0 | ThoughtSpot: 8.3.0.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nliveboardEmbed.on(EmbedEvent.Download, {\nvizId: '730496d6-6903-4601-937e-2c691821af3c'\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1745,
							"character": 4
						}
					],
					"defaultValue": "\"download\""
				},
				{
					"id": 1507,
					"name": "DownloadAsCsv",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Emitted when the Download as CSV action is triggered on an answer",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.11.0 | ThoughtSpot: 8.3.0.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\n//emit when action starts\nsearchEmbed.on(EmbedEvent.DownloadAsCSV, payload => {\n  console.log('download CSV', payload)}, {start: true })\n//emit when action ends\nsearchEmbed.on(EmbedEvent.DownloadAsCSV, payload => {\n   console.log('download CSV', payload)})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1787,
							"character": 4
						}
					],
					"defaultValue": "\"downloadAsCsv\""
				},
				{
					"id": 1506,
					"name": "DownloadAsPdf",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Emitted when the Download as PDF action is triggered on an answer",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.11.0 | ThoughtSpot: 8.3.0.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\n//emit when action starts\nsearchEmbed.on(EmbedEvent.DownloadAsPdf, payload => {\n  console.log('download PDF', payload)}, {start: true })\n//emit when action ends\nsearchEmbed.on(EmbedEvent.DownloadAsPdf, payload => {\n  console.log('download PDF', payload)})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1773,
							"character": 4
						}
					],
					"defaultValue": "\"downloadAsPdf\""
				},
				{
					"id": 1505,
					"name": "DownloadAsPng",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Emitted when the download action is triggered on an answer",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.21.0 | ThoughtSpot: 9.2.0.cl, 9.4.0.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\n//emit when action starts\nsearchEmbed.on(EmbedEvent.DownloadAsPng, payload => {\n  console.log('download PNG', payload)}, {start: true })\n//emit when action ends\nsearchEmbed.on(EmbedEvent.DownloadAsPng, payload => {\n  console.log('download PNG', payload)})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1759,
							"character": 4
						}
					],
					"defaultValue": "\"downloadAsPng\""
				},
				{
					"id": 1508,
					"name": "DownloadAsXlsx",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Emitted when the Download as XLSX action is triggered on an answer",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.11.0 | ThoughtSpot: 8.3.0.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\n//emit when action starts\nsearchEmbed.on(EmbedEvent.DownloadAsXlsx, payload => {\n  console.log('download Xlsx', payload)}, { start: true })\n//emit when action ends\nsearchEmbed.on(EmbedEvent.DownloadAsXlsx, payload => {\n  console.log('download Xlsx', payload)})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1801,
							"character": 4
						}
					],
					"defaultValue": "\"downloadAsXlsx\""
				},
				{
					"id": 1514,
					"name": "DrillExclude",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Emitted when a user clicks the **Exclude** action to exclude a specific value or\ndata on a chart or table",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.11.0 | ThoughtSpot: 8.3.0.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nappEmbed.on(EmbedEvent.DrillExclude, payload => {\n    console.log('Drill exclude', payload);\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1893,
							"character": 4
						}
					],
					"defaultValue": "\"context-menu-item-exclude\""
				},
				{
					"id": 1513,
					"name": "DrillInclude",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Emitted when a user clicks the **Include** action to include a specific value or\ndata on a chart or table.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.11.0 | ThoughtSpot: 8.3.0.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nappEmbed.on(EmbedEvent.DrillInclude, payload => {\n   console.log('Drill include', payload);\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1881,
							"character": 4
						}
					],
					"defaultValue": "\"context-menu-item-include\""
				},
				{
					"id": 1481,
					"name": "Drilldown",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "A drill-down operation has been performed.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.1.0 | ThoughtSpot: ts7.may.cl, 8.4.1.sw"
							},
							{
								"tag": "returns",
								"text": "additionalFilters - Any additional filters applied"
							},
							{
								"tag": "returns",
								"text": "drillDownColumns - The columns on which drill down was performed"
							},
							{
								"tag": "returns",
								"text": "nonFilteredColumns - The columns that were not filtered"
							},
							{
								"tag": "example",
								"text": "\n```js\nsearchEmbed.on(EmbedEvent.DrillDown, {\n   points: {\n       clickedPoint,\n       selectedPoints: selectedPoint\n   },\n   autoDrillDown: true,\n})\n```\nIn this example, `VizPointDoubleClick` event is used for\ntriggering the `DrillDown` event when an area or specific\ndata point on a table or chart is double-clicked."
							},
							{
								"tag": "example",
								"text": "\n```js\nsearchEmbed.on(EmbedEvent.VizPointDoubleClick, (payload) => {\n  console.log(payload);\n  const clickedPoint = payload.data.clickedPoint;\n  const selectedPoint = payload.data.selectedPoints;\n  console.log('>>> called', clickedPoint);\n  embed.trigger(HostEvent.DrillDown, {\n     points: {\n     clickedPoint,\n         selectedPoints: selectedPoint\n    },\n  autoDrillDown: true,\n    })\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1460,
							"character": 4
						}
					],
					"defaultValue": "\"drillDown\""
				},
				{
					"id": 1527,
					"name": "Edit",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Emitted when a user clicks **Edit** on a Liveboard or visualization",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.15.0 | ThoughtSpot: 8.7.0.cl, 8.8.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nliveboardEmbed.on(EmbedEvent.Edit, payload => {\n   console.log(`Liveboard edit', payload);\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 2038,
							"character": 4
						}
					],
					"defaultValue": "\"edit\""
				},
				{
					"id": 1517,
					"name": "EditTML",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Emitted when a user clicks the **Edit TML** action\non an embedded Liveboard.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.11.0 | ThoughtSpot: 8.3.0.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nappEmbed.on(EmbedEvent.EditTML, payload => {\n   console.log('Edit TML', payload);\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1927,
							"character": 4
						}
					],
					"defaultValue": "\"editTSL\""
				},
				{
					"id": 1487,
					"name": "Error",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "An error has occurred. This event is fired for the following error types:",
						"text": "`API` - API call failure error.\n`FULLSCREEN` - Error when presenting a Liveboard or visualization in full screen\nmode. `SINGLE_VALUE_FILTER` - Error due to multiple values in the single value\nfilter. `NON_EXIST_FILTER` - Error due to a non-existent filter.\n`INVALID_DATE_VALUE` - Invalid date value error.\n`INVALID_OPERATOR` - Use of invalid operator during filter application.\n\nFor more information, see https://developers.thoughtspot.com/docs/events-app-integration#errorType",
						"tags": [
							{
								"tag": "returns",
								"text": "error - An error object or message"
							},
							{
								"tag": "version",
								"text": "SDK: 1.1.0 | ThoughtSpot: ts7.may.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\n// API error\nSearchEmbed.on(EmbedEvent.Error, (error) => {\n  console.log(error);\n // { type: \"Error\", data: { errorType: \"API\", error: { message: '...', error: '...' } } }\n});\n```"
							},
							{
								"tag": "example",
								"text": "\n```js\n// Fullscreen error (Errors during presenting of a liveboard)\nLiveboardEmbed.on(EmbedEvent.Error, (error) => {\n  console.log(error);\n  // { type: \"Error\", data: { errorType: \"FULLSCREEN\", error: {\n  //   message: \"Fullscreen API is not enabled\",\n  //   stack: \"...\"\n  // } }}\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1566,
							"character": 4
						}
					],
					"defaultValue": "\"Error\""
				},
				{
					"id": 1533,
					"name": "Explore",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Emitted when a user clicks **Explore** on a visualization",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.15.0 | ThoughtSpot: 8.7.0.cl, 8.8.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nliveboardEmbed.on(EmbedEvent.Explore,  {\n  vizId: '730496d6-6903-4601-937e-2c691821af3c'})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 2102,
							"character": 4
						}
					],
					"defaultValue": "\"explore\""
				},
				{
					"id": 1518,
					"name": "ExportTML",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Emitted when the **Export TML** action is triggered on an\nan embedded object in the app",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.11.0 | ThoughtSpot: 8.3.0.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\n//emit when action starts\nsearchEmbed.on(EmbedEvent.ExportTML, payload => {\n    console.log('Export TML', payload)}, { start: true })\n//emit when action ends\nsearchEmbed.on(EmbedEvent.ExportTML, payload => {\n    console.log('Export TML', payload)})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1942,
							"character": 4
						}
					],
					"defaultValue": "\"exportTSL\""
				},
				{
					"id": 1538,
					"name": "FilterChanged",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Emitted when a user changes any filter on a Liveboard.\nReturns filter type and name, column name and ID, and runtime\nfilter details.",
						"tags": [
							{
								"tag": "example",
								"text": "\n\n```js\nLiveboardEmbed.on(EmbedEvent.FilterChanged, (payload) => {\n   console.log('payload', payload);\n})\n\n@version SDK: 1.23.0 | ThoughtSpot: 9.4.0.cl, 9.5.0.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 2152,
							"character": 4
						}
					],
					"defaultValue": "\"filterChanged\""
				},
				{
					"id": 1494,
					"name": "GetDataClick",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Emitted when the **Get Data** action is initiated.\nApplicable to `SearchBarEmbed` only.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.19.0 | ThoughtSpot: 9.0.0.cl, 9.0.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nsearchbarEmbed.on(EmbedEvent.GetDataClick)\n .then(data => {\n console.log('Answer Data:', data);\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1624,
							"character": 4
						}
					],
					"defaultValue": "\"getDataClick\""
				},
				{
					"id": 1476,
					"name": "Init",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Rendering has initialized.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nliveboardEmbed.on(EmbedEvent.Init, showLoader)\n //show a loader\nfunction showLoader() {\ndocument.getElementById(\"loader\");\n}\n```"
							},
							{
								"tag": "returns",
								"text": "timestamp - The timestamp when the event was generated.\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1375,
							"character": 4
						}
					],
					"defaultValue": "\"init\""
				},
				{
					"id": 1524,
					"name": "LiveboardInfo",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Emitted when a user clicks **Show Liveboard details** on a Liveboard",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.15.0 | ThoughtSpot: 8.7.0.cl, 8.8.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nliveboardEmbed.on(EmbedEvent.AnswerChartSwitcher, payload => {\n   console.log('Liveboard details', payload);\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 2005,
							"character": 4
						}
					],
					"defaultValue": "\"pinboardInfo\""
				},
				{
					"id": 1501,
					"name": "LiveboardRendered",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Emitted when the Liveboard shell loads.\nYou can use this event as a hook to trigger\nother events on the rendered Liveboard.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.9.1 | ThoughtSpot: 8.1.0.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nliveboardEmbed.on(EmbedEvent.LiveboardRendered, payload => {\nconsole.log('Liveboard is rendered', payload);\n})\n```\nThe following example shows how to trigger\n`SetVisibleVizs` event using LiveboardRendered embed event:"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embedRef = useEmbedRef();\nconst onLiveboardRendered = () => {\nembed.trigger(HostEvent.SetVisibleVizs, ['viz1', 'viz2']);\n};\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1700,
							"character": 4
						}
					],
					"defaultValue": "\"PinboardRendered\""
				},
				{
					"id": 1478,
					"name": "Load",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "The embed object container has loaded.",
						"tags": [
							{
								"tag": "returns",
								"text": "timestamp - The timestamp when the event was generated."
							},
							{
								"tag": "version",
								"text": "SDK: 1.1.0 | ThoughtSpot: ts7.may.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nliveboardEmbed.on(EmbedEvent.Load, hideLoader)\n   //hide loader\nfunction hideLoader() {\n  document.getElementById(\"loader\");\n}\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1401,
							"character": 4
						}
					],
					"defaultValue": "\"load\""
				},
				{
					"id": 1528,
					"name": "MakeACopy",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Emitted when a user clicks *Make a copy* on a Liveboard",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.15.0 | ThoughtSpot: 8.7.0.cl, 8.8.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nliveboardEmbed.on(EmbedEvent.MakeACopy, payload => {\n   console.log(`Copy', payload);\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 2049,
							"character": 4
						}
					],
					"defaultValue": "\"makeACopy\""
				},
				{
					"id": 1497,
					"name": "NoCookieAccess",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Emitted when the embed does not have cookie access. This happens\nwhen Safari and other Web browsers block third-party cookies\nare blocked by default. `NoCookieAccess` can trigger",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nappEmbed.on(EmbedEvent.NoCookieAccess)\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.1.0 | ThoughtSpot: ts7.may.cl, 7.2.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1650,
							"character": 4
						}
					],
					"defaultValue": "\"noCookieAccess\""
				},
				{
					"id": 1550,
					"name": "OnBeforeGetVizDataIntercept",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "This event can be emitted to intercept search execution initiated by\nthe users and implement the logic to allow or restrict search execution.\nYou can can also show custom error text if the search query must be\nrestricted due to your application or business requirements.",
						"text": "Prerequisite: Set `isOnBeforeGetVizDataInterceptEnabled` to `true`\nfor this embed event to get emitted.",
						"tags": [
							{
								"tag": "param:",
								"text": "payload"
							},
							{
								"tag": "param:",
								"text": "responder\nContains elements that lets developers define whether ThoughtSpot\nshould run the search, and if not, what error message\nshould be shown to the user.\n\nexecute: When execute returns `true`, the search will be run.\nWhen execute returns `false`, the search will not be executed.\n\nerror: Developers can customize the error message text when `execute`\nreturns `false` using the error parameter in responder."
							},
							{
								"tag": "version",
								"text": "SDK : 1.29.0 | ThoughtSpot : 10.3.0.cl"
							},
							{
								"tag": "example",
								"text": "\n```js\n.on(EmbedEvent.OnBeforeGetVizDataIntercept,\n(payload, responder) => {\n responder({\n     data: {\n         execute:false,\n         error: {\n         //Provide a custom error message to explain to your end user\n         //why their search did not run\n         errorText: \"This search query cannot be run.\n         Please contact your administrator for more details.\"\n         }\n }})\n})\n```\n\n```js\n.on(EmbedEvent.OnBeforeGetVizDataIntercept,\n(payload, responder) => {\nconst query = payload.data.data.answer.search_query\nresponder({\n data: {\n     // returns true as long as the query does not include\n     // both the 'sales' AND the 'county' column\n     execute: !(query.includes(\"sales\")&&query.includes(\"county\")),\n     error: {\n     //Provide a custom error message to explain to your end user\n     // why their search did not run, and which searches are accepted by your custom logic.\n     errorText: \"You can't use this query :\" + query + \".\n     The 'sales' measures can never be used at the 'county' level.\n     Please try another measure, or remove 'county' from your search.\"\n     }\n }})\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 2288,
							"character": 4
						}
					],
					"defaultValue": "\"onBeforeGetVizDataIntercept\""
				},
				{
					"id": 1551,
					"name": "ParameterChanged",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Emitted when parameter changes in an Answer\nor Liveboard",
						"text": "```js\nliveboardEmbed.on(EmbedEvent.ParameterChanged, (payload) => {\n    console.log('payload', payload);\n})\n```",
						"tags": [
							{
								"tag": "version",
								"text": "SDK : 1.29.0 | ThoughtSpot : 10.3.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 2300,
							"character": 4
						}
					],
					"defaultValue": "\"parameterChanged\""
				},
				{
					"id": 1510,
					"name": "Pin",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Emitted when an answer is pinned to a Liveboard",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.11.0 | ThoughtSpot: 8.3.0.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\n//emit when action starts\nsearchEmbed.on(EmbedEvent.Pin, payload => {\n   console.log('pin', payload)\n}, {\nstart: true\n})\n//emit when action ends\nsearchEmbed.on(EmbedEvent.Pin, payload => {\n   console.log('pin', payload)\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1833,
							"character": 4
						}
					],
					"defaultValue": "\"pin\""
				},
				{
					"id": 1529,
					"name": "Present",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Emitted when a user clicks **Present** on a Liveboard or visualization",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.15.0 | ThoughtSpot: 8.7.0.cl, 8.8.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nliveboardEmbed.on(EmbedEvent.Present)\n```"
							},
							{
								"tag": "example",
								"text": "\n```js\nliveboardEmbed.on(EmbedEvent.Present, {\n  vizId: '730496d6-6903-4601-937e-2c691821af3c'})\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 2064,
							"character": 4
						}
					],
					"defaultValue": "\"present\""
				},
				{
					"id": 1480,
					"name": "QueryChanged",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Search query has been updated by the user.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.4.0 | ThoughtSpot: ts7.sep.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nsearchEmbed.on(EmbedEvent.QueryChanged, payload => console.log('data', payload))\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1423,
							"character": 4
						}
					],
					"defaultValue": "\"queryChanged\""
				},
				{
					"id": 1549,
					"name": "Rename",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Emitted when a LB/viz is renamed",
						"tags": [
							{
								"tag": "version",
								"text": "SDK : 1.28.0 | ThoughtSpot: 9.10.5.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 2229,
							"character": 4
						}
					],
					"defaultValue": "\"rename\""
				},
				{
					"id": 1545,
					"name": "ResetLiveboard",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Emitted when a Liveboard is reset.",
						"tags": [
							{
								"tag": "returns",
								"text": "viewName: string"
							},
							{
								"tag": "returns",
								"text": "viewId: string"
							},
							{
								"tag": "returns",
								"text": "liveboardId: string"
							},
							{
								"tag": "returns",
								"text": "isPublic: boolean"
							},
							{
								"tag": "version",
								"text": "SDK : 1.26.0 | ThoughtSpot: 9.7.0.cl, 9.8.0.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 2203,
							"character": 4
						}
					],
					"defaultValue": "\"resetLiveboard\""
				},
				{
					"id": 1495,
					"name": "RouteChange",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Detects the route change.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.7.0 | ThoughtSpot: 8.0.0.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nsearchEmbed.on(EmbedEvent.RouteChange, payload =>\n   console.log('data', payload))\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1634,
							"character": 4
						}
					],
					"defaultValue": "\"ROUTE_CHANGE\""
				},
				{
					"id": 1539,
					"name": "SageEmbedQuery",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": " Emitted when a user clicks the **Go** button to initiate\n a Natural Language Search query",
						"tags": [
							{
								"tag": "version",
								"text": "SDK : 1.26.0 | ThoughtSpot: 9.7.0.cl, 9.8.0.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 2158,
							"character": 4
						}
					],
					"defaultValue": "\"sageEmbedQuery\""
				},
				{
					"id": 1540,
					"name": "SageWorksheetUpdated",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Emitted when a user selects a data source on the embedded\nNatural Language Search interface.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK : 1.26.0 | ThoughtSpot: 9.7.0.cl, 9.8.0.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 2165,
							"character": 4
						}
					],
					"defaultValue": "\"sageWorksheetUpdated\""
				},
				{
					"id": 1503,
					"name": "Save",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Emitted when an Answer is saved in the app",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.11.0 | ThoughtSpot: 8.3.0.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\n//Emit when action starts\n searchEmbed.on(EmbedEvent.Save, payload => {\n   console.log('Save', payload)\n }, {\n   start: true\n})\n//emit when action ends\nsearchEmbed.on(EmbedEvent.Save, payload => {\n   console.log('Save', payload)\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1729,
							"character": 4
						}
					],
					"defaultValue": "\"save\""
				},
				{
					"id": 1519,
					"name": "SaveAsView",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Emitted when an Answer is saved as a View.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.11.0 | ThoughtSpot: 8.3.0.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nappEmbed.on(EmbedEvent.SaveAsView, payload => {\n   console.log('View', payload);\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1953,
							"character": 4
						}
					],
					"defaultValue": "\"saveAsView\""
				},
				{
					"id": 1544,
					"name": "SavePersonalisedView",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Emitted when a Personalised view is saved.",
						"tags": [
							{
								"tag": "returns",
								"text": "viewName: string"
							},
							{
								"tag": "returns",
								"text": "viewId: string"
							},
							{
								"tag": "returns",
								"text": "liveboardId: string"
							},
							{
								"tag": "returns",
								"text": "isPublic: boolean"
							},
							{
								"tag": "version",
								"text": "SDK : 1.26.0 | ThoughtSpot: 9.7.0.cl, 9.8.0.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 2194,
							"character": 4
						}
					],
					"defaultValue": "\"savePersonalisedView\""
				},
				{
					"id": 1526,
					"name": "Schedule",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Emitted when a user clicks **Schedule** on a Liveboard",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.15.0 | ThoughtSpot: 8.7.0.cl, 8.8.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nliveboardEmbed.on(EmbedEvent.Schedule, payload => {\n   console.log(`Liveboard schedule', payload);\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 2027,
							"character": 4
						}
					],
					"defaultValue": "\"subscription\""
				},
				{
					"id": 1531,
					"name": "SchedulesList",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Emitted when a user clicks Manage schedules on a Liveboard",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.15.0 | ThoughtSpot: 8.7.0.cl, 8.8.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nliveboardEmbed.on(EmbedEvent.SchedulesList)\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 2083,
							"character": 4
						}
					],
					"defaultValue": "\"schedule-list\""
				},
				{
					"id": 1512,
					"name": "Share",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Emitted when a user shares an object with another user or group",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.11.0 | ThoughtSpot: 8.3.0.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\n//emit when action starts\nsearchEmbed.on(EmbedEvent.Share, payload => {\n   console.log('Share', payload)\n}, {\nstart: true\n})\n//emit when action ends\nsearchEmbed.on(EmbedEvent.Share, payload => {\n  console.log('Share', payload)\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1869,
							"character": 4
						}
					],
					"defaultValue": "\"share\""
				},
				{
					"id": 1521,
					"name": "ShowUnderlyingData",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Emitted when a user clicks Show underlying data on an Answer",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.11.0 | ThoughtSpot: 8.3.0.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nliveboardEmbed.on(EmbedEvent.ShowUnderlyingData, payload => {\n   console.log('show data', payload);\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1978,
							"character": 4
						}
					],
					"defaultValue": "\"showUnderlyingData\""
				},
				{
					"id": 1511,
					"name": "SpotIQAnalyze",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Emitted when SpotIQ analysis is triggered",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.11.0 | ThoughtSpot: 8.3.0.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\n//emit when action starts\nsearchEmbed.on(EmbedEvent.SpotIQAnalyze, payload => {\n  console.log('SpotIQAnalyze', payload)\n}, {\nstart: true\n})\n//emit when action ends\nsearchEmbed.on(EmbedEvent.SpotIQAnalyze, payload => {\n  console.log('SpotIQ analyze', payload)\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1851,
							"character": 4
						}
					],
					"defaultValue": "\"spotIQAnalyze\""
				},
				{
					"id": 1552,
					"name": "TableVizRendered",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Emitted when the table viz renders.\nYou can use this event as a hook to trigger\nother events on the rendered table viz data.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nsearchEmbed.on(EmbedEvent.TableVizRendered, (payload) => {\n      console.log(payload);\n      const columnDataLite = payload.data.data.columnDataLite;\n      columnDataLite[0].dataValue[0]=\"new fob\";\n      console.log('>>> new Data', columnDataLite);\n      searchEmbed.trigger(HostEvent.TransformTableVizData, columnDataLite);\n})\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.35.12 | ThoughtSpot: 10.7.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 2317,
							"character": 5
						}
					],
					"defaultValue": "\"TableVizRendered\""
				},
				{
					"id": 1541,
					"name": "UpdateConnection",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Emitted when a user updates a connection on the **Data** page",
						"tags": [
							{
								"tag": "version",
								"text": "SDK : 1.27.0 | ThoughtSpot: 9.8.0.cl, 9.8.0.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 2170,
							"character": 4
						}
					],
					"defaultValue": "\"updateConnection\""
				},
				{
					"id": 1543,
					"name": "UpdatePersonalisedView",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Emitted when name, status (private or public) or filter values of a\nPersonalised view is updated.",
						"tags": [
							{
								"tag": "returns",
								"text": "viewName: string"
							},
							{
								"tag": "returns",
								"text": "viewId: string"
							},
							{
								"tag": "returns",
								"text": "liveboardId: string"
							},
							{
								"tag": "returns",
								"text": "isPublic: boolean"
							},
							{
								"tag": "version",
								"text": "SDK : 1.26.0 | ThoughtSpot: 9.7.0.cl, 9.8.0.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 2185,
							"character": 4
						}
					],
					"defaultValue": "\"updatePersonalisedView\""
				},
				{
					"id": 1516,
					"name": "UpdateTML",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Emitted when a user clicks the **Update TML** action on\nembedded Liveboard.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.11.0 | ThoughtSpot: 8.3.0.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nliveboardEmbed.on(EmbedEvent.UpdateTML)\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1915,
							"character": 4
						}
					],
					"defaultValue": "\"updateTSL\""
				},
				{
					"id": 1486,
					"name": "VizPointClick",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Listen to clicks on a visualization in a Liveboard or Search result.",
						"tags": [
							{
								"tag": "returns",
								"text": "viz, clickedPoint - metadata about the point that is clicked"
							},
							{
								"tag": "version",
								"text": "SDK: 1.11.0 | ThoughtSpot: 8.3.0.cl, 8.4.1.sw"
							},
							{
								"tag": "important",
								"text": ""
							},
							{
								"tag": "example",
								"text": "\n```js\nembed.on(EmbedEvent.VizPointClick, ({data}) => {\n  console.log(\n   data.vizId, // viz id\n   data.clickedPoint.selectedAttributes[0].value,\n   data.clickedPoint.selectedAttributes[0].column.name,\n   data.clickedPoint.selectedMeasures[0].value,\n   data.clickedPoint.selectedMeasures[0].column.name,\n  )\n});\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1532,
							"character": 4
						}
					],
					"defaultValue": "\"vizPointClick\""
				},
				{
					"id": 1485,
					"name": "VizPointDoubleClick",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Listen to double click actions on a visualization.",
						"tags": [
							{
								"tag": "returns",
								"text": "ContextMenuInputPoints - Data point that is double-clicked"
							},
							{
								"tag": "version",
								"text": "SDK: 1.5.0 | ThoughtSpot: ts7.oct.cl, 7.2.1"
							},
							{
								"tag": "example",
								"text": "\n```js\nlivebaordEmbed.on(EmbedEvent.VizPointDoubleClick, payload => {\n     console.log('VizPointDoubleClick', payload);\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1513,
							"character": 4
						}
					],
					"defaultValue": "\"vizPointDoubleClick\""
				},
				{
					"id": 1536,
					"name": "VizPointRightClick",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Emitted when a user right clicks on a visualization (chart or table)",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.21.0 | ThoughtSpot: 9.2.0.cl, 9.5.0.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nLiveboardEmbed.on(EmbedEvent.VizPointRightClick, payload => {\n   console.log('VizPointClick', payload)\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 2133,
							"character": 4
						}
					],
					"defaultValue": "\"vizPointRightClick\""
				}
			],
			"groups": [
				{
					"title": "Enumeration members",
					"kind": 16,
					"children": [
						1502,
						1483,
						1525,
						1488,
						1522,
						1509,
						1548,
						1489,
						1477,
						1532,
						1520,
						1534,
						1515,
						1542,
						1547,
						1535,
						1484,
						1479,
						1482,
						1530,
						1546,
						1500,
						1499,
						1504,
						1507,
						1506,
						1505,
						1508,
						1514,
						1513,
						1481,
						1527,
						1517,
						1487,
						1533,
						1518,
						1538,
						1494,
						1476,
						1524,
						1501,
						1478,
						1528,
						1497,
						1550,
						1551,
						1510,
						1529,
						1480,
						1549,
						1545,
						1495,
						1539,
						1540,
						1503,
						1519,
						1544,
						1526,
						1531,
						1512,
						1521,
						1511,
						1552,
						1541,
						1543,
						1516,
						1486,
						1485,
						1536
					]
				}
			],
			"sources": [
				{
					"fileName": "types.ts",
					"line": 1362,
					"character": 12
				}
			]
		},
		{
			"id": 2068,
			"name": "HomeLeftNavItem",
			"kind": 4,
			"kindString": "Enumeration",
			"flags": {},
			"comment": {
				"shortText": "This option does not apply to the classic homepage experience.\nTo access the updated modular homepage,\nset `modularHomeExperience` to `true`\n(available as Early Access feature in 9.12.5.cl)."
			},
			"children": [
				{
					"id": 2072,
					"name": "Answers",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.28.0| ThoughtSpot: 9.12.5.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 195,
							"character": 4
						}
					],
					"defaultValue": "\"answers\""
				},
				{
					"id": 2070,
					"name": "Home",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.28.0| ThoughtSpot: 9.12.5.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 187,
							"character": 4
						}
					],
					"defaultValue": "\"insights-home\""
				},
				{
					"id": 2075,
					"name": "LiveboardSchedules",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.34.0| ThoughtSpot: 10.3.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 207,
							"character": 4
						}
					],
					"defaultValue": "\"liveboard-schedules\""
				},
				{
					"id": 2071,
					"name": "Liveboards",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.28.0| ThoughtSpot: 9.12.5.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 191,
							"character": 4
						}
					],
					"defaultValue": "\"liveboards\""
				},
				{
					"id": 2073,
					"name": "MonitorSubscription",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.28.0| ThoughtSpot: 9.12.5.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 199,
							"character": 4
						}
					],
					"defaultValue": "\"monitor-alerts\""
				},
				{
					"id": 2069,
					"name": "SearchData",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.28.0| ThoughtSpot: 9.12.5.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 183,
							"character": 4
						}
					],
					"defaultValue": "\"search-data\""
				},
				{
					"id": 2074,
					"name": "SpotIQAnalysis",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.28.0| ThoughtSpot: 9.12.5.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 203,
							"character": 4
						}
					],
					"defaultValue": "\"spotiq-analysis\""
				}
			],
			"groups": [
				{
					"title": "Enumeration members",
					"kind": 16,
					"children": [
						2072,
						2070,
						2075,
						2071,
						2073,
						2069,
						2074
					]
				}
			],
			"sources": [
				{
					"fileName": "types.ts",
					"line": 179,
					"character": 12
				}
			]
		},
		{
			"id": 2237,
			"name": "HomePageSearchBarMode",
			"kind": 4,
			"kindString": "Enumeration",
			"flags": {},
			"children": [
				{
					"id": 2239,
					"name": "AI_ANSWER",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"sources": [
						{
							"fileName": "embed/app.ts",
							"line": 83,
							"character": 4
						}
					],
					"defaultValue": "\"aiAnswer\""
				},
				{
					"id": 2240,
					"name": "NONE",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"sources": [
						{
							"fileName": "embed/app.ts",
							"line": 84,
							"character": 4
						}
					],
					"defaultValue": "\"none\""
				},
				{
					"id": 2238,
					"name": "OBJECT_SEARCH",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"sources": [
						{
							"fileName": "embed/app.ts",
							"line": 82,
							"character": 4
						}
					],
					"defaultValue": "\"objectSearch\""
				}
			],
			"groups": [
				{
					"title": "Enumeration members",
					"kind": 16,
					"children": [
						2239,
						2240,
						2238
					]
				}
			],
			"sources": [
				{
					"fileName": "embed/app.ts",
					"line": 81,
					"character": 12
				}
			]
		},
		{
			"id": 2076,
			"name": "HomepageModule",
			"kind": 4,
			"kindString": "Enumeration",
			"flags": {},
			"comment": {
				"shortText": "Home page module that can be hidden.\n**Note**: This option does not apply to the classic homepage.\nTo access the updated modular homepage, set\n`modularHomeExperience` to `true` (available as Early Access feature in 9.12.5.cl).",
				"tags": [
					{
						"tag": "version",
						"text": "SDK: 1.28.0 | ThoughtSpot: 9.12.5.cl, 10.1.0.sw\n"
					}
				]
			},
			"children": [
				{
					"id": 2079,
					"name": "Favorite",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "favorite objects"
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1272,
							"character": 4
						}
					],
					"defaultValue": "\"FAVORITE\""
				},
				{
					"id": 2082,
					"name": "Learning",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Learning videos"
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1284,
							"character": 4
						}
					],
					"defaultValue": "\"LEARNING\""
				},
				{
					"id": 2080,
					"name": "MyLibrary",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "List of answers and Liveboards"
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1276,
							"character": 4
						}
					],
					"defaultValue": "\"MY_LIBRARY\""
				},
				{
					"id": 2077,
					"name": "Search",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Search bar"
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1264,
							"character": 4
						}
					],
					"defaultValue": "\"SEARCH\""
				},
				{
					"id": 2081,
					"name": "Trending",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Trending list"
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1280,
							"character": 4
						}
					],
					"defaultValue": "\"TRENDING\""
				},
				{
					"id": 2078,
					"name": "Watchlist",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "kPI watchlist module"
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1268,
							"character": 4
						}
					],
					"defaultValue": "\"WATCHLIST\""
				}
			],
			"groups": [
				{
					"title": "Enumeration members",
					"kind": 16,
					"children": [
						2079,
						2082,
						2080,
						2077,
						2081,
						2078
					]
				}
			],
			"sources": [
				{
					"fileName": "types.ts",
					"line": 1260,
					"character": 12
				}
			]
		},
		{
			"id": 1553,
			"name": "HostEvent",
			"kind": 4,
			"kindString": "Enumeration",
			"flags": {},
			"comment": {
				"shortText": "Event types that can be triggered by the host application\nto the embedded ThoughtSpot app.",
				"text": "To trigger an event use the corresponding\n{@link LiveboardEmbed.trigger} or {@link AppEmbed.trigger} or {@link\nSearchEmbed.trigger} method.",
				"tags": [
					{
						"tag": "example",
						"text": "\n```js\nimport { HostEvent } from '@thoughtspot/visual-embed-sdk';\n// Or\n// const { HostEvent } = window.tsembed;\n\n// create the liveboard embed.\n\nliveboardEmbed.trigger(HostEvent.UpdateRuntimeFilters, [\n  { columnName: 'state, operator: RuntimeFilterOp.EQ, values: ['california']}\n]);\n```"
					},
					{
						"tag": "example",
						"text": "\nIf using React components to embed, use the format shown in this example:\n\n```js\n const selectVizs = () => {\n     embedRef.current.trigger(HostEvent.SetVisibleVizs, [\n        \"715e4613-c891-4884-be44-aa8d13701c06\",\n        \"3f84d633-e325-44b2-be25-c6650e5a49cf\"\n     ]);\n   };\n```\n\n\nYou can also attach an Embed event to a Host event to trigger\na specific action as shown in this example:"
					},
					{
						"tag": "example",
						"text": "\n```js\n const EmbeddedComponent = () => {\n      const embedRef = useRef(null); // import { useRef } from react\n      const onLiveboardRendered = () => {\n         embedRef.current.trigger(HostEvent.SetVisibleVizs, ['viz1', 'viz2']);\n     };\n\n     return (\n         <LiveboardEmbed\n             ref={embedRef}\n             liveboardId=\"<liveboard-guid>\"\n             onLiveboardRendered={onLiveboardRendered}\n         />\n     );\n }\n```"
					},
					{
						"tag": "group",
						"text": "Events\n"
					}
				]
			},
			"children": [
				{
					"id": 1564,
					"name": "AddColumns",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Add columns to the current search query.",
						"tags": [
							{
								"tag": "param",
								"text": "",
								"param": "-"
							},
							{
								"tag": "example",
								"text": "\n```js\nsearchEmbed.trigger(HostEvent.AddColumns, { columnIds: ['<column-GUID>','<column-GUID>'] })\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.21.0 | ThoughtSpot: 9.2.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 2568,
							"character": 4
						}
					],
					"defaultValue": "\"addColumns\""
				},
				{
					"id": 1604,
					"name": "AskSage",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Trigger the *Ask Sage* action for visualizations",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nliveboardEmbed.trigger(HostEvent.AskSage,\n{vizId:'730496d6-6903-4601-937e-2c691821af3c'})\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.29.0 | ThoughtSpot Cloud: 9.12.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3193,
							"character": 4
						}
					],
					"defaultValue": "\"AskSage\""
				},
				{
					"id": 1581,
					"name": "CopyLink",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Trigger the **Copy link** action on a Liveboard or visualization",
						"tags": [
							{
								"tag": "param",
								"text": "object - to trigger the action for a\nspecific visualization in Liveboard embed, pass in `vizId` as a key",
								"param": "-"
							},
							{
								"tag": "example",
								"text": "\n```js\nliveboardEmbed.trigger(HostEvent.CopyLink)\n```\n```js\nliveboardEmbed.trigger(HostEvent.CopyLink, {vizId: '730496d6-6903-4601-937e-2c691821af3c'})\n```\n```js\nvizEmbed.trigger((HostEvent.CopyLink)\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.15.0 | ThoughtSpot: 8.7.0.cl, 8.8.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 2794,
							"character": 4
						}
					],
					"defaultValue": "\"embedDocument\""
				},
				{
					"id": 1578,
					"name": "CreateMonitor",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Trigger the **Create alert** action on a KPI chart\nin a Liveboard or saved Answer.",
						"tags": [
							{
								"tag": "param",
								"text": "an object with `vizId` as a key",
								"param": "-"
							},
							{
								"tag": "example",
								"text": "\n```js\nliveboardEmbed.trigger(HostEvent.CreateMonitor, {\n vizId: '730496d6-6903-4601-937e-2c691821af3c'\n})\n```"
							},
							{
								"tag": "example",
								"text": "\n```js\nsearchEmbed.trigger(HostEvent.CreateMonitor)\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.15.0 | ThoughtSpot: 8.7.0.cl, 8.8.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 2738,
							"character": 4
						}
					],
					"defaultValue": "\"createMonitor\""
				},
				{
					"id": 1585,
					"name": "Delete",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Trigger the **Delete** action for a visualization\nin an embedded Liveboard, or a chart or table\ngenerated from Search.",
						"tags": [
							{
								"tag": "param",
								"text": "Liveboard embed takes an object with `vizId` as a key.\nCan be left empty if embedding Search or visualization.",
								"param": "-"
							},
							{
								"tag": "example",
								"text": "\n```js\nliveboardEmbed.trigger(HostEvent.Delete, {vizId:\n'730496d6-6903-4601-937e-2c691821af3c'})\n```\n```js\nsearchEmbed.trigger(HostEvent.Delete)\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.19.0 | ThoughtSpot: 9.0.0.cl, 9.0.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 2861,
							"character": 4
						}
					],
					"defaultValue": "\"onDeleteAnswer\""
				},
				{
					"id": 1587,
					"name": "Download",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Trigger the **Download** action on charts in\nthe embedded view.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nliveboardEmbed.trigger(HostEvent.Download, {vizId:\n'730496d6-6903-4601-937e-2c691821af3c'})\n```\n```js\nembed.trigger(HostEvent.Download)\n```"
							},
							{
								"tag": "deprecated",
								"text": "from SDK: 1.21.0 | ThoughtSpot: 9.2.0.cl ,9.4.1.sw\nUse {@link DownloadAsPng}"
							},
							{
								"tag": "version",
								"text": "SDK: 1.19.0 | ThoughtSpot: 9.0.0.cl, 9.0.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 2897,
							"character": 4
						}
					],
					"defaultValue": "\"downloadAsPng\""
				},
				{
					"id": 1589,
					"name": "DownloadAsCsv",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Trigger the **Download** > **CSV**  action on tables in\nthe embedded view.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nliveboardEmbed.trigger(HostEvent.DownloadAsCsv, {vizId:\n'730496d6-6903-4601-937e-2c691821af3c'})\n```\n```js\nvizEmbed.trigger(HostEvent.DownloadAsCsv)\n```\n```js\nsearchEmbed.trigger(HostEvent.DownloadAsCsv)\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.19.0 | ThoughtSpot: 9.0.0.cl, 9.0.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 2929,
							"character": 4
						}
					],
					"defaultValue": "\"downloadAsCSV\""
				},
				{
					"id": 1574,
					"name": "DownloadAsPdf",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Trigger the **Download PDF** action on an embedded Liveboard,\nvisualization or Answer.",
						"text": "**NOTE**: The **Download** > **PDF** action is available on\nvisualizations and Answers if the data is in tabular format.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nliveboardEmbed.trigger(HostEvent.DownloadAsPdf)\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.15.0 | ThoughtSpot: 8.7.0.cl, 8.8.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 2679,
							"character": 4
						}
					],
					"defaultValue": "\"downloadAsPdf\""
				},
				{
					"id": 1588,
					"name": "DownloadAsPng",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Trigger the **Download** > **PNG** action on\ncharts in the embedded view.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nliveboardEmbed.trigger(HostEvent.DownloadAsPng,\n{vizId:'730496d6-6903-4601-937e-2c691821af3c'})\n\nvizEmbed.trigger(HostEvent.DownloadAsPng)\n\nsearchEmbed.trigger(HostEvent.DownloadAsPng)\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.21.0 | ThoughtSpot: 9.2.0.cl, 9.4.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 2912,
							"character": 4
						}
					],
					"defaultValue": "\"downloadAsPng\""
				},
				{
					"id": 1590,
					"name": "DownloadAsXlsx",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Trigger the **Download** > **XLSX**  action on tables\nin the embedded view.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nliveboardEmbed.trigger(HostEvent.DownloadAsXlsx, {vizId:\n'730496d6-6903-4601-937e-2c691821af3c'})\n```\n```js\nvizEmbed.trigger(HostEvent.DownloadAsXlsx)\n```\n```js\nsearchEmbed.trigger(HostEvent.DownloadAsXlsx)\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.19.0 | ThoughtSpot: 9.0.0.cl, 9.0.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 2946,
							"character": 4
						}
					],
					"defaultValue": "\"downloadAsXLSX\""
				},
				{
					"id": 1555,
					"name": "DrillDown",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Triggers a drill on certain points of the specified column\nIncludes the following properties:",
						"tags": [
							{
								"tag": "param",
								"text": "points - an object containing selectedPoints/clickedPoints\nto drill to. For example, { selectedPoints: []}",
								"param": "-"
							},
							{
								"tag": "param",
								"text": "columnGuid - Optional. GUID of the column to drill\nby. If not provided it will auto drill by the configured\n  column.",
								"param": "-"
							},
							{
								"tag": "param",
								"text": "autoDrillDown - Optional. If true, the drill down will be\ndone automatically on the most popular column.",
								"param": "-"
							},
							{
								"tag": "param",
								"text": "vizId [TS >= 9.8.0] - Optional. The GUID of the visualization to drill\nin case of a Liveboard.",
								"param": "-"
							},
							{
								"tag": "example",
								"text": "\n```js\nsearchEmbed.on(EmbedEvent.VizPointDoubleClick, (payload) => {\n      console.log(payload);\n      const clickedPoint = payload.data.clickedPoint;\n      const selectedPoint = payload.data.selectedPoints;\n      console.log('>>> called', clickedPoint);\n      searchEmbed.trigger(HostEvent.DrillDown, {\n            points: {\n                 clickedPoint,\n                 selectedPoints: selectedPoint\n            },\n            autoDrillDown: true,\n      });\n})\n```"
							},
							{
								"tag": "example",
								"text": "\n```js\n // Works with TS 9.8.0 and above\n\n liveboardEmbed.on(EmbedEvent.VizPointDoubleClick, (payload) => {\n   console.log(payload);\n   const clickedPoint = payload.data.clickedPoint;\n   const selectedPoint = payload.data.selectedPoints;\n   console.log('>>> called', clickedPoint);\n   liveboardEmbed.trigger(HostEvent.DrillDown, {\n     points: {\n       clickedPoint,\n       selectedPoints: selectedPoint\n     },\n     columnGuid: \"<guid of the column to drill>\",\n     vizId: payload.data.vizId\n   });\n })\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.5.0 | ThoughtSpot: ts7.oct.cl, 7.2.1\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 2444,
							"character": 4
						}
					],
					"defaultValue": "\"triggerDrillDown\""
				},
				{
					"id": 1580,
					"name": "Edit",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Trigger the **Edit** action on a Liveboard or a visualization\non a Liveboard.",
						"text": "This event is not supported in visualization embed and search embed.",
						"tags": [
							{
								"tag": "param",
								"text": "object - To trigger the action for a specific visualization\nin Liveboard embed, pass in `vizId` as a key.",
								"param": "-"
							},
							{
								"tag": "example",
								"text": "\n```js\nliveboardEmbed.trigger(HostEvent.Edit)\n```\n```js\nliveboardEmbed.trigger(HostEvent.Edit, {vizId:\n'730496d6-6903-4601-937e-2c691821af3c'})\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.15.0 | ThoughtSpot: 8.7.0.cl, 8.8.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 2777,
							"character": 4
						}
					],
					"defaultValue": "\"edit\""
				},
				{
					"id": 1572,
					"name": "EditTML",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Trigger the **Edit TML** action on an embedded Liveboard or\nsaved Answers in the full application embedding.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nliveboardEmbed.trigger(HostEvent.EditTML)\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.15.0 | ThoughtSpot: 8.7.0.cl, 8.8.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 2657,
							"character": 4
						}
					],
					"defaultValue": "\"editTSL\""
				},
				{
					"id": 1577,
					"name": "Explore",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Trigger the **Explore** action on a visualization.",
						"tags": [
							{
								"tag": "param",
								"text": "an object with `vizId` as a key",
								"param": "-"
							},
							{
								"tag": "example",
								"text": "\n```js\nliveboardEmbed.trigger(HostEvent.Explore, {vizId: '730496d6-6903-4601-937e-2c691821af3c'})\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.15.0 | ThoughtSpot: 8.7.0.cl, 8.8.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 2721,
							"character": 4
						}
					],
					"defaultValue": "\"explore\""
				},
				{
					"id": 1571,
					"name": "ExportTML",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Trigger the **Export TML** action on an embedded Liveboard or\nAnswer.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nliveboardEmbed.trigger(HostEvent.ExportTML)\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.15.0 | ThoughtSpot: 8.7.0.cl, 8.8.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 2647,
							"character": 4
						}
					],
					"defaultValue": "\"exportTSL\""
				},
				{
					"id": 1603,
					"name": "GetAnswerSession",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Get the answer session for a Search or\nLiveboard visualization.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nconst {session} = await embed.trigger(\n HostEvent.GetAnswerSession, {\n     vizId: '123', // For Liveboard Visualization.\n })\n```"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst {session} = await embed.trigger( HostEvent.GetAnswerSession )\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.26.0 | ThoughtSpot: 9.10.0.cl, 10.1.0.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3183,
							"character": 4
						}
					],
					"defaultValue": "\"getAnswerSession\""
				},
				{
					"id": 1597,
					"name": "GetFilters",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Get details of filters applied on the Liveboard.\nReturns arrays containing Liveboard filter and runtime filter elements.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nconst data = await liveboardEmbed.trigger(HostEvent.GetFilters);\n    console.log('data', data);\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.23.0 | ThoughtSpot: 9.4.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3042,
							"character": 4
						}
					],
					"defaultValue": "\"getFilters\""
				},
				{
					"id": 1558,
					"name": "GetIframeUrl",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Get iframe URL for the current embed view on the playground.\nDevelopers can use this URL to embed a ThoughtSpot object\nin apps like Salesforce or Sharepoint.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nconst url = embed.trigger(HostEvent.GetIframeUrl);\nconsole.log(\"iFrameURL\",url);\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.35.0 | ThoughtSpot: 10.4.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 2466,
							"character": 4
						}
					],
					"defaultValue": "\"GetIframeUrl\""
				},
				{
					"id": 1608,
					"name": "GetParameters",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Triggers GetParameters to fetch the runtime Parameters.\n```js\nliveboardEmbed.trigger(HostEvent.GetParameters).then((parameter) => {\n console.log('parameters', parameter);\n});\n```",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.29.0 | ThoughtSpot: 10.1.0.cl, 10.1.0.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3242,
							"character": 4
						}
					],
					"defaultValue": "\"GetParameters\""
				},
				{
					"id": 1583,
					"name": "GetTML",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Get TML for the current search.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nsearchEmbed.trigger(HostEvent.GetTML).then((tml) => {\n  console.log(\n     tml.answer.search_query // TML representation of the search query\n  );\n})\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.18.0 | ThoughtSpot: 8.10.0.cl, 9.0.1.sw"
							},
							{
								"tag": "important",
								"text": "\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 2825,
							"character": 4
						}
					],
					"defaultValue": "\"getTML\""
				},
				{
					"id": 1599,
					"name": "GetTabs",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Get tab details for the current Liveboard.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nliveboardEmbed.trigger(HostEvent.GetTabs).then((tabDetails) => {\n  console.log(\n     tabDetails // TabDetails of current LB\n  );\n})\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.26.0 | ThoughtSpot: 9.7.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3126,
							"character": 4
						}
					],
					"defaultValue": "\"getTabs\""
				},
				{
					"id": 1568,
					"name": "LiveboardInfo",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Trigger the **Show Liveboard details** action\non an embedded Liveboard.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nliveboardEmbed.trigger(HostEvent.LiveboardInfo)\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.15.0 | ThoughtSpot: 8.7.0.cl, 8.8.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 2619,
							"character": 4
						}
					],
					"defaultValue": "\"pinboardInfo\""
				},
				{
					"id": 1575,
					"name": "MakeACopy",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Trigger the **Make a copy** action on a Liveboard,\nvisualization, or Answer page.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nliveboardEmbed.trigger(HostEvent.MakeACopy)\n```"
							},
							{
								"tag": "example",
								"text": "\n```js\nliveboardEmbed.trigger(HostEvent.MakeACopy, {\nvizId: '730496d6-6903-4601-937e-2c691821af3c'})\n```"
							},
							{
								"tag": "example",
								"text": "\n```js\nvizEmbed.trigger(HostEvent.MakeACopy)\n```"
							},
							{
								"tag": "example",
								"text": "\n```js\nsearchEmbed.trigger(HostEvent.MakeACopy)\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.15.0 | ThoughtSpot: 8.7.0.cl, 8.8.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 2702,
							"character": 4
						}
					],
					"defaultValue": "\"makeACopy\""
				},
				{
					"id": 1579,
					"name": "ManageMonitor",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Trigger the **Manage alerts** action on a KPI chart\nin a visualization or saved Answer.",
						"tags": [
							{
								"tag": "param",
								"text": "an object with `vizId` as a key",
								"param": "-"
							},
							{
								"tag": "example",
								"text": "\n```js\nliveboardEmbed.trigger(HostEvent.ManageMonitor, {\n vizId: '730496d6-6903-4601-937e-2c691821af3c'\n})\n```"
							},
							{
								"tag": "example",
								"text": "\n```js\nsearchEmbed.trigger(HostEvent.ManageMonitor)\n```"
							},
							{
								"tag": "example",
								"text": "\n```js\nvizEmbed.trigger(HostEvent.ManageMonitor)\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.15.0 | ThoughtSpot: 8.7.0.cl, 8.8.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 2759,
							"character": 4
						}
					],
					"defaultValue": "\"manageMonitor\""
				},
				{
					"id": 1595,
					"name": "ManagePipelines",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Trigger the **Manage pipelines** action on an embedded\nvisualization or Answer.\nAllows users to manage ThoughtSpot Sync pipelines.",
						"tags": [
							{
								"tag": "param",
								"text": "an object with `vizId` as a key",
								"param": "-"
							},
							{
								"tag": "example",
								"text": "\n```js\nliveboardEmbed.trigger(HostEvent.ManagePipelines, {vizId:\n'730496d6-6903-4601-937e-2c691821af3c'})\n```\n```js\nvizEmbed.trigger(HostEvent.ManagePipelines)\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.19.0 | ThoughtSpot: 9.0.0.cl, 9.0.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3019,
							"character": 4
						}
					],
					"defaultValue": "\"manage-pipeline\""
				},
				{
					"id": 1562,
					"name": "Navigate",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Navigate to a specific page in the embedded ThoughtSpot application.\nThis is the same as calling `appEmbed.navigateToPage(path, true)`.",
						"tags": [
							{
								"tag": "param",
								"text": "`path` - the path to navigate to to go forward or back. The path value can\nbe a number; for example, `1`, `-1`.",
								"param": "-"
							},
							{
								"tag": "example",
								"text": "\n```js\nappEmbed.navigateToPage(-1)\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.12.0 | ThoughtSpot 8.4.0.cl, 8.4.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 2541,
							"character": 4
						}
					],
					"defaultValue": "\"Navigate\""
				},
				{
					"id": 1563,
					"name": "OpenFilter",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Open the filter panel for a particular column.\nWorks with Search and Liveboard embed.",
						"tags": [
							{
								"tag": "param",
								"text": "{ columnId: string,\n name: string,\n type: INT64/CHAR/DATE,\n dataType: ATTRIBUTE/MEASURE }",
								"param": "-"
							},
							{
								"tag": "example",
								"text": "\n```js\nsearchEmbed.trigger(HostEvent.OpenFilter,\n{ columnId: '<column-GUID>', name: 'column name', type: 'INT64', dataType: 'ATTRIBUTE'})\nLiveboardEmbed.trigger(HostEvent.OpenFilter,\n { columnId: '<column-GUID>'})\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.21.0 | ThoughtSpot: 9.2.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 2558,
							"character": 4
						}
					],
					"defaultValue": "\"openFilter\""
				},
				{
					"id": 1567,
					"name": "Pin",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Trigger the **Pin** action on an embedded object",
						"tags": [
							{
								"tag": "param",
								"text": "Liveboard embed takes the `vizId` as a\nkey. Can be left undefined when embedding Search, full app, or\na visualization.",
								"param": "-"
							},
							{
								"tag": "example",
								"text": "\n```js\nappEmbed.trigger(HostEvent.Pin)\n```\n```js\nsearchEmbed.trigger(HostEvent.Pin)\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.15.0 | ThoughtSpot: 8.7.0.cl, 8.8.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 2609,
							"character": 4
						}
					],
					"defaultValue": "\"pin\""
				},
				{
					"id": 1582,
					"name": "Present",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Trigger the **Present** action on a Liveboard or visualization",
						"tags": [
							{
								"tag": "param",
								"text": "object - to trigger the action for a specific visualization\n in Liveboard embed, pass in `vizId` as a key",
								"param": "-"
							},
							{
								"tag": "example",
								"text": "\n```js\nliveboardEmbed.trigger(HostEvent.Present)\n```\n```js\nliveboardEmbed.trigger(HostEvent.Present, {vizId: '730496d6-6903-4601-937e-2c691821af3c'})\n```\n```js\nvizEmbed.trigger((HostEvent.Present)\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.15.0 | ThoughtSpot: 8.7.0.cl, 8.8.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 2811,
							"character": 4
						}
					],
					"defaultValue": "\"present\""
				},
				{
					"id": 1576,
					"name": "Remove",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Trigger the **Delete** action for a Liveboard.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nappEmbed.trigger(HostEvent.Remove)\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.15.0 | ThoughtSpot: 8.7.0.cl, 8.8.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 2711,
							"character": 4
						}
					],
					"defaultValue": "\"delete\""
				},
				{
					"id": 1565,
					"name": "RemoveColumn",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Remove a column from the current search query.",
						"tags": [
							{
								"tag": "param",
								"text": "",
								"param": "-"
							},
							{
								"tag": "example",
								"text": "\n```js\nsearchEmbed.trigger(HostEvent.RemoveColumn, { columnId: '<column-Guid>' })\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.21.0 | ThoughtSpot: 9.2.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 2578,
							"character": 4
						}
					],
					"defaultValue": "\"removeColumn\""
				},
				{
					"id": 1606,
					"name": "ResetLiveboardPersonalisedView",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Trigger reset action for a personalized Liveboard view.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nliveboardEmbed.trigger(HostEvent.ResetLiveboardPersonalisedView);\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.29.0 | ThoughtSpot Cloud: 10.1.0.cl, 10.1.0.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3218,
							"character": 4
						}
					],
					"defaultValue": "\"ResetLiveboardPersonalisedView\""
				},
				{
					"id": 1596,
					"name": "ResetSearch",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Reset search operation on the Search or Answer page.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nsearchEmbed.trigger(HostEvent.ResetSearch)\n```\n```js\nappEmbed.trigger(HostEvent.ResetSearch)\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.21.0 | ThoughtSpot: 9.2.0.cl, 9.0.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3031,
							"character": 4
						}
					],
					"defaultValue": "\"resetSearch\""
				},
				{
					"id": 1592,
					"name": "Save",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Trigger the **Save**  action on a Liveboard or Answer.\nSaves the changes.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nliveboardEmbed.trigger(HostEvent.Save)\n```\n```js\nsearchEmbed.trigger(HostEvent.Save)\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.19.0 | ThoughtSpot: 9.0.0.cl, 9.0.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 2972,
							"character": 4
						}
					],
					"defaultValue": "\"save\""
				},
				{
					"id": 1610,
					"name": "SaveAnswer",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Triggers the action to get the current view of the Liveboard.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.36.0 | ThoughtSpot: 10.6.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3255,
							"character": 4
						}
					],
					"defaultValue": "\"saveAnswer\""
				},
				{
					"id": 1569,
					"name": "Schedule",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Trigger the **Schedule** action on an embedded Liveboard.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\n liveboardEmbed.trigger(HostEvent.Schedule)\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.15.0 | ThoughtSpot: 8.7.0.cl, 8.8.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 2628,
							"character": 4
						}
					],
					"defaultValue": "\"subscription\""
				},
				{
					"id": 1570,
					"name": "SchedulesList",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Trigger the **Manage schedule** action on an embedded Liveboard",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\n liveboardEmbed.trigger(HostEvent.ScheduleList)\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.15.0 | ThoughtSpot: 8.7.0.cl, 8.8.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 2637,
							"character": 4
						}
					],
					"defaultValue": "\"schedule-list\""
				},
				{
					"id": 1554,
					"name": "Search",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Triggers a search operation with the search tokens specified in\nthe search query string.\nSupported in `AppEmbed` and `SearchEmbed` deployments.\nIncludes the following properties:",
						"tags": [
							{
								"tag": "param",
								"text": "`searchQuery` - query string with search tokens",
								"param": "-"
							},
							{
								"tag": "param",
								"text": "`dataSources` - Data source GUID to Search on\n                       - Although an array, only a single source\n                         is supported.",
								"param": "-"
							},
							{
								"tag": "param",
								"text": "`execute` - executes search and updates the existing query",
								"param": "-"
							},
							{
								"tag": "example",
								"text": "\n```js\nsearchembed.trigger(HostEvent.Search, {\nsearchQuery: \"[sales] by [item type]\",\ndataSources: [\"cd252e5c-b552-49a8-821d-3eadaa049cca\"],\nexecute: true\n});\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 2394,
							"character": 4
						}
					],
					"defaultValue": "\"search\""
				},
				{
					"id": 1560,
					"name": "SetActiveTab",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Set a Liveboard tab as an active tab.",
						"tags": [
							{
								"tag": "param",
								"text": "tabId - string of id of Tab to show",
								"param": "-"
							},
							{
								"tag": "example",
								"text": "\n```js\nliveboardEmbed.trigger(HostEvent.SetActiveTab,{\n tabId:'730496d6-6903-4601-937e-2c691821af3c'\n})\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.24.0 | ThoughtSpot: 9.5.0.cl, 9.5.1-sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 2491,
							"character": 4
						}
					],
					"defaultValue": "\"SetActiveTab\""
				},
				{
					"id": 1601,
					"name": "SetHiddenTabs",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Set the hidden tabs on a Liveboard.",
						"tags": [
							{
								"tag": "param",
								"text": "an array of the IDs of the tabs to hide.\nThe IDs not passed will be shown.",
								"param": "-"
							},
							{
								"tag": "example",
								"text": "\n```js\nliveboardEmbed.trigger(HostEvent.SetHiddenTabs, [\n '630496d6-6903-4601-937e-2c691821af3c',\n 'i547ec54-2a37-4516-a222-2b06719af726'])\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.26.0 | ThoughtSpot: 9.7.0.cl, 9.8.0.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3152,
							"character": 4
						}
					],
					"defaultValue": "\"SetPinboardHiddenTabs\""
				},
				{
					"id": 1600,
					"name": "SetVisibleTabs",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Set the visible tabs on a Liveboard.",
						"tags": [
							{
								"tag": "param",
								"text": "an array of ids of tabs to show, the IDs not passed\n         will be hidden.",
								"param": "-"
							},
							{
								"tag": "example",
								"text": "\n```js\nliveboardEmbed.trigger(HostEvent.SetVisibleTabs, [\n '430496d6-6903-4601-937e-2c691821af3c',\n 'f547ec54-2a37-4516-a222-2b06719af726'])\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.26.0 | ThoughtSpot: 9.7.0.cl, 9.8.0.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3139,
							"character": 4
						}
					],
					"defaultValue": "\"SetPinboardVisibleTabs\""
				},
				{
					"id": 1559,
					"name": "SetVisibleVizs",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Display specific visualizations on a Liveboard.",
						"tags": [
							{
								"tag": "param",
								"text": "An array of GUIDs of the visualization to show. The visualization IDs not passed\n in this parameter will be hidden.",
								"param": "-"
							},
							{
								"tag": "example",
								"text": "\n```js\nliveboardEmbed.trigger(HostEvent.SetVisibleVizs, [\n '730496d6-6903-4601-937e-2c691821af3c',\n 'd547ec54-2a37-4516-a222-2b06719af726'])\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.6.0 | ThoughtSpot: ts8.nov.cl, 8.4.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 2479,
							"character": 4
						}
					],
					"defaultValue": "\"SetPinboardVisibleVizs\""
				},
				{
					"id": 1591,
					"name": "Share",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Trigger the **Share** action on an embedded\nLiveboard or Answer.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nliveboardEmbed.trigger(HostEvent.Share)\n```\n```js\nsearchEmbed.trigger(HostEvent.Share)\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.19.0 | ThoughtSpot: 9.0.0.cl, 9.0.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 2959,
							"character": 4
						}
					],
					"defaultValue": "\"share\""
				},
				{
					"id": 1584,
					"name": "ShowUnderlyingData",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Trigger the **Show underlying data** action on a\nchart or table.",
						"tags": [
							{
								"tag": "param",
								"text": "an object with vizId as a key",
								"param": "-"
							},
							{
								"tag": "example",
								"text": "\n```js\nliveboardEmbed.trigger(HostEvent.ShowUnderlyingData, {vizId:\n'730496d6-6903-4601-937e-2c691821af3c'})\n```\n```js\nvizEmbed.trigger(HostEvent.ShowUnderlyingData)\n```\n```js\nsearchEmbed.trigger(HostEvent.ShowUnderlyingData)\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.19.0 | ThoughtSpot: 9.0.0.cl, 9.0.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 2844,
							"character": 4
						}
					],
					"defaultValue": "\"showUnderlyingData\""
				},
				{
					"id": 1586,
					"name": "SpotIQAnalyze",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Trigger the **SpotIQ analyze** action on a\nchart or table.",
						"tags": [
							{
								"tag": "param",
								"text": "Liveboard embed takes `vizId` as a\nkey. Can be left undefined when embedding Search or\nvisualization.",
								"param": "-"
							},
							{
								"tag": "example",
								"text": "\n```js\nliveboardEmbed.trigger(HostEvent.SpotIQAnalyze, {vizId:\n'730496d6-6903-4601-937e-2c691821af3c'})\n```\n```js\nvizEmbed.trigger(HostEvent.SpotIQAnalyze)\n```\n```js\nsearchEmbed.trigger(HostEvent.SpotIQAnalyze)\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.19.0 | ThoughtSpot: 9.0.0.cl, 9.0.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 2881,
							"character": 4
						}
					],
					"defaultValue": "\"spotIQAnalyze\""
				},
				{
					"id": 1594,
					"name": "SyncToOtherApps",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Trigger the **Sync to Other Apps** action on an embedded visualization or Answer\nSends data from an Answer or Liveboard visualization to third-party apps such\nas Slack, Salesforce, Microsoft Teams, ServiceNow and so on.",
						"tags": [
							{
								"tag": "param",
								"text": "an object with vizId as a key",
								"param": "-"
							},
							{
								"tag": "example",
								"text": "\n```js\nliveboardEmbed.trigger(HostEvent.SyncToOtherApps, {vizId:\n'730496d6-6903-4601-937e-2c691821af3c'})\n```\n```js\nvizEmbed.trigger(HostEvent.SyncToOtherApps)\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.19.0 | ThoughtSpot: 9.0.0.cl, 9.0.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3003,
							"character": 4
						}
					],
					"defaultValue": "\"sync-to-other-apps\""
				},
				{
					"id": 1593,
					"name": "SyncToSheets",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Trigger the **Sync to Sheets** action on an embedded visualization or Answer\nSends data from an Answer or Liveboard visualization to a Google sheet.",
						"tags": [
							{
								"tag": "param",
								"text": "an object with `vizId` as a key",
								"param": "-"
							},
							{
								"tag": "example",
								"text": "\n```js\nliveboardEmbed.trigger(HostEvent.SyncToSheets, {vizId:\n'730496d6-6903-4601-937e-2c691821af3c'})\n```\n```js\nvizEmbed.trigger(HostEvent.SyncToSheets)\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.19.0 | ThoughtSpot: 9.0.0.cl, 9.0.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 2987,
							"character": 4
						}
					],
					"defaultValue": "\"sync-to-sheets\""
				},
				{
					"id": 1612,
					"name": "TransformTableVizData",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Triggers the table viz rerender with the updated data.\nIncludes the following properties:",
						"tags": [
							{
								"tag": "param",
								"text": "columnDataLite - an array of object containing data\ntransformed from data picked from TableVizRendered event.\nFor example, { columnDataLite: []}",
								"param": "-"
							},
							{
								"tag": "example",
								"text": "\n```js\nsearchEmbed.on(EmbedEvent.TableVizRendered, (payload) => {\n      console.log(payload);\n      const columnDataLite = payload.data.data.columnDataLite;\n      columnDataLite[0].dataValue[0]=\"new fob\";\n      console.log('>>> new Data', columnDataLite);\n      searchEmbed.trigger(HostEvent.TransformTableVizData, columnDataLite);\n})\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.35.12 | ThoughtSpot: 10.7.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3279,
							"character": 4
						}
					],
					"defaultValue": "\"TransformTableVizData\""
				},
				{
					"id": 1605,
					"name": "UpdateCrossFilter",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Trigger cross filter update action on a Liveboard.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nliveboardEmbed.trigger(HostEvent.UpdateCrossFilter, {\n     vizId: 'b535c760-8bbe-4e6f-bb26-af56b4129a1e',\n     conditions: [\n     { columnName: 'Category', values: ['mfgr#12','mfgr#14'] },\n     { columnName: 'color', values: ['mint','hot'] },\n   ],\n});\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.29.0 | ThoughtSpot Cloud: 10.0.0.cl, 10.1.0.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3209,
							"character": 4
						}
					],
					"defaultValue": "\"UpdateCrossFilter\""
				},
				{
					"id": 1598,
					"name": "UpdateFilters",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Update one or several filters applied on a Liveboard.",
						"tags": [
							{
								"tag": "param",
								"text": "`filter`: a single filter object containing column name,\nfilter operator, and values.",
								"param": "-"
							},
							{
								"tag": "param",
								"text": "`filters`: multiple filter objects with column name, filter operator,\nand values for each.\n\nEach filter object must include the following attributes:\n\n`column` - Name of the column to filter on.\n\n`oper`  - Filter operator, for example, EQ, IN, CONTAINS.\n For information about the supported filter operators,\n see link:https://developers.thoughtspot.com/docs/runtime-filters#rtOperator[Developer Documentation].\n\n`values` - An array of one or several values. The value definition on the\n data type you choose to filter on. For a complete list of supported data types,\n see\n link:https://developers.thoughtspot.com/docs/runtime-filters#_supported_data_types[Supported\n data types].\n\n`type`  - To update filters for date time, specify the date format type.\nFor more information and examples, see link:https://developers.thoughtspot.com/docs/embed-liveboard#_date_filters[Date filters].",
								"param": "-"
							},
							{
								"tag": "example",
								"text": "\n```js\n\nliveboardEmbed.trigger(HostEvent.UpdateFilters, {\n    filter: {\n        column: \"item type\",\n        oper: \"IN\",\n        values: [\"bags\",\"shirts\"]\n       }\n   });\n```"
							},
							{
								"tag": "example",
								"text": "\n```js\n\nliveboardEmbed.trigger(HostEvent.UpdateFilters, {\n    filter: {\n        column: \"date\",\n        oper: \"EQ\",\n        values: [\"JULY\",\"2023\"],\n        type: \"MONTH_YEAR\"\n       }\n   });\n```"
							},
							{
								"tag": "example",
								"text": "\n\n```js\nliveboardEmbed.trigger(HostEvent.UpdateFilters, {\n filters: [{\n     column: \"Item Type\",\n     oper: 'IN',\n     values: [\"bags\",\"shirts\"]\n },\n   {\n     column: \"Region\",\n     oper: 'IN',\n     values: [\"West\",\"Midwest\"]\n },\n   {\n     column: \"Date\",\n     oper: 'EQ',\n     values: [\"2023-07-31\"],\n     types: \"EXACT_DATE\"\n   }]\n});\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.23.0 | ThoughtSpot: 9.4.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3113,
							"character": 4
						}
					],
					"defaultValue": "\"updateFilters\""
				},
				{
					"id": 1607,
					"name": "UpdateParameters",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Triggers an action to update Parameter values on embedded\nAnswers and Liveboard.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nliveboardEmbed.trigger(HostEvent.UpdateParameters, [{\nname: \"Color\",\nvalue: \"almond\"\n}])\n\n@version SDK: 1.29.0 | ThoughtSpot: 10.1.0.cl, 10.1.0.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3232,
							"character": 4
						}
					],
					"defaultValue": "\"UpdateParameters\""
				},
				{
					"id": 1609,
					"name": "UpdatePersonalisedView",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Triggers an event to update a personalized view of a Liveboard.\n```js\nliveboardEmbed.trigger(HostEvent.UpdatePersonalisedView, {viewId: '1234'})\n```",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.36.0 | ThoughtSpot: 10.6.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3250,
							"character": 4
						}
					],
					"defaultValue": "\"UpdatePersonalisedView\""
				},
				{
					"id": 1561,
					"name": "UpdateRuntimeFilters",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Updates the runtime filters applied on a Liveboard. The filter\nattributes passed with this event are appended to the existing runtime\nfilters applied on a Liveboard.",
						"text": "**Note**: `HostEvent.UpdateRuntimeFilters` is supported in `LiveboardEmbed`\nand `AppEmbed` only. In full application embedding, this event updates\nthe runtime filters applied on the Liveboard and saved Answer objects.\n\n\nPass an array of runtime filters with the following attributes:\n\n`columnName` - _String_. The name of the column to filter on.\n\n`operator` - Runtime filter operator to apply. For more information,\nsee link:https://developers.thoughtspot.com/docs/?pageid=runtime-filters#rtOperator[Developer Documentation].\n\n`values` - List of operands. Some operators such as EQ and LE allow a\nsingle value, whereas BW and IN accept multiple values.\n\n**Note**: Updating runtime filters resets the ThoughtSpot\nobject to its original state and applies new filter conditions.\nAny user changes (like drilling into a visualization)\nwill be cleared, restoring the original visualization\nwith the updated filters.\n",
						"tags": [
							{
								"tag": "param",
								"text": "{@link RuntimeFilter}[] an array of {@link RuntimeFilter} Types.",
								"param": "-"
							},
							{
								"tag": "example",
								"text": "\n```js\nliveboardEmbed.trigger(HostEvent.UpdateRuntimeFilters, [\n  {columnName: \"state\",operator: RuntimeFilterOp.EQ,values: [\"michigan\"]},\n  {columnName: \"item type\",operator: RuntimeFilterOp.EQ,values: [\"Jackets\"]}\n])\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.9.0 | ThoughtSpot: 8.1.0.cl, 8.4.1.sw"
							},
							{
								"tag": "important",
								"text": "\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 2529,
							"character": 4
						}
					],
					"defaultValue": "\"UpdateRuntimeFilters\""
				},
				{
					"id": 1602,
					"name": "UpdateSageQuery",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Updates the search query string for Natural Language Search operations.",
						"tags": [
							{
								"tag": "param",
								"text": "`queryString`: Text string in Natural Language format",
								"param": "-"
							},
							{
								"tag": "param",
								"text": "`executeSearch`: Boolean to execute search and update search query",
								"param": "-"
							},
							{
								"tag": "example",
								"text": "\n```js\nsageEmbed.trigger(HostEvent.UpdateSageQuery, {\n queryString: 'revenue per year',\n executeSearch: true,\n})\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.26.0 | ThoughtSpot: 9.8.0.cl, 9.8.0.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3166,
							"character": 4
						}
					],
					"defaultValue": "\"updateSageQuery\""
				},
				{
					"id": 1573,
					"name": "UpdateTML",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Trigger the **Update TML** action on an embedded Liveboard.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nliveboardEmbed.trigger(HostEvent.UpdateTML)\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.15.0 | ThoughtSpot: 8.7.0.cl, 8.8.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 2666,
							"character": 4
						}
					],
					"defaultValue": "\"updateTSL\""
				},
				{
					"id": 1566,
					"name": "getExportRequestForCurrentPinboard",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Get the transient state of a Liveboard as encoded content.\nThis includes unsaved and ad hoc changes such as\nLiveboard filters, runtime filters applied on visualizations on a\nLiveboard, and Liveboard layout, changes to visualizations such as\nsorting, toggling of legends, and data drill down.\nFor more information, see\nlink:https://developers.thoughtspot.com/docs/fetch-data-and-report-apis#transient-lb-content[Liveboard data with unsaved changes].",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nliveboardEmbed.trigger(HostEvent.getExportRequestForCurrentPinboard).then(\ndata=>console.log(data))\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.13.0 | ThoughtSpot: 8.5.0.cl, 8.8.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 2594,
							"character": 4
						}
					],
					"defaultValue": "\"getExportRequestForCurrentPinboard\""
				}
			],
			"groups": [
				{
					"title": "Enumeration members",
					"kind": 16,
					"children": [
						1564,
						1604,
						1581,
						1578,
						1585,
						1587,
						1589,
						1574,
						1588,
						1590,
						1555,
						1580,
						1572,
						1577,
						1571,
						1603,
						1597,
						1558,
						1608,
						1583,
						1599,
						1568,
						1575,
						1579,
						1595,
						1562,
						1563,
						1567,
						1582,
						1576,
						1565,
						1606,
						1596,
						1592,
						1610,
						1569,
						1570,
						1554,
						1560,
						1601,
						1600,
						1559,
						1591,
						1584,
						1586,
						1594,
						1593,
						1612,
						1605,
						1598,
						1607,
						1609,
						1561,
						1602,
						1573,
						1566
					]
				}
			],
			"sources": [
				{
					"fileName": "types.ts",
					"line": 2374,
					"character": 12
				}
			]
		},
		{
			"id": 2214,
			"name": "LogLevel",
			"kind": 4,
			"kindString": "Enumeration",
			"flags": {},
			"comment": {
				"shortText": "Enum options to show or suppress Visual Embed SDK and\nThoughtSpot application logs in the console output.\nThis attribute doesn't support suppressing\nbrowser warnings or errors."
			},
			"children": [
				{
					"id": 2219,
					"name": "DEBUG",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Log debug messages, warnings, information alerts,\nand errors in the console output.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ninit({\n  ... // other options,\n logLevel: LogLevel.DEBUG,\n})\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.26.7 | ThoughtSpot Cloud: 9.10.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4756,
							"character": 4
						}
					],
					"defaultValue": "\"DEBUG\""
				},
				{
					"id": 2216,
					"name": "ERROR",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Log only errors in the console output.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ninit({\n  ... // other options,\n logLevel: LogLevel.ERROR,\n})\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.26.7 | ThoughtSpot Cloud: 9.10.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4717,
							"character": 4
						}
					],
					"defaultValue": "\"ERROR\""
				},
				{
					"id": 2218,
					"name": "INFO",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Log only the information alerts, warnings, and errors\nin the console output.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ninit({\n  ... // other options,\n logLevel: LogLevel.INFO,\n})\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.26.7 | ThoughtSpot Cloud: 9.10.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4742,
							"character": 4
						}
					],
					"defaultValue": "\"INFO\""
				},
				{
					"id": 2215,
					"name": "SILENT",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "No application or SDK-related logs will be logged\nin the console output.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ninit({\n  ... // other options,\n logLevel: LogLevel.SILENT,\n})\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.26.7 | ThoughtSpot Cloud: 9.10.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4705,
							"character": 4
						}
					],
					"defaultValue": "\"SILENT\""
				},
				{
					"id": 2220,
					"name": "TRACE",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "All logs will be logged in the browser console.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ninit({\n  ... // other options,\n logLevel: LogLevel.TRACE,\n})\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.26.7 | ThoughtSpot Cloud: 9.10.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4768,
							"character": 4
						}
					],
					"defaultValue": "\"TRACE\""
				},
				{
					"id": 2217,
					"name": "WARN",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Log only warnings and errors in the console output.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ninit({\n  ... // other options,\n logLevel: LogLevel.WARN,\n})\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.26.7 | ThoughtSpot Cloud: 9.10.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4729,
							"character": 4
						}
					],
					"defaultValue": "\"WARN\""
				}
			],
			"groups": [
				{
					"title": "Enumeration members",
					"kind": 16,
					"children": [
						2219,
						2216,
						2218,
						2215,
						2220,
						2217
					]
				}
			],
			"sources": [
				{
					"fileName": "types.ts",
					"line": 4692,
					"character": 12
				}
			]
		},
		{
			"id": 1434,
			"name": "Page",
			"kind": 4,
			"kindString": "Enumeration",
			"flags": {},
			"comment": {
				"shortText": "Pages within the ThoughtSpot app that can be embedded."
			},
			"children": [
				{
					"id": 1437,
					"name": "Answers",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Saved answers listing page"
					},
					"sources": [
						{
							"fileName": "embed/app.ts",
							"line": 39,
							"character": 4
						}
					],
					"defaultValue": "\"answers\""
				},
				{
					"id": 1440,
					"name": "Data",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Data management page"
					},
					"sources": [
						{
							"fileName": "embed/app.ts",
							"line": 51,
							"character": 4
						}
					],
					"defaultValue": "\"data\""
				},
				{
					"id": 1435,
					"name": "Home",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Home page"
					},
					"sources": [
						{
							"fileName": "embed/app.ts",
							"line": 31,
							"character": 4
						}
					],
					"defaultValue": "\"home\""
				},
				{
					"id": 1438,
					"name": "Liveboards",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Liveboards listing page"
					},
					"sources": [
						{
							"fileName": "embed/app.ts",
							"line": 43,
							"character": 4
						}
					],
					"defaultValue": "\"liveboards\""
				},
				{
					"id": 1442,
					"name": "Monitor",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": " Monitor Alerts Page"
					},
					"sources": [
						{
							"fileName": "embed/app.ts",
							"line": 59,
							"character": 4
						}
					],
					"defaultValue": "\"monitor\""
				},
				{
					"id": 1436,
					"name": "Search",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Search page"
					},
					"sources": [
						{
							"fileName": "embed/app.ts",
							"line": 35,
							"character": 4
						}
					],
					"defaultValue": "\"search\""
				},
				{
					"id": 1441,
					"name": "SpotIQ",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "SpotIQ listing page"
					},
					"sources": [
						{
							"fileName": "embed/app.ts",
							"line": 55,
							"character": 4
						}
					],
					"defaultValue": "\"insights\""
				}
			],
			"groups": [
				{
					"title": "Enumeration members",
					"kind": 16,
					"children": [
						1437,
						1440,
						1435,
						1438,
						1442,
						1436,
						1441
					]
				}
			],
			"sources": [
				{
					"fileName": "embed/app.ts",
					"line": 27,
					"character": 12
				}
			]
		},
		{
			"id": 2057,
			"name": "PrefetchFeatures",
			"kind": 4,
			"kindString": "Enumeration",
			"flags": {},
			"children": [
				{
					"id": 2058,
					"name": "FullApp",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4621,
							"character": 4
						}
					],
					"defaultValue": "\"FullApp\""
				},
				{
					"id": 2060,
					"name": "LiveboardEmbed",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4623,
							"character": 4
						}
					],
					"defaultValue": "\"LiveboardEmbed\""
				},
				{
					"id": 2059,
					"name": "SearchEmbed",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4622,
							"character": 4
						}
					],
					"defaultValue": "\"SearchEmbed\""
				},
				{
					"id": 2061,
					"name": "VizEmbed",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4624,
							"character": 4
						}
					],
					"defaultValue": "\"VizEmbed\""
				}
			],
			"groups": [
				{
					"title": "Enumeration members",
					"kind": 16,
					"children": [
						2058,
						2060,
						2059,
						2061
					]
				}
			],
			"sources": [
				{
					"fileName": "types.ts",
					"line": 4620,
					"character": 12
				}
			]
		},
		{
			"id": 1459,
			"name": "RuntimeFilterOp",
			"kind": 4,
			"kindString": "Enumeration",
			"flags": {},
			"comment": {
				"shortText": "A map of the supported runtime filter operations"
			},
			"children": [
				{
					"id": 1467,
					"name": "BEGINS_WITH",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Begins with"
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1221,
							"character": 4
						}
					],
					"defaultValue": "\"BEGINS_WITH\""
				},
				{
					"id": 1472,
					"name": "BW",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Between, non-inclusive"
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1241,
							"character": 4
						}
					],
					"defaultValue": "\"BW\""
				},
				{
					"id": 1471,
					"name": "BW_INC",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Between, inclusive of both higher and lower value"
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1237,
							"character": 4
						}
					],
					"defaultValue": "\"BW_INC\""
				},
				{
					"id": 1469,
					"name": "BW_INC_MAX",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Between, inclusive of higher value"
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1229,
							"character": 4
						}
					],
					"defaultValue": "\"BW_INC_MAX\""
				},
				{
					"id": 1470,
					"name": "BW_INC_MIN",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Between, inclusive of lower value"
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1233,
							"character": 4
						}
					],
					"defaultValue": "\"BW_INC_MIN\""
				},
				{
					"id": 1466,
					"name": "CONTAINS",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Contains"
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1217,
							"character": 4
						}
					],
					"defaultValue": "\"CONTAINS\""
				},
				{
					"id": 1468,
					"name": "ENDS_WITH",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Ends with"
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1225,
							"character": 4
						}
					],
					"defaultValue": "\"ENDS_WITH\""
				},
				{
					"id": 1460,
					"name": "EQ",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Equals"
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1193,
							"character": 4
						}
					],
					"defaultValue": "\"EQ\""
				},
				{
					"id": 1465,
					"name": "GE",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Greater than or equal to"
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1213,
							"character": 4
						}
					],
					"defaultValue": "\"GE\""
				},
				{
					"id": 1464,
					"name": "GT",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Greater than"
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1209,
							"character": 4
						}
					],
					"defaultValue": "\"GT\""
				},
				{
					"id": 1473,
					"name": "IN",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Is included in this list of values"
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1245,
							"character": 4
						}
					],
					"defaultValue": "\"IN\""
				},
				{
					"id": 1463,
					"name": "LE",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Less than or equal to"
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1205,
							"character": 4
						}
					],
					"defaultValue": "\"LE\""
				},
				{
					"id": 1462,
					"name": "LT",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Less than"
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1201,
							"character": 4
						}
					],
					"defaultValue": "\"LT\""
				},
				{
					"id": 1461,
					"name": "NE",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Does not equal"
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1197,
							"character": 4
						}
					],
					"defaultValue": "\"NE\""
				},
				{
					"id": 1474,
					"name": "NOT_IN",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"comment": {
						"shortText": "Is not included in this list of values"
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1249,
							"character": 4
						}
					],
					"defaultValue": "\"NOT_IN\""
				}
			],
			"groups": [
				{
					"title": "Enumeration members",
					"kind": 16,
					"children": [
						1467,
						1472,
						1471,
						1469,
						1470,
						1466,
						1468,
						1460,
						1465,
						1464,
						1473,
						1463,
						1462,
						1461,
						1474
					]
				}
			],
			"sources": [
				{
					"fileName": "types.ts",
					"line": 1189,
					"character": 12
				}
			]
		},
		{
			"id": 2264,
			"name": "UIPassthroughEvent",
			"kind": 4,
			"kindString": "Enumeration",
			"flags": {},
			"children": [
				{
					"id": 2269,
					"name": "GetAnswerConfig",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"sources": [
						{
							"fileName": "embed/hostEventClient/contracts.ts",
							"line": 8,
							"character": 2
						}
					],
					"defaultValue": "\"getAnswerPageConfig\""
				},
				{
					"id": 2268,
					"name": "GetAvailableUIPassthroughs",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"sources": [
						{
							"fileName": "embed/hostEventClient/contracts.ts",
							"line": 7,
							"character": 2
						}
					],
					"defaultValue": "\"getAvailableUiPassthroughs\""
				},
				{
					"id": 2267,
					"name": "GetDiscoverabilityStatus",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"sources": [
						{
							"fileName": "embed/hostEventClient/contracts.ts",
							"line": 6,
							"character": 2
						}
					],
					"defaultValue": "\"getDiscoverabilityStatus\""
				},
				{
					"id": 2270,
					"name": "GetLiveboardConfig",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"sources": [
						{
							"fileName": "embed/hostEventClient/contracts.ts",
							"line": 9,
							"character": 2
						}
					],
					"defaultValue": "\"getPinboardPageConfig\""
				},
				{
					"id": 2265,
					"name": "PinAnswerToLiveboard",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"sources": [
						{
							"fileName": "embed/hostEventClient/contracts.ts",
							"line": 4,
							"character": 2
						}
					],
					"defaultValue": "\"addVizToPinboard\""
				},
				{
					"id": 2266,
					"name": "SaveAnswer",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {},
					"sources": [
						{
							"fileName": "embed/hostEventClient/contracts.ts",
							"line": 5,
							"character": 2
						}
					],
					"defaultValue": "\"saveAnswer\""
				}
			],
			"groups": [
				{
					"title": "Enumeration members",
					"kind": 16,
					"children": [
						2269,
						2268,
						2267,
						2270,
						2265,
						2266
					]
				}
			],
			"sources": [
				{
					"fileName": "embed/hostEventClient/contracts.ts",
					"line": 3,
					"character": 12
				}
			]
		},
		{
			"id": 1351,
			"name": "AnswerService",
			"kind": 128,
			"kindString": "Class",
			"flags": {},
			"comment": {
				"shortText": "Class representing the answer service provided with the\ncustom action payload. This service could be used to run\ngraphql queries in the context of the answer on which the\ncustom action was triggered.",
				"tags": [
					{
						"tag": "example",
						"text": "\n```js\n embed.on(EmbedEvent.CustomAction, e => {\n    const underlying = await e.answerService.getUnderlyingDataForPoint([\n      'col name 1'\n    ]);\n    const data = await underlying.fetchData(0, 100);\n })\n```"
					},
					{
						"tag": "example",
						"text": "\n```js\nembed.on(EmbedEvent.Data, async (e) => {\n    const service = await embed.getAnswerService();\n    await service.addColumns([\n        \"<column guid>\"\n    ]);\n    console.log(await service.fetchData());\n});\n```"
					},
					{
						"tag": "version",
						"text": "SDK: 1.25.0| ThoughtSpot: 9.10.0.cl"
					},
					{
						"tag": "group",
						"text": "Events\n"
					}
				]
			},
			"children": [
				{
					"id": 1352,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {},
					"comment": {
						"shortText": "Should not need to be called directly."
					},
					"sources": [
						{
							"fileName": "utils/graphql/answerService/answerService.ts",
							"line": 67,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1353,
							"name": "new AnswerService",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"comment": {
								"shortText": "Should not need to be called directly."
							},
							"parameters": [
								{
									"id": 1354,
									"name": "session",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"id": 1424,
										"name": "SessionInterface"
									}
								},
								{
									"id": 1355,
									"name": "answer",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 1356,
									"name": "thoughtSpotHost",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1357,
									"name": "selectedPoints",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "\n"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 2241,
											"name": "VizPoint"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1351,
								"name": "AnswerService"
							}
						}
					]
				},
				{
					"id": 1366,
					"name": "addColumns",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "utils/graphql/answerService/answerService.ts",
							"line": 108,
							"character": 17
						}
					],
					"signatures": [
						{
							"id": 1367,
							"name": "addColumns",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Add columnIds and return updated answer session.",
								"returns": "\n"
							},
							"parameters": [
								{
									"id": 1368,
									"name": "columnIds",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 1369,
					"name": "addColumnsByName",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "utils/graphql/answerService/answerService.ts",
							"line": 132,
							"character": 17
						}
					],
					"signatures": [
						{
							"id": 1370,
							"name": "addColumnsByName",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Add columns by names and return updated answer session.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```js\nembed.on(EmbedEvent.Data, async (e) => {\n   const service = await embed.getAnswerService();\n   await service.addColumnsByName([\n     \"col name 1\",\n     \"col name 2\"\n   ]);\n   console.log(await service.fetchData());\n});\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1371,
									"name": "columnNames",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 1418,
					"name": "addDisplayedVizToLiveboard",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "utils/graphql/answerService/answerService.ts",
							"line": 385,
							"character": 17
						}
					],
					"signatures": [
						{
							"id": 1419,
							"name": "addDisplayedVizToLiveboard",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1420,
									"name": "liveboardId",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 1372,
					"name": "addFilter",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "utils/graphql/answerService/answerService.ts",
							"line": 145,
							"character": 17
						}
					],
					"signatures": [
						{
							"id": 1373,
							"name": "addFilter",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Add a filter to the answer.",
								"returns": "\n"
							},
							"parameters": [
								{
									"id": 1374,
									"name": "columnName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1375,
									"name": "operator",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"id": 1459,
										"name": "RuntimeFilterOp"
									}
								},
								{
									"id": 1376,
									"name": "values",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "union",
											"types": [
												{
													"type": "intrinsic",
													"name": "string"
												},
												{
													"type": "intrinsic",
													"name": "number"
												},
												{
													"type": "intrinsic",
													"name": "bigint"
												},
												{
													"type": "intrinsic",
													"name": "boolean"
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 1408,
					"name": "executeQuery",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "utils/graphql/answerService/answerService.ts",
							"line": 335,
							"character": 17
						}
					],
					"signatures": [
						{
							"id": 1409,
							"name": "executeQuery",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Execute a custom graphql query in the context of the answer.",
								"returns": "\n"
							},
							"parameters": [
								{
									"id": 1410,
									"name": "query",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "graphql query"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1411,
									"name": "variables",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "graphql variables"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 1386,
					"name": "fetchCSVBlob",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "utils/graphql/answerService/answerService.ts",
							"line": 214,
							"character": 17
						}
					],
					"signatures": [
						{
							"id": 1387,
							"name": "fetchCSVBlob",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Fetch the data for the answer as a CSV blob. This might be\nquicker for larger data.",
								"returns": "Response\n"
							},
							"parameters": [
								{
									"id": 1388,
									"name": "userLocale",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "'en-us'"
								},
								{
									"id": 1389,
									"name": "includeInfo",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Include the CSV header in the output"
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "false"
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Response"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 1379,
					"name": "fetchData",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "utils/graphql/answerService/answerService.ts",
							"line": 186,
							"character": 17
						}
					],
					"signatures": [
						{
							"id": 1380,
							"name": "fetchData",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Fetch data from the answer.",
								"returns": "\n"
							},
							"parameters": [
								{
									"id": 1381,
									"name": "offset",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "0"
								},
								{
									"id": 1382,
									"name": "size",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "1000"
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 1383,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 1384,
													"name": "columns",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												},
												{
													"id": 1385,
													"name": "data",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														1384,
														1385
													]
												}
											]
										}
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 1390,
					"name": "fetchPNGBlob",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "utils/graphql/answerService/answerService.ts",
							"line": 230,
							"character": 17
						}
					],
					"signatures": [
						{
							"id": 1391,
							"name": "fetchPNGBlob",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Fetch the data for the answer as a PNG blob. This might be\nquicker for larger data.",
								"returns": "Response\n"
							},
							"parameters": [
								{
									"id": 1392,
									"name": "userLocale",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "'en-us'"
								},
								{
									"id": 1393,
									"name": "omitBackground",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Omit the background in the PNG"
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "false"
								},
								{
									"id": 1394,
									"name": "deviceScaleFactor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The scale factor for the PNG"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "2"
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Response"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 1414,
					"name": "getAnswer",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "utils/graphql/answerService/answerService.ts",
							"line": 358,
							"character": 17
						}
					],
					"signatures": [
						{
							"id": 1415,
							"name": "getAnswer",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 1395,
					"name": "getFetchCSVBlobUrl",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "utils/graphql/answerService/answerService.ts",
							"line": 248,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 1396,
							"name": "getFetchCSVBlobUrl",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Just get the internal URL for this answer's data\nas a CSV blob.",
								"returns": "\n"
							},
							"parameters": [
								{
									"id": 1397,
									"name": "userLocale",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "'en-us'"
								},
								{
									"id": 1398,
									"name": "includeInfo",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "false"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				},
				{
					"id": 1399,
					"name": "getFetchPNGBlobUrl",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "utils/graphql/answerService/answerService.ts",
							"line": 259,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 1400,
							"name": "getFetchPNGBlobUrl",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Just get the internal URL for this answer's data\nas a PNG blob."
							},
							"parameters": [
								{
									"id": 1401,
									"name": "userLocale",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "'en-us'"
								},
								{
									"id": 1402,
									"name": "omitBackground",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "false"
								},
								{
									"id": 1403,
									"name": "deviceScaleFactor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "2"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				},
				{
					"id": 1377,
					"name": "getSQLQuery",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "utils/graphql/answerService/answerService.ts",
							"line": 172,
							"character": 17
						}
					],
					"signatures": [
						{
							"id": 1378,
							"name": "getSQLQuery",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 1412,
					"name": "getSession",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "utils/graphql/answerService/answerService.ts",
							"line": 354,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 1413,
							"name": "getSession",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get the internal session details for the answer.",
								"returns": "\n"
							},
							"type": {
								"type": "reference",
								"id": 1424,
								"name": "SessionInterface"
							}
						}
					]
				},
				{
					"id": 1361,
					"name": "getSourceDetail",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "utils/graphql/answerService/answerService.ts",
							"line": 81,
							"character": 17
						}
					],
					"signatures": [
						{
							"id": 1362,
							"name": "getSourceDetail",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get the details about the source used in the answer.\nThis can be used to get the list of all columns in the data source for example."
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 1416,
					"name": "getTML",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "utils/graphql/answerService/answerService.ts",
							"line": 369,
							"character": 17
						}
					],
					"signatures": [
						{
							"id": 1417,
							"name": "getTML",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 1404,
					"name": "getUnderlyingDataForPoint",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "utils/graphql/answerService/answerService.ts",
							"line": 280,
							"character": 17
						}
					],
					"signatures": [
						{
							"id": 1405,
							"name": "getUnderlyingDataForPoint",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get underlying data given a point and the output column names.\nIn case of a context menu action, the selectedPoints are\nautomatically passed.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```js\n embed.on(EmbedEvent.CustomAction, e => {\n    const underlying = await e.answerService.getUnderlyingDataForPoint([\n      'col name 1' // The column should exist in the data source.\n    ]);\n    const data = await underlying.fetchData(0, 100);\n })\n```"
									},
									{
										"tag": "version",
										"text": "SDK: 1.25.0| ThoughtSpot: 9.10.0.cl\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1406,
									"name": "outputColumnNames",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 1407,
									"name": "selectedPoints",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 1431,
											"name": "UnderlyingDataPoint"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 1351,
										"name": "AnswerService"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 1363,
					"name": "removeColumns",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "utils/graphql/answerService/answerService.ts",
							"line": 94,
							"character": 17
						}
					],
					"signatures": [
						{
							"id": 1364,
							"name": "removeColumns",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Remove columnIds and return updated answer session.",
								"returns": "\n"
							},
							"parameters": [
								{
									"id": 1365,
									"name": "columnIds",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 1421,
					"name": "setTMLOverride",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "utils/graphql/answerService/answerService.ts",
							"line": 397,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 1422,
							"name": "setTMLOverride",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1423,
									"name": "override",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						1352
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						1366,
						1369,
						1418,
						1372,
						1408,
						1386,
						1379,
						1390,
						1414,
						1395,
						1399,
						1377,
						1412,
						1361,
						1416,
						1404,
						1363,
						1421
					]
				}
			],
			"sources": [
				{
					"fileName": "utils/graphql/answerService/answerService.ts",
					"line": 55,
					"character": 13
				}
			]
		},
		{
			"id": 864,
			"name": "AppEmbed",
			"kind": 128,
			"kindString": "Class",
			"flags": {},
			"comment": {
				"shortText": "Embeds full ThoughtSpot experience in a host application.",
				"tags": [
					{
						"tag": "group",
						"text": "Embed components\n"
					}
				]
			},
			"children": [
				{
					"id": 865,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {},
					"sources": [
						{
							"fileName": "embed/app.ts",
							"line": 483,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 866,
							"name": "new AppEmbed",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 867,
									"name": "domSelector",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 2083,
										"name": "DOMSelector"
									}
								},
								{
									"id": 868,
									"name": "viewConfig",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1991,
										"name": "AppViewConfig"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 864,
								"name": "AppEmbed"
							},
							"overwrites": {
								"type": "reference",
								"name": "V1Embed.constructor"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "V1Embed.constructor"
					}
				},
				{
					"id": 1020,
					"name": "destroy",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1134,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 1021,
							"name": "destroy",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Destroys the ThoughtSpot embed, and remove any nodes from the DOM.",
								"tags": [
									{
										"tag": "version",
										"text": "SDK: 1.19.1 | ThoughtSpot: *\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "V1Embed.destroy"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "V1Embed.destroy"
					}
				},
				{
					"id": 1039,
					"name": "getAnswerService",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1305,
							"character": 17
						}
					],
					"signatures": [
						{
							"id": 1040,
							"name": "getAnswerService",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the answerService which can be used to make arbitrary graphql calls on top\nsession.",
								"tags": [
									{
										"tag": "version",
										"text": "SDK: 1.25.0 / ThoughtSpot 9.10.0\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1041,
									"name": "vizId",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "to get for a specific viz in case of a Liveboard."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 1351,
										"name": "AnswerService"
									}
								],
								"name": "Promise"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "V1Embed.getAnswerService"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "V1Embed.getAnswerService"
					}
				},
				{
					"id": 873,
					"name": "getIFrameSrc",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/app.ts",
							"line": 613,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 874,
							"name": "getIFrameSrc",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Constructs the URL of the ThoughtSpot app page to be rendered."
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				},
				{
					"id": 1007,
					"name": "getIframeSrc",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1075,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 1008,
							"name": "getIframeSrc",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "V1Embed.getIframeSrc"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "V1Embed.getIframeSrc"
					}
				},
				{
					"id": 1034,
					"name": "getPreRenderIds",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1292,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 1035,
							"name": "getPreRenderIds",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Retrieves unique HTML element IDs for PreRender-related elements.\nThese IDs are constructed based on the provided 'preRenderId' from 'viewConfig'.",
								"returns": "An object containing the IDs for the PreRender elements.",
								"tags": [
									{
										"tag": "property",
										"text": "{string} wrapper - The HTML element ID for the PreRender wrapper."
									},
									{
										"tag": "property",
										"text": "{string} child - The HTML element ID for the PreRender child.\n"
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1036,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 1038,
											"name": "child",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": "..."
										},
										{
											"id": 1037,
											"name": "wrapper",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": "..."
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1038,
												1037
											]
										}
									]
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "V1Embed.getPreRenderIds"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "V1Embed.getPreRenderIds"
					}
				},
				{
					"id": 1014,
					"name": "getThoughtSpotPostUrlParams",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1104,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 1015,
							"name": "getThoughtSpotPostUrlParams",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get the Post Url Params for THOUGHTSPOT from the current\nhost app URL.\nTHOUGHTSPOT URL params starts with a prefix \"ts-\"",
								"tags": [
									{
										"tag": "version",
										"text": "SDK: 1.14.0 | ThoughtSpot: 8.4.0.cl, 8.4.1-sw\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1016,
									"name": "additionalParams",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1017,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": {
												"id": 1018,
												"name": "__index",
												"kind": 8192,
												"kindString": "Index signature",
												"flags": {},
												"parameters": [
													{
														"id": 1019,
														"name": "key",
														"kind": 32768,
														"flags": {},
														"type": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												],
												"type": {
													"type": "union",
													"types": [
														{
															"type": "intrinsic",
															"name": "string"
														},
														{
															"type": "intrinsic",
															"name": "number"
														}
													]
												}
											}
										}
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "V1Embed.getThoughtSpotPostUrlParams"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "V1Embed.getThoughtSpotPostUrlParams"
					}
				},
				{
					"id": 1022,
					"name": "getUnderlyingFrameElement",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1143,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 1023,
							"name": "getUnderlyingFrameElement",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "HTMLIFrameElement"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "V1Embed.getUnderlyingFrameElement"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "V1Embed.getUnderlyingFrameElement"
					}
				},
				{
					"id": 1032,
					"name": "hidePreRender",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1264,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 1033,
							"name": "hidePreRender",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Hides the PreRender component if it is available.\nIf the component is not preRendered, it issues a warning."
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "V1Embed.hidePreRender"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "V1Embed.hidePreRender"
					}
				},
				{
					"id": 892,
					"name": "navigateToPage",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/app.ts",
							"line": 715,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 893,
							"name": "navigateToPage",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Navigate to particular page for app embed. eg:answers/pinboards/home\nThis is used for embedding answers, pinboards, visualizations and full application\nonly.",
								"tags": [
									{
										"tag": "version",
										"text": "SDK: 1.12.0 | ThoughtSpot: 8.4.0.cl, 8.4.1-sw\n"
									}
								]
							},
							"parameters": [
								{
									"id": 894,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "string | number The string, set to iframe src and navigate to new page\neg: appEmbed.navigateToPage('pinboards')\nWhen used with `noReload` (default: true) this can also be a number\nlike 1/-1 to go forward/back."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								},
								{
									"id": 895,
									"name": "noReload",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "boolean Trigger the navigation without reloading the page"
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "false"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 992,
					"name": "off",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 990,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 993,
							"name": "off",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes an event listener for a particular event type.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```js\nconst errorHandler = (data) => { console.error(data); };\ntsEmbed.on(EmbedEvent.Error, errorHandler);\ntsEmbed.off(EmbedEvent.Error, errorHandler);\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 994,
									"name": "messageType",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The message type"
									},
									"type": {
										"type": "reference",
										"id": 1475,
										"name": "EmbedEvent"
									}
								},
								{
									"id": 995,
									"name": "callback",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The callback to remove"
									},
									"type": {
										"type": "reference",
										"id": 2087,
										"name": "MessageCallback"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "TsEmbed"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "V1Embed.off"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "V1Embed.off"
					}
				},
				{
					"id": 903,
					"name": "on",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1371,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 904,
							"name": "on",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"tags": [
									{
										"tag": "inheritdoc",
										"text": ""
									},
									{
										"tag": "example",
										"text": "\n```js\ntsEmbed.on(EmbedEvent.Error, (data) => {\n  console.error(data);\n});\n```"
									},
									{
										"tag": "example",
										"text": "\n```js\ntsEmbed.on(EmbedEvent.Save, (data) => {\n  console.log(\"Answer save clicked\", data);\n}, {\n  start: true // This will trigger the callback on start of save\n});\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 905,
									"name": "messageType",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1475,
										"name": "EmbedEvent"
									}
								},
								{
									"id": 906,
									"name": "callback",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 2087,
										"name": "MessageCallback"
									}
								},
								{
									"id": 907,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 2084,
										"name": "MessageOptions"
									},
									"defaultValue": "..."
								}
							],
							"type": {
								"type": "reference",
								"name": "TsEmbed"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "V1Embed.on"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "V1Embed.on"
					}
				},
				{
					"id": 1011,
					"name": "preRender",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1087,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 1012,
							"name": "preRender",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates the preRender shell"
							},
							"parameters": [
								{
									"id": 1013,
									"name": "showPreRenderByDefault",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Show the preRender after render, hidden by default\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "false"
								}
							],
							"type": {
								"type": "reference",
								"name": "TsEmbed"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "V1Embed.preRender"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "V1Embed.preRender"
					}
				},
				{
					"id": 1024,
					"name": "prerenderGeneric",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1154,
							"character": 17
						}
					],
					"signatures": [
						{
							"id": 1025,
							"name": "prerenderGeneric",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Prerenders a generic instance of the TS component.\nThis means without the path but with the flags already applied.\nThis is useful for prerendering the component in the background.",
								"returns": "\n",
								"tags": [
									{
										"tag": "version",
										"text": "SDK: 1.22.0"
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "V1Embed.prerenderGeneric"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "V1Embed.prerenderGeneric"
					}
				},
				{
					"id": 896,
					"name": "render",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/app.ts",
							"line": 742,
							"character": 17
						}
					],
					"signatures": [
						{
							"id": 897,
							"name": "render",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Renders the embedded application pages in the ThoughtSpot app."
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 864,
										"name": "AppEmbed"
									}
								],
								"name": "Promise"
							},
							"overwrites": {
								"type": "reference",
								"name": "V1Embed.render"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "V1Embed.render"
					}
				},
				{
					"id": 1028,
					"name": "showPreRender",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1197,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 1029,
							"name": "showPreRender",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Displays the PreRender component.\nIf the component is not preRendered, it attempts to create and render it.\nAlso, synchronizes the style of the PreRender component with the embedding\nelement."
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "V1Embed.showPreRender"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "V1Embed.showPreRender"
					}
				},
				{
					"id": 1030,
					"name": "syncPreRenderStyle",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1245,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 1031,
							"name": "syncPreRenderStyle",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Synchronizes the style properties of the PreRender component with the embedding\nelement. This function adjusts the position, width, and height of the PreRender\ncomponent\nto match the dimensions and position of the embedding element.",
								"tags": [
									{
										"tag": "throws",
										"text": "{Error} Throws an error if the embedding element (passed as domSelector)\nis not defined or not found.\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "V1Embed.syncPreRenderStyle"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "V1Embed.syncPreRenderStyle"
					}
				},
				{
					"id": 996,
					"name": "trigger",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1029,
							"character": 17
						}
					],
					"signatures": [
						{
							"id": 997,
							"name": "trigger",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Triggers an event to the embedded app",
								"returns": "A promise that resolves with the response from the embedded app\n"
							},
							"typeParameter": [
								{
									"id": 998,
									"name": "HostEventT",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1553,
										"name": "HostEvent"
									}
								},
								{
									"id": 999,
									"name": "PayloadT",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 1000,
									"name": "messageType",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The event type"
									},
									"type": {
										"type": "reference",
										"name": "HostEventT"
									}
								},
								{
									"id": 1001,
									"name": "data",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The payload to send with the message"
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "PayloadT"
											},
											{
												"type": "reference",
												"name": "HostEventT"
											}
										],
										"name": "TriggerPayload"
									},
									"defaultValue": "..."
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "PayloadT"
											},
											{
												"type": "reference",
												"name": "HostEventT"
											}
										],
										"name": "TriggerResponse"
									}
								],
								"name": "Promise"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "V1Embed.trigger"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "V1Embed.trigger"
					}
				},
				{
					"id": 1002,
					"name": "triggerUIPassThrough",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1055,
							"character": 17
						}
					],
					"signatures": [
						{
							"id": 1003,
							"name": "triggerUIPassThrough",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Triggers an event to the embedded app, skipping the UI flow.",
								"returns": "- A promise that resolves with the response\nfrom the embedded app.\n"
							},
							"typeParameter": [
								{
									"id": 1004,
									"name": "UIPassthroughEventT",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 2264,
										"name": "UIPassthroughEvent"
									}
								}
							],
							"parameters": [
								{
									"id": 1005,
									"name": "apiName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The name of the API to be triggered."
									},
									"type": {
										"type": "reference",
										"name": "UIPassthroughEventT"
									}
								},
								{
									"id": 1006,
									"name": "parameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The parameters to be passed to the API."
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "UIPassthroughEventT"
											}
										],
										"name": "UIPassthroughRequest"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "UIPassthroughEventT"
											}
										],
										"name": "UIPassthroughArrayResponse"
									}
								],
								"name": "Promise"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "V1Embed.triggerUIPassThrough"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "V1Embed.triggerUIPassThrough"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						865
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						1020,
						1039,
						873,
						1007,
						1034,
						1014,
						1022,
						1032,
						892,
						992,
						903,
						1011,
						1024,
						896,
						1028,
						1030,
						996,
						1002
					]
				}
			],
			"sources": [
				{
					"fileName": "embed/app.ts",
					"line": 477,
					"character": 13
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "V1Embed"
				}
			]
		},
		{
			"id": 1042,
			"name": "BodylessConversation",
			"kind": 128,
			"kindString": "Class",
			"flags": {},
			"comment": {
				"shortText": "Create a conversation embed, which can be integrated inside\nchatbots or other conversational interfaces.",
				"tags": [
					{
						"tag": "example",
						"text": "\n```js\nimport { BodylessConversation } from '@thoughtspot/visual-embed-sdk';\n\nconst conversation = new BodylessConversation({\n worksheetId: 'worksheetId',\n});\n\nconst { container, error } = await conversation.sendMessage('show me sales by region');\n\n// append the container to the DOM\ndocument.body.appendChild(container); // or to any other element\n```"
					},
					{
						"tag": "group",
						"text": "Embed components"
					},
					{
						"tag": "version",
						"text": "SDK: 1.33.1 | ThoughtSpot: 10.5.0.cl\n"
					}
				]
			},
			"children": [
				{
					"id": 1043,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {},
					"sources": [
						{
							"fileName": "embed/bodyless-conversation.ts",
							"line": 87,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1044,
							"name": "new BodylessConversation",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 1045,
									"name": "viewConfig",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1056,
										"name": "BodylessConversationViewConfig"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1042,
								"name": "BodylessConversation"
							}
						}
					]
				},
				{
					"id": 1047,
					"name": "sendMessage",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/bodyless-conversation.ts",
							"line": 96,
							"character": 17
						}
					],
					"signatures": [
						{
							"id": 1048,
							"name": "sendMessage",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1049,
									"name": "userMessage",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "reflection",
												"declaration": {
													"id": 1050,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 1052,
															"name": "container",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "undefined"
															}
														},
														{
															"id": 1051,
															"name": "error",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																1052,
																1051
															]
														}
													]
												}
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 1053,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 1054,
															"name": "container",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "HTMLDivElement"
															}
														},
														{
															"id": 1055,
															"name": "error",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "undefined"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																1054,
																1055
															]
														}
													]
												}
											}
										]
									}
								],
								"name": "Promise"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						1043
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						1047
					]
				}
			],
			"sources": [
				{
					"fileName": "embed/bodyless-conversation.ts",
					"line": 84,
					"character": 13
				}
			]
		},
		{
			"id": 1096,
			"name": "ConversationEmbed",
			"kind": 128,
			"kindString": "Class",
			"flags": {},
			"comment": {
				"shortText": "Embed ThoughtSpot AI Conversation.",
				"tags": [
					{
						"tag": "group",
						"text": "Embed components"
					},
					{
						"tag": "example",
						"text": "\n```js\nconst conversation = new ConversationEmbed('#tsEmbed', {\n  worksheetId: 'worksheetId',\n  searchOptions: {\n    searchQuery: 'searchQuery',\n  },\n});\nconversation.render();\n```"
					},
					{
						"tag": "version",
						"text": "SDK: 1.33.1 | ThoughtSpot: 10.5.0.cl\n"
					}
				]
			},
			"children": [
				{
					"id": 1097,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {},
					"sources": [
						{
							"fileName": "embed/conversation.ts",
							"line": 73,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1098,
							"name": "new ConversationEmbed",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 1099,
									"name": "container",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "HTMLElement"
									}
								},
								{
									"id": 1100,
									"name": "viewConfig",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1242,
										"name": "ConversationViewConfig"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1096,
								"name": "ConversationEmbed"
							},
							"overwrites": {
								"type": "reference",
								"name": "TsEmbed.constructor"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "TsEmbed.constructor"
					}
				},
				{
					"id": 1220,
					"name": "destroy",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1134,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 1221,
							"name": "destroy",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Destroys the ThoughtSpot embed, and remove any nodes from the DOM.",
								"tags": [
									{
										"tag": "version",
										"text": "SDK: 1.19.1 | ThoughtSpot: *\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TsEmbed.destroy"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "TsEmbed.destroy"
					}
				},
				{
					"id": 1239,
					"name": "getAnswerService",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1305,
							"character": 17
						}
					],
					"signatures": [
						{
							"id": 1240,
							"name": "getAnswerService",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the answerService which can be used to make arbitrary graphql calls on top\nsession.",
								"tags": [
									{
										"tag": "version",
										"text": "SDK: 1.25.0 / ThoughtSpot 9.10.0\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1241,
									"name": "vizId",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "to get for a specific viz in case of a Liveboard."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 1351,
										"name": "AnswerService"
									}
								],
								"name": "Promise"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TsEmbed.getAnswerService"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "TsEmbed.getAnswerService"
					}
				},
				{
					"id": 1102,
					"name": "getIframeSrc",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/conversation.ts",
							"line": 78,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 1103,
							"name": "getIframeSrc",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"overwrites": {
								"type": "reference",
								"name": "TsEmbed.getIframeSrc"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "TsEmbed.getIframeSrc"
					}
				},
				{
					"id": 1234,
					"name": "getPreRenderIds",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1292,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 1235,
							"name": "getPreRenderIds",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Retrieves unique HTML element IDs for PreRender-related elements.\nThese IDs are constructed based on the provided 'preRenderId' from 'viewConfig'.",
								"returns": "An object containing the IDs for the PreRender elements.",
								"tags": [
									{
										"tag": "property",
										"text": "{string} wrapper - The HTML element ID for the PreRender wrapper."
									},
									{
										"tag": "property",
										"text": "{string} child - The HTML element ID for the PreRender child.\n"
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1236,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 1238,
											"name": "child",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": "..."
										},
										{
											"id": 1237,
											"name": "wrapper",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": "..."
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1238,
												1237
											]
										}
									]
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TsEmbed.getPreRenderIds"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "TsEmbed.getPreRenderIds"
					}
				},
				{
					"id": 1214,
					"name": "getThoughtSpotPostUrlParams",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1104,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 1215,
							"name": "getThoughtSpotPostUrlParams",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get the Post Url Params for THOUGHTSPOT from the current\nhost app URL.\nTHOUGHTSPOT URL params starts with a prefix \"ts-\"",
								"tags": [
									{
										"tag": "version",
										"text": "SDK: 1.14.0 | ThoughtSpot: 8.4.0.cl, 8.4.1-sw\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1216,
									"name": "additionalParams",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1217,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": {
												"id": 1218,
												"name": "__index",
												"kind": 8192,
												"kindString": "Index signature",
												"flags": {},
												"parameters": [
													{
														"id": 1219,
														"name": "key",
														"kind": 32768,
														"flags": {},
														"type": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												],
												"type": {
													"type": "union",
													"types": [
														{
															"type": "intrinsic",
															"name": "string"
														},
														{
															"type": "intrinsic",
															"name": "number"
														}
													]
												}
											}
										}
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TsEmbed.getThoughtSpotPostUrlParams"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "TsEmbed.getThoughtSpotPostUrlParams"
					}
				},
				{
					"id": 1222,
					"name": "getUnderlyingFrameElement",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1143,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 1223,
							"name": "getUnderlyingFrameElement",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "HTMLIFrameElement"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TsEmbed.getUnderlyingFrameElement"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "TsEmbed.getUnderlyingFrameElement"
					}
				},
				{
					"id": 1232,
					"name": "hidePreRender",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1264,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 1233,
							"name": "hidePreRender",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Hides the PreRender component if it is available.\nIf the component is not preRendered, it issues a warning."
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TsEmbed.hidePreRender"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "TsEmbed.hidePreRender"
					}
				},
				{
					"id": 1194,
					"name": "off",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 990,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 1195,
							"name": "off",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes an event listener for a particular event type.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```js\nconst errorHandler = (data) => { console.error(data); };\ntsEmbed.on(EmbedEvent.Error, errorHandler);\ntsEmbed.off(EmbedEvent.Error, errorHandler);\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1196,
									"name": "messageType",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The message type"
									},
									"type": {
										"type": "reference",
										"id": 1475,
										"name": "EmbedEvent"
									}
								},
								{
									"id": 1197,
									"name": "callback",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The callback to remove"
									},
									"type": {
										"type": "reference",
										"id": 2087,
										"name": "MessageCallback"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "TsEmbed"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TsEmbed.off"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "TsEmbed.off"
					}
				},
				{
					"id": 1188,
					"name": "on",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 961,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 1189,
							"name": "on",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Registers an event listener to trigger an alert when the ThoughtSpot app\nsends an event of a particular message type to the host application.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```js\ntsEmbed.on(EmbedEvent.Error, (data) => {\n  console.error(data);\n});\n```"
									},
									{
										"tag": "example",
										"text": "\n```js\ntsEmbed.on(EmbedEvent.Save, (data) => {\n  console.log(\"Answer save clicked\", data);\n}, {\n  start: true // This will trigger the callback on start of save\n});\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1190,
									"name": "messageType",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The message type"
									},
									"type": {
										"type": "reference",
										"id": 1475,
										"name": "EmbedEvent"
									}
								},
								{
									"id": 1191,
									"name": "callback",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "A callback as a function"
									},
									"type": {
										"type": "reference",
										"id": 2087,
										"name": "MessageCallback"
									}
								},
								{
									"id": 1192,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The message options"
									},
									"type": {
										"type": "reference",
										"id": 2084,
										"name": "MessageOptions"
									},
									"defaultValue": "..."
								},
								{
									"id": 1193,
									"name": "isRegisteredBySDK",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "false"
								}
							],
							"type": {
								"type": "reference",
								"name": "TsEmbed"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TsEmbed.on"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "TsEmbed.on"
					}
				},
				{
					"id": 1211,
					"name": "preRender",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1087,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 1212,
							"name": "preRender",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates the preRender shell"
							},
							"parameters": [
								{
									"id": 1213,
									"name": "showPreRenderByDefault",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Show the preRender after render, hidden by default\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "false"
								}
							],
							"type": {
								"type": "reference",
								"name": "TsEmbed"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TsEmbed.preRender"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "TsEmbed.preRender"
					}
				},
				{
					"id": 1224,
					"name": "prerenderGeneric",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1154,
							"character": 17
						}
					],
					"signatures": [
						{
							"id": 1225,
							"name": "prerenderGeneric",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Prerenders a generic instance of the TS component.\nThis means without the path but with the flags already applied.\nThis is useful for prerendering the component in the background.",
								"returns": "\n",
								"tags": [
									{
										"tag": "version",
										"text": "SDK: 1.22.0"
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TsEmbed.prerenderGeneric"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "TsEmbed.prerenderGeneric"
					}
				},
				{
					"id": 1104,
					"name": "render",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/conversation.ts",
							"line": 111,
							"character": 17
						}
					],
					"signatures": [
						{
							"id": 1105,
							"name": "render",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 1096,
										"name": "ConversationEmbed"
									}
								],
								"name": "Promise"
							},
							"overwrites": {
								"type": "reference",
								"name": "TsEmbed.render"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "TsEmbed.render"
					}
				},
				{
					"id": 1228,
					"name": "showPreRender",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1197,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 1229,
							"name": "showPreRender",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Displays the PreRender component.\nIf the component is not preRendered, it attempts to create and render it.\nAlso, synchronizes the style of the PreRender component with the embedding\nelement."
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TsEmbed.showPreRender"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "TsEmbed.showPreRender"
					}
				},
				{
					"id": 1230,
					"name": "syncPreRenderStyle",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1245,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 1231,
							"name": "syncPreRenderStyle",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Synchronizes the style properties of the PreRender component with the embedding\nelement. This function adjusts the position, width, and height of the PreRender\ncomponent\nto match the dimensions and position of the embedding element.",
								"tags": [
									{
										"tag": "throws",
										"text": "{Error} Throws an error if the embedding element (passed as domSelector)\nis not defined or not found.\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TsEmbed.syncPreRenderStyle"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "TsEmbed.syncPreRenderStyle"
					}
				},
				{
					"id": 1198,
					"name": "trigger",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1029,
							"character": 17
						}
					],
					"signatures": [
						{
							"id": 1199,
							"name": "trigger",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Triggers an event to the embedded app",
								"returns": "A promise that resolves with the response from the embedded app\n"
							},
							"typeParameter": [
								{
									"id": 1200,
									"name": "HostEventT",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1553,
										"name": "HostEvent"
									}
								},
								{
									"id": 1201,
									"name": "PayloadT",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 1202,
									"name": "messageType",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The event type"
									},
									"type": {
										"type": "reference",
										"name": "HostEventT"
									}
								},
								{
									"id": 1203,
									"name": "data",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The payload to send with the message"
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "PayloadT"
											},
											{
												"type": "reference",
												"name": "HostEventT"
											}
										],
										"name": "TriggerPayload"
									},
									"defaultValue": "..."
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "PayloadT"
											},
											{
												"type": "reference",
												"name": "HostEventT"
											}
										],
										"name": "TriggerResponse"
									}
								],
								"name": "Promise"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TsEmbed.trigger"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "TsEmbed.trigger"
					}
				},
				{
					"id": 1204,
					"name": "triggerUIPassThrough",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1055,
							"character": 17
						}
					],
					"signatures": [
						{
							"id": 1205,
							"name": "triggerUIPassThrough",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Triggers an event to the embedded app, skipping the UI flow.",
								"returns": "- A promise that resolves with the response\nfrom the embedded app.\n"
							},
							"typeParameter": [
								{
									"id": 1206,
									"name": "UIPassthroughEventT",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 2264,
										"name": "UIPassthroughEvent"
									}
								}
							],
							"parameters": [
								{
									"id": 1207,
									"name": "apiName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The name of the API to be triggered."
									},
									"type": {
										"type": "reference",
										"name": "UIPassthroughEventT"
									}
								},
								{
									"id": 1208,
									"name": "parameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The parameters to be passed to the API."
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "UIPassthroughEventT"
											}
										],
										"name": "UIPassthroughRequest"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "UIPassthroughEventT"
											}
										],
										"name": "UIPassthroughArrayResponse"
									}
								],
								"name": "Promise"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TsEmbed.triggerUIPassThrough"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "TsEmbed.triggerUIPassThrough"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						1097
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						1220,
						1239,
						1102,
						1234,
						1214,
						1222,
						1232,
						1194,
						1188,
						1211,
						1224,
						1104,
						1228,
						1230,
						1198,
						1204
					]
				}
			],
			"sources": [
				{
					"fileName": "embed/conversation.ts",
					"line": 72,
					"character": 13
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "TsEmbed"
				}
			]
		},
		{
			"id": 522,
			"name": "LiveboardEmbed",
			"kind": 128,
			"kindString": "Class",
			"flags": {},
			"comment": {
				"shortText": "Embed a ThoughtSpot Liveboard or visualization. When rendered it already\nwaits for the authentication to complete, so you need not wait for\n`AuthStatus.SUCCESS`.",
				"tags": [
					{
						"tag": "example",
						"text": "\n```js\nimport { .. } from '@thoughtspot/visual-embed-sdk';\ninit({ ... });\nconst embed = new LiveboardEmbed(\"#container\", {\n  liveboardId: <your-id-here>,\n// .. other params here.\n})\n```"
					},
					{
						"tag": "group",
						"text": "Embed components\n"
					}
				]
			},
			"children": [
				{
					"id": 523,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {},
					"sources": [
						{
							"fileName": "embed/liveboard.ts",
							"line": 407,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 524,
							"name": "new LiveboardEmbed",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 525,
									"name": "domSelector",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 2083,
										"name": "DOMSelector"
									}
								},
								{
									"id": 526,
									"name": "viewConfig",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1884,
										"name": "LiveboardViewConfig"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 522,
								"name": "LiveboardEmbed"
							},
							"overwrites": {
								"type": "reference",
								"name": "V1Embed.constructor"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "V1Embed.constructor"
					}
				},
				{
					"id": 688,
					"name": "destroy",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1134,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 689,
							"name": "destroy",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Destroys the ThoughtSpot embed, and remove any nodes from the DOM.",
								"tags": [
									{
										"tag": "version",
										"text": "SDK: 1.19.1 | ThoughtSpot: *\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "V1Embed.destroy"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "V1Embed.destroy"
					}
				},
				{
					"id": 705,
					"name": "getAnswerService",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1305,
							"character": 17
						}
					],
					"signatures": [
						{
							"id": 706,
							"name": "getAnswerService",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the answerService which can be used to make arbitrary graphql calls on top\nsession.",
								"tags": [
									{
										"tag": "version",
										"text": "SDK: 1.25.0 / ThoughtSpot 9.10.0\n"
									}
								]
							},
							"parameters": [
								{
									"id": 707,
									"name": "vizId",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "to get for a specific viz in case of a Liveboard."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 1351,
										"name": "AnswerService"
									}
								],
								"name": "Promise"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "V1Embed.getAnswerService"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "V1Embed.getAnswerService"
					}
				},
				{
					"id": 677,
					"name": "getIframeSrc",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1075,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 678,
							"name": "getIframeSrc",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "V1Embed.getIframeSrc"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "V1Embed.getIframeSrc"
					}
				},
				{
					"id": 572,
					"name": "getLiveboardUrl",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/liveboard.ts",
							"line": 693,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 573,
							"name": "getLiveboardUrl",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the full url of the Liveboard/visualization which can be used to open\nthis Liveboard inside the full Thoughtspot application in a new tab.",
								"returns": "url string\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				},
				{
					"id": 700,
					"name": "getPreRenderIds",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1292,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 701,
							"name": "getPreRenderIds",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Retrieves unique HTML element IDs for PreRender-related elements.\nThese IDs are constructed based on the provided 'preRenderId' from 'viewConfig'.",
								"returns": "An object containing the IDs for the PreRender elements.",
								"tags": [
									{
										"tag": "property",
										"text": "{string} wrapper - The HTML element ID for the PreRender wrapper."
									},
									{
										"tag": "property",
										"text": "{string} child - The HTML element ID for the PreRender child.\n"
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 702,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 704,
											"name": "child",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": "..."
										},
										{
											"id": 703,
											"name": "wrapper",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": "..."
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												704,
												703
											]
										}
									]
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "V1Embed.getPreRenderIds"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "V1Embed.getPreRenderIds"
					}
				},
				{
					"id": 682,
					"name": "getThoughtSpotPostUrlParams",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1104,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 683,
							"name": "getThoughtSpotPostUrlParams",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get the Post Url Params for THOUGHTSPOT from the current\nhost app URL.\nTHOUGHTSPOT URL params starts with a prefix \"ts-\"",
								"tags": [
									{
										"tag": "version",
										"text": "SDK: 1.14.0 | ThoughtSpot: 8.4.0.cl, 8.4.1-sw\n"
									}
								]
							},
							"parameters": [
								{
									"id": 684,
									"name": "additionalParams",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 685,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": {
												"id": 686,
												"name": "__index",
												"kind": 8192,
												"kindString": "Index signature",
												"flags": {},
												"parameters": [
													{
														"id": 687,
														"name": "key",
														"kind": 32768,
														"flags": {},
														"type": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												],
												"type": {
													"type": "union",
													"types": [
														{
															"type": "intrinsic",
															"name": "string"
														},
														{
															"type": "intrinsic",
															"name": "number"
														}
													]
												}
											}
										}
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "V1Embed.getThoughtSpotPostUrlParams"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "V1Embed.getThoughtSpotPostUrlParams"
					}
				},
				{
					"id": 690,
					"name": "getUnderlyingFrameElement",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1143,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 691,
							"name": "getUnderlyingFrameElement",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "HTMLIFrameElement"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "V1Embed.getUnderlyingFrameElement"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "V1Embed.getUnderlyingFrameElement"
					}
				},
				{
					"id": 698,
					"name": "hidePreRender",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1264,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 699,
							"name": "hidePreRender",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Hides the PreRender component if it is available.\nIf the component is not preRendered, it issues a warning."
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "V1Embed.hidePreRender"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "V1Embed.hidePreRender"
					}
				},
				{
					"id": 567,
					"name": "navigateToLiveboard",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/liveboard.ts",
							"line": 674,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 568,
							"name": "navigateToLiveboard",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 569,
									"name": "liveboardId",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 570,
									"name": "vizId",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 571,
									"name": "activeTabId",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 668,
					"name": "off",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 990,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 669,
							"name": "off",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes an event listener for a particular event type.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```js\nconst errorHandler = (data) => { console.error(data); };\ntsEmbed.on(EmbedEvent.Error, errorHandler);\ntsEmbed.off(EmbedEvent.Error, errorHandler);\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 670,
									"name": "messageType",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The message type"
									},
									"type": {
										"type": "reference",
										"id": 1475,
										"name": "EmbedEvent"
									}
								},
								{
									"id": 671,
									"name": "callback",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The callback to remove"
									},
									"type": {
										"type": "reference",
										"id": 2087,
										"name": "MessageCallback"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "TsEmbed"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "V1Embed.off"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "V1Embed.off"
					}
				},
				{
					"id": 579,
					"name": "on",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1371,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 580,
							"name": "on",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"tags": [
									{
										"tag": "inheritdoc",
										"text": ""
									},
									{
										"tag": "example",
										"text": "\n```js\ntsEmbed.on(EmbedEvent.Error, (data) => {\n  console.error(data);\n});\n```"
									},
									{
										"tag": "example",
										"text": "\n```js\ntsEmbed.on(EmbedEvent.Save, (data) => {\n  console.log(\"Answer save clicked\", data);\n}, {\n  start: true // This will trigger the callback on start of save\n});\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 581,
									"name": "messageType",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1475,
										"name": "EmbedEvent"
									}
								},
								{
									"id": 582,
									"name": "callback",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 2087,
										"name": "MessageCallback"
									}
								},
								{
									"id": 583,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 2084,
										"name": "MessageOptions"
									},
									"defaultValue": "..."
								}
							],
							"type": {
								"type": "reference",
								"name": "TsEmbed"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "V1Embed.on"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "V1Embed.on"
					}
				},
				{
					"id": 679,
					"name": "preRender",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1087,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 680,
							"name": "preRender",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates the preRender shell"
							},
							"parameters": [
								{
									"id": 681,
									"name": "showPreRenderByDefault",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Show the preRender after render, hidden by default\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "false"
								}
							],
							"type": {
								"type": "reference",
								"name": "TsEmbed"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "V1Embed.preRender"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "V1Embed.preRender"
					}
				},
				{
					"id": 692,
					"name": "prerenderGeneric",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1154,
							"character": 17
						}
					],
					"signatures": [
						{
							"id": 693,
							"name": "prerenderGeneric",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Prerenders a generic instance of the TS component.\nThis means without the path but with the flags already applied.\nThis is useful for prerendering the component in the background.",
								"returns": "\n",
								"tags": [
									{
										"tag": "version",
										"text": "SDK: 1.22.0"
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "V1Embed.prerenderGeneric"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "V1Embed.prerenderGeneric"
					}
				},
				{
					"id": 565,
					"name": "render",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/liveboard.ts",
							"line": 664,
							"character": 17
						}
					],
					"signatures": [
						{
							"id": 566,
							"name": "render",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Render an embedded ThoughtSpot Liveboard or visualization"
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 522,
										"name": "LiveboardEmbed"
									}
								],
								"name": "Promise"
							},
							"overwrites": {
								"type": "reference",
								"name": "V1Embed.render"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "V1Embed.render"
					}
				},
				{
					"id": 694,
					"name": "showPreRender",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1197,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 695,
							"name": "showPreRender",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Displays the PreRender component.\nIf the component is not preRendered, it attempts to create and render it.\nAlso, synchronizes the style of the PreRender component with the embedding\nelement."
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "V1Embed.showPreRender"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "V1Embed.showPreRender"
					}
				},
				{
					"id": 696,
					"name": "syncPreRenderStyle",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1245,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 697,
							"name": "syncPreRenderStyle",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Synchronizes the style properties of the PreRender component with the embedding\nelement. This function adjusts the position, width, and height of the PreRender\ncomponent\nto match the dimensions and position of the embedding element.",
								"tags": [
									{
										"tag": "throws",
										"text": "{Error} Throws an error if the embedding element (passed as domSelector)\nis not defined or not found.\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "V1Embed.syncPreRenderStyle"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "V1Embed.syncPreRenderStyle"
					}
				},
				{
					"id": 559,
					"name": "trigger",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/liveboard.ts",
							"line": 644,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 560,
							"name": "trigger",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Triggers an event to the embedded app",
								"returns": "A promise that resolves with the response from the embedded app\n"
							},
							"typeParameter": [
								{
									"id": 561,
									"name": "HostEventT",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1553,
										"name": "HostEvent"
									}
								},
								{
									"id": 562,
									"name": "PayloadT",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 563,
									"name": "messageType",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The event type"
									},
									"type": {
										"type": "reference",
										"name": "HostEventT"
									}
								},
								{
									"id": 564,
									"name": "data",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The payload to send with the message"
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "PayloadT"
											},
											{
												"type": "reference",
												"name": "HostEventT"
											}
										],
										"name": "TriggerPayload"
									},
									"defaultValue": "..."
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "PayloadT"
											},
											{
												"type": "reference",
												"name": "HostEventT"
											}
										],
										"name": "TriggerResponse"
									}
								],
								"name": "Promise"
							},
							"overwrites": {
								"type": "reference",
								"name": "V1Embed.trigger"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "V1Embed.trigger"
					}
				},
				{
					"id": 672,
					"name": "triggerUIPassThrough",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1055,
							"character": 17
						}
					],
					"signatures": [
						{
							"id": 673,
							"name": "triggerUIPassThrough",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Triggers an event to the embedded app, skipping the UI flow.",
								"returns": "- A promise that resolves with the response\nfrom the embedded app.\n"
							},
							"typeParameter": [
								{
									"id": 674,
									"name": "UIPassthroughEventT",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 2264,
										"name": "UIPassthroughEvent"
									}
								}
							],
							"parameters": [
								{
									"id": 675,
									"name": "apiName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The name of the API to be triggered."
									},
									"type": {
										"type": "reference",
										"name": "UIPassthroughEventT"
									}
								},
								{
									"id": 676,
									"name": "parameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The parameters to be passed to the API."
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "UIPassthroughEventT"
											}
										],
										"name": "UIPassthroughRequest"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "UIPassthroughEventT"
											}
										],
										"name": "UIPassthroughArrayResponse"
									}
								],
								"name": "Promise"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "V1Embed.triggerUIPassThrough"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "V1Embed.triggerUIPassThrough"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						523
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						688,
						705,
						677,
						572,
						700,
						682,
						690,
						698,
						567,
						668,
						579,
						679,
						692,
						565,
						694,
						696,
						559,
						672
					]
				}
			],
			"sources": [
				{
					"fileName": "embed/liveboard.ts",
					"line": 401,
					"character": 13
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "V1Embed"
				}
			]
		},
		{
			"id": 708,
			"name": "SageEmbed",
			"kind": 128,
			"kindString": "Class",
			"flags": {},
			"comment": {
				"shortText": "Embed ThoughtSpot LLM and GPT-based Natural Language Search component.",
				"tags": [
					{
						"tag": "version:",
						"text": "SDK: 1.23.0 | ThoughtSpot: 9.4.0.cl, 9.5.1-sw"
					},
					{
						"tag": "group",
						"text": "Embed components\n"
					}
				]
			},
			"children": [
				{
					"id": 709,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {},
					"sources": [
						{
							"fileName": "embed/sage.ts",
							"line": 139,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 710,
							"name": "new SageEmbed",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 711,
									"name": "domSelector",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 2083,
										"name": "DOMSelector"
									}
								},
								{
									"id": 712,
									"name": "viewConfig",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1946,
										"name": "SageViewConfig"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 708,
								"name": "SageEmbed"
							},
							"overwrites": {
								"type": "reference",
								"name": "V1Embed.constructor"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "V1Embed.constructor"
					}
				},
				{
					"id": 842,
					"name": "destroy",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1134,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 843,
							"name": "destroy",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Destroys the ThoughtSpot embed, and remove any nodes from the DOM.",
								"tags": [
									{
										"tag": "version",
										"text": "SDK: 1.19.1 | ThoughtSpot: *\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "V1Embed.destroy"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "V1Embed.destroy"
					}
				},
				{
					"id": 861,
					"name": "getAnswerService",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1305,
							"character": 17
						}
					],
					"signatures": [
						{
							"id": 862,
							"name": "getAnswerService",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the answerService which can be used to make arbitrary graphql calls on top\nsession.",
								"tags": [
									{
										"tag": "version",
										"text": "SDK: 1.25.0 / ThoughtSpot 9.10.0\n"
									}
								]
							},
							"parameters": [
								{
									"id": 863,
									"name": "vizId",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "to get for a specific viz in case of a Liveboard."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 1351,
										"name": "AnswerService"
									}
								],
								"name": "Promise"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "V1Embed.getAnswerService"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "V1Embed.getAnswerService"
					}
				},
				{
					"id": 716,
					"name": "getIFrameSrc",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/sage.ts",
							"line": 183,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 717,
							"name": "getIFrameSrc",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Construct the URL of the embedded ThoughtSpot sage to be\nloaded in the iframe",
								"returns": "iframe url\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				},
				{
					"id": 829,
					"name": "getIframeSrc",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1075,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 830,
							"name": "getIframeSrc",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "V1Embed.getIframeSrc"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "V1Embed.getIframeSrc"
					}
				},
				{
					"id": 856,
					"name": "getPreRenderIds",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1292,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 857,
							"name": "getPreRenderIds",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Retrieves unique HTML element IDs for PreRender-related elements.\nThese IDs are constructed based on the provided 'preRenderId' from 'viewConfig'.",
								"returns": "An object containing the IDs for the PreRender elements.",
								"tags": [
									{
										"tag": "property",
										"text": "{string} wrapper - The HTML element ID for the PreRender wrapper."
									},
									{
										"tag": "property",
										"text": "{string} child - The HTML element ID for the PreRender child.\n"
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 858,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 860,
											"name": "child",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": "..."
										},
										{
											"id": 859,
											"name": "wrapper",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": "..."
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												860,
												859
											]
										}
									]
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "V1Embed.getPreRenderIds"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "V1Embed.getPreRenderIds"
					}
				},
				{
					"id": 836,
					"name": "getThoughtSpotPostUrlParams",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1104,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 837,
							"name": "getThoughtSpotPostUrlParams",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get the Post Url Params for THOUGHTSPOT from the current\nhost app URL.\nTHOUGHTSPOT URL params starts with a prefix \"ts-\"",
								"tags": [
									{
										"tag": "version",
										"text": "SDK: 1.14.0 | ThoughtSpot: 8.4.0.cl, 8.4.1-sw\n"
									}
								]
							},
							"parameters": [
								{
									"id": 838,
									"name": "additionalParams",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 839,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": {
												"id": 840,
												"name": "__index",
												"kind": 8192,
												"kindString": "Index signature",
												"flags": {},
												"parameters": [
													{
														"id": 841,
														"name": "key",
														"kind": 32768,
														"flags": {},
														"type": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												],
												"type": {
													"type": "union",
													"types": [
														{
															"type": "intrinsic",
															"name": "string"
														},
														{
															"type": "intrinsic",
															"name": "number"
														}
													]
												}
											}
										}
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "V1Embed.getThoughtSpotPostUrlParams"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "V1Embed.getThoughtSpotPostUrlParams"
					}
				},
				{
					"id": 844,
					"name": "getUnderlyingFrameElement",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1143,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 845,
							"name": "getUnderlyingFrameElement",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "HTMLIFrameElement"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "V1Embed.getUnderlyingFrameElement"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "V1Embed.getUnderlyingFrameElement"
					}
				},
				{
					"id": 854,
					"name": "hidePreRender",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1264,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 855,
							"name": "hidePreRender",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Hides the PreRender component if it is available.\nIf the component is not preRendered, it issues a warning."
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "V1Embed.hidePreRender"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "V1Embed.hidePreRender"
					}
				},
				{
					"id": 814,
					"name": "off",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 990,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 815,
							"name": "off",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes an event listener for a particular event type.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```js\nconst errorHandler = (data) => { console.error(data); };\ntsEmbed.on(EmbedEvent.Error, errorHandler);\ntsEmbed.off(EmbedEvent.Error, errorHandler);\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 816,
									"name": "messageType",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The message type"
									},
									"type": {
										"type": "reference",
										"id": 1475,
										"name": "EmbedEvent"
									}
								},
								{
									"id": 817,
									"name": "callback",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The callback to remove"
									},
									"type": {
										"type": "reference",
										"id": 2087,
										"name": "MessageCallback"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "TsEmbed"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "V1Embed.off"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "V1Embed.off"
					}
				},
				{
					"id": 725,
					"name": "on",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1371,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 726,
							"name": "on",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"tags": [
									{
										"tag": "inheritdoc",
										"text": ""
									},
									{
										"tag": "example",
										"text": "\n```js\ntsEmbed.on(EmbedEvent.Error, (data) => {\n  console.error(data);\n});\n```"
									},
									{
										"tag": "example",
										"text": "\n```js\ntsEmbed.on(EmbedEvent.Save, (data) => {\n  console.log(\"Answer save clicked\", data);\n}, {\n  start: true // This will trigger the callback on start of save\n});\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 727,
									"name": "messageType",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1475,
										"name": "EmbedEvent"
									}
								},
								{
									"id": 728,
									"name": "callback",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 2087,
										"name": "MessageCallback"
									}
								},
								{
									"id": 729,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 2084,
										"name": "MessageOptions"
									},
									"defaultValue": "..."
								}
							],
							"type": {
								"type": "reference",
								"name": "TsEmbed"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "V1Embed.on"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "V1Embed.on"
					}
				},
				{
					"id": 833,
					"name": "preRender",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1087,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 834,
							"name": "preRender",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates the preRender shell"
							},
							"parameters": [
								{
									"id": 835,
									"name": "showPreRenderByDefault",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Show the preRender after render, hidden by default\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "false"
								}
							],
							"type": {
								"type": "reference",
								"name": "TsEmbed"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "V1Embed.preRender"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "V1Embed.preRender"
					}
				},
				{
					"id": 846,
					"name": "prerenderGeneric",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1154,
							"character": 17
						}
					],
					"signatures": [
						{
							"id": 847,
							"name": "prerenderGeneric",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Prerenders a generic instance of the TS component.\nThis means without the path but with the flags already applied.\nThis is useful for prerendering the component in the background.",
								"returns": "\n",
								"tags": [
									{
										"tag": "version",
										"text": "SDK: 1.22.0"
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "V1Embed.prerenderGeneric"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "V1Embed.prerenderGeneric"
					}
				},
				{
					"id": 718,
					"name": "render",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/sage.ts",
							"line": 208,
							"character": 17
						}
					],
					"signatures": [
						{
							"id": 719,
							"name": "render",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Render the embedded ThoughtSpot Sage",
								"returns": "Eureka/Sage embed\n"
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 708,
										"name": "SageEmbed"
									}
								],
								"name": "Promise"
							},
							"overwrites": {
								"type": "reference",
								"name": "V1Embed.render"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "V1Embed.render"
					}
				},
				{
					"id": 850,
					"name": "showPreRender",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1197,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 851,
							"name": "showPreRender",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Displays the PreRender component.\nIf the component is not preRendered, it attempts to create and render it.\nAlso, synchronizes the style of the PreRender component with the embedding\nelement."
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "V1Embed.showPreRender"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "V1Embed.showPreRender"
					}
				},
				{
					"id": 852,
					"name": "syncPreRenderStyle",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1245,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 853,
							"name": "syncPreRenderStyle",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Synchronizes the style properties of the PreRender component with the embedding\nelement. This function adjusts the position, width, and height of the PreRender\ncomponent\nto match the dimensions and position of the embedding element.",
								"tags": [
									{
										"tag": "throws",
										"text": "{Error} Throws an error if the embedding element (passed as domSelector)\nis not defined or not found.\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "V1Embed.syncPreRenderStyle"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "V1Embed.syncPreRenderStyle"
					}
				},
				{
					"id": 818,
					"name": "trigger",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1029,
							"character": 17
						}
					],
					"signatures": [
						{
							"id": 819,
							"name": "trigger",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Triggers an event to the embedded app",
								"returns": "A promise that resolves with the response from the embedded app\n"
							},
							"typeParameter": [
								{
									"id": 820,
									"name": "HostEventT",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1553,
										"name": "HostEvent"
									}
								},
								{
									"id": 821,
									"name": "PayloadT",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 822,
									"name": "messageType",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The event type"
									},
									"type": {
										"type": "reference",
										"name": "HostEventT"
									}
								},
								{
									"id": 823,
									"name": "data",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The payload to send with the message"
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "PayloadT"
											},
											{
												"type": "reference",
												"name": "HostEventT"
											}
										],
										"name": "TriggerPayload"
									},
									"defaultValue": "..."
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "PayloadT"
											},
											{
												"type": "reference",
												"name": "HostEventT"
											}
										],
										"name": "TriggerResponse"
									}
								],
								"name": "Promise"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "V1Embed.trigger"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "V1Embed.trigger"
					}
				},
				{
					"id": 824,
					"name": "triggerUIPassThrough",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1055,
							"character": 17
						}
					],
					"signatures": [
						{
							"id": 825,
							"name": "triggerUIPassThrough",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Triggers an event to the embedded app, skipping the UI flow.",
								"returns": "- A promise that resolves with the response\nfrom the embedded app.\n"
							},
							"typeParameter": [
								{
									"id": 826,
									"name": "UIPassthroughEventT",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 2264,
										"name": "UIPassthroughEvent"
									}
								}
							],
							"parameters": [
								{
									"id": 827,
									"name": "apiName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The name of the API to be triggered."
									},
									"type": {
										"type": "reference",
										"name": "UIPassthroughEventT"
									}
								},
								{
									"id": 828,
									"name": "parameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The parameters to be passed to the API."
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "UIPassthroughEventT"
											}
										],
										"name": "UIPassthroughRequest"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "UIPassthroughEventT"
											}
										],
										"name": "UIPassthroughArrayResponse"
									}
								],
								"name": "Promise"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "V1Embed.triggerUIPassThrough"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "V1Embed.triggerUIPassThrough"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						709
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						842,
						861,
						716,
						829,
						856,
						836,
						844,
						854,
						814,
						725,
						833,
						846,
						718,
						850,
						852,
						818,
						824
					]
				}
			],
			"sources": [
				{
					"fileName": "embed/sage.ts",
					"line": 131,
					"character": 13
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "V1Embed"
				}
			]
		},
		{
			"id": 208,
			"name": "SearchBarEmbed",
			"kind": 128,
			"kindString": "Class",
			"flags": {},
			"comment": {
				"shortText": "Embed ThoughtSpot search bar",
				"tags": [
					{
						"tag": "version:",
						"text": "SDK: 1.18.0 | ThoughtSpot: 8.10.0.cl, 9.0.1-sw"
					},
					{
						"tag": "group",
						"text": "Embed components\n"
					}
				]
			},
			"children": [
				{
					"id": 209,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {},
					"sources": [
						{
							"fileName": "embed/search-bar.tsx",
							"line": 117,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 210,
							"name": "new SearchBarEmbed",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 211,
									"name": "domSelector",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 212,
									"name": "viewConfig",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1848,
										"name": "SearchBarViewConfig"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 208,
								"name": "SearchBarEmbed"
							},
							"overwrites": {
								"type": "reference",
								"name": "TsEmbed.constructor"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "TsEmbed.constructor"
					}
				},
				{
					"id": 339,
					"name": "destroy",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1134,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 340,
							"name": "destroy",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Destroys the ThoughtSpot embed, and remove any nodes from the DOM.",
								"tags": [
									{
										"tag": "version",
										"text": "SDK: 1.19.1 | ThoughtSpot: *\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TsEmbed.destroy"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "TsEmbed.destroy"
					}
				},
				{
					"id": 358,
					"name": "getAnswerService",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1305,
							"character": 17
						}
					],
					"signatures": [
						{
							"id": 359,
							"name": "getAnswerService",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the answerService which can be used to make arbitrary graphql calls on top\nsession.",
								"tags": [
									{
										"tag": "version",
										"text": "SDK: 1.25.0 / ThoughtSpot 9.10.0\n"
									}
								]
							},
							"parameters": [
								{
									"id": 360,
									"name": "vizId",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "to get for a specific viz in case of a Liveboard."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 1351,
										"name": "AnswerService"
									}
								],
								"name": "Promise"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TsEmbed.getAnswerService"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "TsEmbed.getAnswerService"
					}
				},
				{
					"id": 326,
					"name": "getIframeSrc",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1075,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 327,
							"name": "getIframeSrc",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TsEmbed.getIframeSrc"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "TsEmbed.getIframeSrc"
					}
				},
				{
					"id": 353,
					"name": "getPreRenderIds",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1292,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 354,
							"name": "getPreRenderIds",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Retrieves unique HTML element IDs for PreRender-related elements.\nThese IDs are constructed based on the provided 'preRenderId' from 'viewConfig'.",
								"returns": "An object containing the IDs for the PreRender elements.",
								"tags": [
									{
										"tag": "property",
										"text": "{string} wrapper - The HTML element ID for the PreRender wrapper."
									},
									{
										"tag": "property",
										"text": "{string} child - The HTML element ID for the PreRender child.\n"
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 355,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 357,
											"name": "child",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": "..."
										},
										{
											"id": 356,
											"name": "wrapper",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": "..."
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												357,
												356
											]
										}
									]
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TsEmbed.getPreRenderIds"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "TsEmbed.getPreRenderIds"
					}
				},
				{
					"id": 333,
					"name": "getThoughtSpotPostUrlParams",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1104,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 334,
							"name": "getThoughtSpotPostUrlParams",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get the Post Url Params for THOUGHTSPOT from the current\nhost app URL.\nTHOUGHTSPOT URL params starts with a prefix \"ts-\"",
								"tags": [
									{
										"tag": "version",
										"text": "SDK: 1.14.0 | ThoughtSpot: 8.4.0.cl, 8.4.1-sw\n"
									}
								]
							},
							"parameters": [
								{
									"id": 335,
									"name": "additionalParams",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 336,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": {
												"id": 337,
												"name": "__index",
												"kind": 8192,
												"kindString": "Index signature",
												"flags": {},
												"parameters": [
													{
														"id": 338,
														"name": "key",
														"kind": 32768,
														"flags": {},
														"type": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												],
												"type": {
													"type": "union",
													"types": [
														{
															"type": "intrinsic",
															"name": "string"
														},
														{
															"type": "intrinsic",
															"name": "number"
														}
													]
												}
											}
										}
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TsEmbed.getThoughtSpotPostUrlParams"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "TsEmbed.getThoughtSpotPostUrlParams"
					}
				},
				{
					"id": 341,
					"name": "getUnderlyingFrameElement",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1143,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 342,
							"name": "getUnderlyingFrameElement",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "HTMLIFrameElement"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TsEmbed.getUnderlyingFrameElement"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "TsEmbed.getUnderlyingFrameElement"
					}
				},
				{
					"id": 351,
					"name": "hidePreRender",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1264,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 352,
							"name": "hidePreRender",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Hides the PreRender component if it is available.\nIf the component is not preRendered, it issues a warning."
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TsEmbed.hidePreRender"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "TsEmbed.hidePreRender"
					}
				},
				{
					"id": 311,
					"name": "off",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 990,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 312,
							"name": "off",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes an event listener for a particular event type.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```js\nconst errorHandler = (data) => { console.error(data); };\ntsEmbed.on(EmbedEvent.Error, errorHandler);\ntsEmbed.off(EmbedEvent.Error, errorHandler);\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 313,
									"name": "messageType",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The message type"
									},
									"type": {
										"type": "reference",
										"id": 1475,
										"name": "EmbedEvent"
									}
								},
								{
									"id": 314,
									"name": "callback",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The callback to remove"
									},
									"type": {
										"type": "reference",
										"id": 2087,
										"name": "MessageCallback"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "TsEmbed"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TsEmbed.off"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "TsEmbed.off"
					}
				},
				{
					"id": 305,
					"name": "on",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 961,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 306,
							"name": "on",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Registers an event listener to trigger an alert when the ThoughtSpot app\nsends an event of a particular message type to the host application.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```js\ntsEmbed.on(EmbedEvent.Error, (data) => {\n  console.error(data);\n});\n```"
									},
									{
										"tag": "example",
										"text": "\n```js\ntsEmbed.on(EmbedEvent.Save, (data) => {\n  console.log(\"Answer save clicked\", data);\n}, {\n  start: true // This will trigger the callback on start of save\n});\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 307,
									"name": "messageType",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The message type"
									},
									"type": {
										"type": "reference",
										"id": 1475,
										"name": "EmbedEvent"
									}
								},
								{
									"id": 308,
									"name": "callback",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "A callback as a function"
									},
									"type": {
										"type": "reference",
										"id": 2087,
										"name": "MessageCallback"
									}
								},
								{
									"id": 309,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The message options"
									},
									"type": {
										"type": "reference",
										"id": 2084,
										"name": "MessageOptions"
									},
									"defaultValue": "..."
								},
								{
									"id": 310,
									"name": "isRegisteredBySDK",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "false"
								}
							],
							"type": {
								"type": "reference",
								"name": "TsEmbed"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TsEmbed.on"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "TsEmbed.on"
					}
				},
				{
					"id": 330,
					"name": "preRender",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1087,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 331,
							"name": "preRender",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates the preRender shell"
							},
							"parameters": [
								{
									"id": 332,
									"name": "showPreRenderByDefault",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Show the preRender after render, hidden by default\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "false"
								}
							],
							"type": {
								"type": "reference",
								"name": "TsEmbed"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TsEmbed.preRender"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "TsEmbed.preRender"
					}
				},
				{
					"id": 343,
					"name": "prerenderGeneric",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1154,
							"character": 17
						}
					],
					"signatures": [
						{
							"id": 344,
							"name": "prerenderGeneric",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Prerenders a generic instance of the TS component.\nThis means without the path but with the flags already applied.\nThis is useful for prerendering the component in the background.",
								"returns": "\n",
								"tags": [
									{
										"tag": "version",
										"text": "SDK: 1.22.0"
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TsEmbed.prerenderGeneric"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "TsEmbed.prerenderGeneric"
					}
				},
				{
					"id": 217,
					"name": "render",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/search-bar.tsx",
							"line": 174,
							"character": 17
						}
					],
					"signatures": [
						{
							"id": 218,
							"name": "render",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Render the embedded ThoughtSpot search"
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 208,
										"name": "SearchBarEmbed"
									}
								],
								"name": "Promise"
							},
							"overwrites": {
								"type": "reference",
								"name": "TsEmbed.render"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "TsEmbed.render"
					}
				},
				{
					"id": 347,
					"name": "showPreRender",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1197,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 348,
							"name": "showPreRender",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Displays the PreRender component.\nIf the component is not preRendered, it attempts to create and render it.\nAlso, synchronizes the style of the PreRender component with the embedding\nelement."
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TsEmbed.showPreRender"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "TsEmbed.showPreRender"
					}
				},
				{
					"id": 349,
					"name": "syncPreRenderStyle",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1245,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 350,
							"name": "syncPreRenderStyle",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Synchronizes the style properties of the PreRender component with the embedding\nelement. This function adjusts the position, width, and height of the PreRender\ncomponent\nto match the dimensions and position of the embedding element.",
								"tags": [
									{
										"tag": "throws",
										"text": "{Error} Throws an error if the embedding element (passed as domSelector)\nis not defined or not found.\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TsEmbed.syncPreRenderStyle"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "TsEmbed.syncPreRenderStyle"
					}
				},
				{
					"id": 315,
					"name": "trigger",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1029,
							"character": 17
						}
					],
					"signatures": [
						{
							"id": 316,
							"name": "trigger",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Triggers an event to the embedded app",
								"returns": "A promise that resolves with the response from the embedded app\n"
							},
							"typeParameter": [
								{
									"id": 317,
									"name": "HostEventT",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1553,
										"name": "HostEvent"
									}
								},
								{
									"id": 318,
									"name": "PayloadT",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 319,
									"name": "messageType",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The event type"
									},
									"type": {
										"type": "reference",
										"name": "HostEventT"
									}
								},
								{
									"id": 320,
									"name": "data",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The payload to send with the message"
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "PayloadT"
											},
											{
												"type": "reference",
												"name": "HostEventT"
											}
										],
										"name": "TriggerPayload"
									},
									"defaultValue": "..."
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "PayloadT"
											},
											{
												"type": "reference",
												"name": "HostEventT"
											}
										],
										"name": "TriggerResponse"
									}
								],
								"name": "Promise"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TsEmbed.trigger"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "TsEmbed.trigger"
					}
				},
				{
					"id": 321,
					"name": "triggerUIPassThrough",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1055,
							"character": 17
						}
					],
					"signatures": [
						{
							"id": 322,
							"name": "triggerUIPassThrough",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Triggers an event to the embedded app, skipping the UI flow.",
								"returns": "- A promise that resolves with the response\nfrom the embedded app.\n"
							},
							"typeParameter": [
								{
									"id": 323,
									"name": "UIPassthroughEventT",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 2264,
										"name": "UIPassthroughEvent"
									}
								}
							],
							"parameters": [
								{
									"id": 324,
									"name": "apiName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The name of the API to be triggered."
									},
									"type": {
										"type": "reference",
										"name": "UIPassthroughEventT"
									}
								},
								{
									"id": 325,
									"name": "parameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The parameters to be passed to the API."
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "UIPassthroughEventT"
											}
										],
										"name": "UIPassthroughRequest"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "UIPassthroughEventT"
											}
										],
										"name": "UIPassthroughArrayResponse"
									}
								],
								"name": "Promise"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TsEmbed.triggerUIPassThrough"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "TsEmbed.triggerUIPassThrough"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						209
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						339,
						358,
						326,
						353,
						333,
						341,
						351,
						311,
						305,
						330,
						343,
						217,
						347,
						349,
						315,
						321
					]
				}
			],
			"sources": [
				{
					"fileName": "embed/search-bar.tsx",
					"line": 109,
					"character": 13
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "TsEmbed"
				}
			]
		},
		{
			"id": 52,
			"name": "SearchEmbed",
			"kind": 128,
			"kindString": "Class",
			"flags": {},
			"comment": {
				"shortText": "Embed ThoughtSpot search",
				"tags": [
					{
						"tag": "group",
						"text": "Embed components\n"
					}
				]
			},
			"children": [
				{
					"id": 53,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {},
					"sources": [
						{
							"fileName": "embed/search.ts",
							"line": 321,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 54,
							"name": "new SearchEmbed",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 55,
									"name": "domSelector",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 2083,
										"name": "DOMSelector"
									}
								},
								{
									"id": 56,
									"name": "viewConfig",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1796,
										"name": "SearchViewConfig"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 52,
								"name": "SearchEmbed"
							},
							"overwrites": {
								"type": "reference",
								"name": "TsEmbed.constructor"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "TsEmbed.constructor"
					}
				},
				{
					"id": 186,
					"name": "destroy",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1134,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 187,
							"name": "destroy",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Destroys the ThoughtSpot embed, and remove any nodes from the DOM.",
								"tags": [
									{
										"tag": "version",
										"text": "SDK: 1.19.1 | ThoughtSpot: *\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TsEmbed.destroy"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "TsEmbed.destroy"
					}
				},
				{
					"id": 205,
					"name": "getAnswerService",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1305,
							"character": 17
						}
					],
					"signatures": [
						{
							"id": 206,
							"name": "getAnswerService",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the answerService which can be used to make arbitrary graphql calls on top\nsession.",
								"tags": [
									{
										"tag": "version",
										"text": "SDK: 1.25.0 / ThoughtSpot 9.10.0\n"
									}
								]
							},
							"parameters": [
								{
									"id": 207,
									"name": "vizId",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "to get for a specific viz in case of a Liveboard."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 1351,
										"name": "AnswerService"
									}
								],
								"name": "Promise"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TsEmbed.getAnswerService"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "TsEmbed.getAnswerService"
					}
				},
				{
					"id": 70,
					"name": "getIFrameSrc",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/search.ts",
							"line": 472,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 71,
							"name": "getIFrameSrc",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Construct the URL of the embedded ThoughtSpot search to be\nloaded in the iframe"
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				},
				{
					"id": 173,
					"name": "getIframeSrc",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1075,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 174,
							"name": "getIframeSrc",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TsEmbed.getIframeSrc"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "TsEmbed.getIframeSrc"
					}
				},
				{
					"id": 200,
					"name": "getPreRenderIds",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1292,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 201,
							"name": "getPreRenderIds",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Retrieves unique HTML element IDs for PreRender-related elements.\nThese IDs are constructed based on the provided 'preRenderId' from 'viewConfig'.",
								"returns": "An object containing the IDs for the PreRender elements.",
								"tags": [
									{
										"tag": "property",
										"text": "{string} wrapper - The HTML element ID for the PreRender wrapper."
									},
									{
										"tag": "property",
										"text": "{string} child - The HTML element ID for the PreRender child.\n"
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 202,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 204,
											"name": "child",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": "..."
										},
										{
											"id": 203,
											"name": "wrapper",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": "..."
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												204,
												203
											]
										}
									]
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TsEmbed.getPreRenderIds"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "TsEmbed.getPreRenderIds"
					}
				},
				{
					"id": 180,
					"name": "getThoughtSpotPostUrlParams",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1104,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 181,
							"name": "getThoughtSpotPostUrlParams",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get the Post Url Params for THOUGHTSPOT from the current\nhost app URL.\nTHOUGHTSPOT URL params starts with a prefix \"ts-\"",
								"tags": [
									{
										"tag": "version",
										"text": "SDK: 1.14.0 | ThoughtSpot: 8.4.0.cl, 8.4.1-sw\n"
									}
								]
							},
							"parameters": [
								{
									"id": 182,
									"name": "additionalParams",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 183,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": {
												"id": 184,
												"name": "__index",
												"kind": 8192,
												"kindString": "Index signature",
												"flags": {},
												"parameters": [
													{
														"id": 185,
														"name": "key",
														"kind": 32768,
														"flags": {},
														"type": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												],
												"type": {
													"type": "union",
													"types": [
														{
															"type": "intrinsic",
															"name": "string"
														},
														{
															"type": "intrinsic",
															"name": "number"
														}
													]
												}
											}
										}
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TsEmbed.getThoughtSpotPostUrlParams"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "TsEmbed.getThoughtSpotPostUrlParams"
					}
				},
				{
					"id": 188,
					"name": "getUnderlyingFrameElement",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1143,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 189,
							"name": "getUnderlyingFrameElement",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "HTMLIFrameElement"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TsEmbed.getUnderlyingFrameElement"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "TsEmbed.getUnderlyingFrameElement"
					}
				},
				{
					"id": 198,
					"name": "hidePreRender",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1264,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 199,
							"name": "hidePreRender",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Hides the PreRender component if it is available.\nIf the component is not preRendered, it issues a warning."
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TsEmbed.hidePreRender"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "TsEmbed.hidePreRender"
					}
				},
				{
					"id": 158,
					"name": "off",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 990,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 159,
							"name": "off",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes an event listener for a particular event type.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```js\nconst errorHandler = (data) => { console.error(data); };\ntsEmbed.on(EmbedEvent.Error, errorHandler);\ntsEmbed.off(EmbedEvent.Error, errorHandler);\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 160,
									"name": "messageType",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The message type"
									},
									"type": {
										"type": "reference",
										"id": 1475,
										"name": "EmbedEvent"
									}
								},
								{
									"id": 161,
									"name": "callback",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The callback to remove"
									},
									"type": {
										"type": "reference",
										"id": 2087,
										"name": "MessageCallback"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "TsEmbed"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TsEmbed.off"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "TsEmbed.off"
					}
				},
				{
					"id": 152,
					"name": "on",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 961,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 153,
							"name": "on",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Registers an event listener to trigger an alert when the ThoughtSpot app\nsends an event of a particular message type to the host application.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```js\ntsEmbed.on(EmbedEvent.Error, (data) => {\n  console.error(data);\n});\n```"
									},
									{
										"tag": "example",
										"text": "\n```js\ntsEmbed.on(EmbedEvent.Save, (data) => {\n  console.log(\"Answer save clicked\", data);\n}, {\n  start: true // This will trigger the callback on start of save\n});\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 154,
									"name": "messageType",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The message type"
									},
									"type": {
										"type": "reference",
										"id": 1475,
										"name": "EmbedEvent"
									}
								},
								{
									"id": 155,
									"name": "callback",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "A callback as a function"
									},
									"type": {
										"type": "reference",
										"id": 2087,
										"name": "MessageCallback"
									}
								},
								{
									"id": 156,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The message options"
									},
									"type": {
										"type": "reference",
										"id": 2084,
										"name": "MessageOptions"
									},
									"defaultValue": "..."
								},
								{
									"id": 157,
									"name": "isRegisteredBySDK",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "false"
								}
							],
							"type": {
								"type": "reference",
								"name": "TsEmbed"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TsEmbed.on"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "TsEmbed.on"
					}
				},
				{
					"id": 177,
					"name": "preRender",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1087,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 178,
							"name": "preRender",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates the preRender shell"
							},
							"parameters": [
								{
									"id": 179,
									"name": "showPreRenderByDefault",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Show the preRender after render, hidden by default\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "false"
								}
							],
							"type": {
								"type": "reference",
								"name": "TsEmbed"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TsEmbed.preRender"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "TsEmbed.preRender"
					}
				},
				{
					"id": 190,
					"name": "prerenderGeneric",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1154,
							"character": 17
						}
					],
					"signatures": [
						{
							"id": 191,
							"name": "prerenderGeneric",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Prerenders a generic instance of the TS component.\nThis means without the path but with the flags already applied.\nThis is useful for prerendering the component in the background.",
								"returns": "\n",
								"tags": [
									{
										"tag": "version",
										"text": "SDK: 1.22.0"
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TsEmbed.prerenderGeneric"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "TsEmbed.prerenderGeneric"
					}
				},
				{
					"id": 72,
					"name": "render",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/search.ts",
							"line": 483,
							"character": 17
						}
					],
					"signatures": [
						{
							"id": 73,
							"name": "render",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Render the embedded ThoughtSpot search"
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 52,
										"name": "SearchEmbed"
									}
								],
								"name": "Promise"
							},
							"overwrites": {
								"type": "reference",
								"name": "TsEmbed.render"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "TsEmbed.render"
					}
				},
				{
					"id": 194,
					"name": "showPreRender",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1197,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 195,
							"name": "showPreRender",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Displays the PreRender component.\nIf the component is not preRendered, it attempts to create and render it.\nAlso, synchronizes the style of the PreRender component with the embedding\nelement."
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TsEmbed.showPreRender"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "TsEmbed.showPreRender"
					}
				},
				{
					"id": 196,
					"name": "syncPreRenderStyle",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1245,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 197,
							"name": "syncPreRenderStyle",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Synchronizes the style properties of the PreRender component with the embedding\nelement. This function adjusts the position, width, and height of the PreRender\ncomponent\nto match the dimensions and position of the embedding element.",
								"tags": [
									{
										"tag": "throws",
										"text": "{Error} Throws an error if the embedding element (passed as domSelector)\nis not defined or not found.\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TsEmbed.syncPreRenderStyle"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "TsEmbed.syncPreRenderStyle"
					}
				},
				{
					"id": 162,
					"name": "trigger",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1029,
							"character": 17
						}
					],
					"signatures": [
						{
							"id": 163,
							"name": "trigger",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Triggers an event to the embedded app",
								"returns": "A promise that resolves with the response from the embedded app\n"
							},
							"typeParameter": [
								{
									"id": 164,
									"name": "HostEventT",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1553,
										"name": "HostEvent"
									}
								},
								{
									"id": 165,
									"name": "PayloadT",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 166,
									"name": "messageType",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The event type"
									},
									"type": {
										"type": "reference",
										"name": "HostEventT"
									}
								},
								{
									"id": 167,
									"name": "data",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The payload to send with the message"
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "PayloadT"
											},
											{
												"type": "reference",
												"name": "HostEventT"
											}
										],
										"name": "TriggerPayload"
									},
									"defaultValue": "..."
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "PayloadT"
											},
											{
												"type": "reference",
												"name": "HostEventT"
											}
										],
										"name": "TriggerResponse"
									}
								],
								"name": "Promise"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TsEmbed.trigger"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "TsEmbed.trigger"
					}
				},
				{
					"id": 168,
					"name": "triggerUIPassThrough",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "embed/ts-embed.ts",
							"line": 1055,
							"character": 17
						}
					],
					"signatures": [
						{
							"id": 169,
							"name": "triggerUIPassThrough",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Triggers an event to the embedded app, skipping the UI flow.",
								"returns": "- A promise that resolves with the response\nfrom the embedded app.\n"
							},
							"typeParameter": [
								{
									"id": 170,
									"name": "UIPassthroughEventT",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 2264,
										"name": "UIPassthroughEvent"
									}
								}
							],
							"parameters": [
								{
									"id": 171,
									"name": "apiName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The name of the API to be triggered."
									},
									"type": {
										"type": "reference",
										"name": "UIPassthroughEventT"
									}
								},
								{
									"id": 172,
									"name": "parameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The parameters to be passed to the API."
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "UIPassthroughEventT"
											}
										],
										"name": "UIPassthroughRequest"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "UIPassthroughEventT"
											}
										],
										"name": "UIPassthroughArrayResponse"
									}
								],
								"name": "Promise"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "TsEmbed.triggerUIPassThrough"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "TsEmbed.triggerUIPassThrough"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						53
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						186,
						205,
						70,
						173,
						200,
						180,
						188,
						198,
						158,
						152,
						177,
						190,
						72,
						194,
						196,
						162,
						168
					]
				}
			],
			"sources": [
				{
					"fileName": "embed/search.ts",
					"line": 315,
					"character": 13
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "TsEmbed"
				}
			]
		},
		{
			"id": 1991,
			"name": "AppViewConfig",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "The view configuration for full app embedding.",
				"tags": [
					{
						"tag": "group",
						"text": "Embed components\n"
					}
				]
			},
			"children": [
				{
					"id": 2021,
					"name": "additionalFlags",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "This is an object (key/val) of override flags which will be applied\nto the internal embedded object. This can be used to add any\nURL flag.\nIf the same flags are passed in init, they will be overriden by the values here.\nWarning: This option is for advanced use only and is used internally\nto control embed behavior in non-regular ways. We do not publish the\nlist of supported keys and values associated with each.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  ... // other liveboard view config\n  additionalFlags: {\n       flag1: 'value1',\n       flag2: 'value2'\n    }\n});\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.9.0 | ThoughtSpot: 8.1.0.cl, 8.4.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 839,
							"character": 4
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2022,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"indexSignature": {
								"id": 2023,
								"name": "__index",
								"kind": 8192,
								"kindString": "Index signature",
								"flags": {},
								"parameters": [
									{
										"id": 2024,
										"name": "key",
										"kind": 32768,
										"flags": {},
										"type": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								],
								"type": {
									"type": "union",
									"types": [
										{
											"type": "intrinsic",
											"name": "string"
										},
										{
											"type": "intrinsic",
											"name": "number"
										},
										{
											"type": "intrinsic",
											"name": "boolean"
										}
									]
								}
							}
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.additionalFlags"
					}
				},
				{
					"id": 2054,
					"name": "collapseSearchBar",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "To set the initial state of the search bar in case of saved Answers.",
						"tags": [
							{
								"tag": "default",
								"text": "true"
							},
							{
								"tag": "version",
								"text": "SDK: 1.34.0 | ThoughtSpot: 10.3.0.cl"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  liveboardId: '123',\n  collapseSearchBar: true\n});\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1072,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.collapseSearchBar"
					}
				},
				{
					"id": 2010,
					"name": "collapseSearchBarInitially",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "To set the initial state of the search bar in case of saved-answers.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.32.0 | Thoughtspot: 10.0.0.cl"
							},
							{
								"tag": "default",
								"text": "false"
							},
							{
								"tag": "deprecated",
								"text": "Use {@link collapseSearchBar} instead\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/app.ts",
							"line": 357,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 2035,
					"name": "contextMenuTrigger",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "flag to set ContextMenu Trigger to either left or right click.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#tsEmbed', {\n   ... // other options\n   contextMenuTrigger:ContextMenuTriggerOptions.LEFT_CLICK || RIGHT_CLICK,\n})\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.21.0 | ThoughtSpot: 9.2.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 871,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"id": 1745,
						"name": "ContextMenuTriggerOptions"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.contextMenuTrigger"
					}
				},
				{
					"id": 2020,
					"name": "customizations",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Dynamic CSSUrl and customCSS to be injected in the loaded application.\nYou would also need to set `style-src` in the CSP settings.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.17.2 | ThoughtSpot: 8.4.1.sw, 8.4.0.cl"
							},
							{
								"tag": "default",
								"text": "''\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 846,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"id": 2100,
						"name": "CustomisationsInterface"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.customizations"
					}
				},
				{
					"id": 2011,
					"name": "dataPanelCustomGroupsAccordionInitialState",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "This controls the initial behaviour of custom column groups accordion.\nIt takes DataPanelCustomColumnGroupsAccordionState enum values as input.\nList of different enum values:-\n- EXPAND_ALL: Expand all the accordion initially in data panel v2.\n- COLLAPSE_ALL: Collapse all the accordions initially in data panel v2.\n- EXPAND_FIRST: Expand the first accordion and collapse the rest.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.32.0 | Thoughtspot: 10.0.0.cl"
							},
							{
								"tag": "default",
								"text": "DataPanelCustomColumnGroupsAccordionState.EXPAND_ALL"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new AppEmbed('#embed', {\n  ... // other app view config\n  dataPanelCustomGroupsAccordionInitialState:\n     DataPanelCustomColumnGroupsAccordionState.EXPAND_ALL,\n});\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/app.ts",
							"line": 376,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "DataPanelCustomColumnGroupsAccordionState"
					}
				},
				{
					"id": 2055,
					"name": "dataPanelV2",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Flag to control Data panel experience",
						"tags": [
							{
								"tag": "default",
								"text": "false"
							},
							{
								"tag": "version",
								"text": "SDK: 1.34.0 | ThoughtSpot Cloud: 10.3.0.cl"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new AppEmbed('#tsEmbed', {\n   ... // other options\n   dataPanelV2: true,\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1097,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.dataPanelV2"
					}
				},
				{
					"id": 1994,
					"name": "disableProfileAndHelp",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Control the visibility of the help (?) and profile buttons on the\nGlobal nav-bar. By default, these buttons are visible on the nav-bar.",
						"tags": [
							{
								"tag": "default",
								"text": "false"
							},
							{
								"tag": "version",
								"text": "SDK: 1.2.0 | Thoughtspot: 8.4.0.cl"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new AppEmbed('#tsEmbed', {\n   ... // other options\n   disableProfileAndHelp: true,\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/app.ts",
							"line": 139,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 2038,
					"name": "disableRedirectionLinksInNewTab",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "This flag can be used to disable links inside the embedded app,\nand disable redirection of links in a new tab.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  disableRedirectionLinksInNewTab: true\n});\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.32.1 | ThoughtSpot: 10.3.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1084,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.disableRedirectionLinksInNewTab"
					}
				},
				{
					"id": 2029,
					"name": "disabledActionReason",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The tooltip to display for disabled actions.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.6.0 | ThoughtSpot: ts8.nov.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  ... // other liveboard view config\n  disabledActions: [Action.Download, Action.Save]\n  disabledActionReason: \"Reason for disabling\",\n});\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 723,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.disabledActionReason"
					}
				},
				{
					"id": 2028,
					"name": "disabledActions",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The list of actions to disable from the primary menu, more menu\n(...), and the contextual menu. These actions will be disabled\nfor the user.\nUse this to disable actions.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.6.0 | ThoughtSpot: ts8.nov.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  ... // other liveboard view config\n  disabledActions: [Action.Download, Action.Save]\n});\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 710,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 1617,
							"name": "Action"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.disabledActions"
					}
				},
				{
					"id": 2050,
					"name": "doNotTrackPreRenderSize",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Determines whether the PreRender component should not dynamically track the size\nof its embedding element and adjust its own size accordingly.\nEnabling this option allows the PreRender component to automatically adapt\nits dimensions based on changes to the size of the embedding element.",
						"tags": [
							{
								"tag": "default",
								"text": "false"
							},
							{
								"tag": "version",
								"text": "SDK: 1.24.0 | ThoughtSpot:9.4.0.cl, 9.4.0.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\n// Disable tracking PreRender size in the configuration\nconst config = {\n  doNotTrackPreRenderSize: true,\n};\n\n// Instantiate an object with the configuration\nconst myComponent = new MyComponent(config);\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1031,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.doNotTrackPreRenderSize"
					}
				},
				{
					"id": 2012,
					"name": "enable2ColumnLayout",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "This attribute can be used to enable the two-column layout on an embedded Liveboard",
						"tags": [
							{
								"tag": "default",
								"text": "false"
							},
							{
								"tag": "version",
								"text": "SDK: 1.32.0 | ThoughtSpot:10.1.0.cl"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed-container', {\n   ... // other options\n   enable2ColumnLayout: true,\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/app.ts",
							"line": 390,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 2009,
					"name": "enableAskSage",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "enable or disable ask sage",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.29.0 | Thoughtspot: 9.12.0.cl"
							},
							{
								"tag": "default",
								"text": "false\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/app.ts",
							"line": 350,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 2056,
					"name": "enableCustomColumnGroups",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "To enable custom column groups in data panel v2",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.32.0 | ThoughtSpot: 10.0.0.cl, 10.1.0.sw"
							},
							{
								"tag": "default",
								"text": "false"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new SearchEmbed('#tsEmbed', {\n  ... // other options\n  enableCustomColumnGroups: true,\n});\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1110,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.enableCustomColumnGroups"
					}
				},
				{
					"id": 2002,
					"name": "enableSearchAssist",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "If set to true, the Search Assist feature is enabled.",
						"tags": [
							{
								"tag": "default",
								"text": "true"
							},
							{
								"tag": "version",
								"text": "SDK: 1.13.0 | ThoughtSpot: 8.5.0.cl, 8.8.1-sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new AppEmbed('#tsEmbed', {\n   ... // other options\n   enableSearchAssist: true,\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/app.ts",
							"line": 258,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 2053,
					"name": "enableV2Shell_experimental",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Enable the V2 shell. This can provide performance benefits\ndue to a lighterweight shell.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  liveboardId: '123',\n  enableV2Shell_experimental: true\n});\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.31.2 | ThoughtSpot: 10.0.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1060,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.enableV2Shell_experimental"
					}
				},
				{
					"id": 2049,
					"name": "excludeRuntimeFiltersfromURL",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Boolean to exclude runtimeFilters in the URL\nBy default it is true, this flag removes runtime filters from the URL\nwhen set to false, runtime filters will be included in the URL.",
						"text": "Irrespective of this flag, runtime filters ( if passed ) will be applied to the\nembedded view.",
						"tags": [
							{
								"tag": "default",
								"text": "false"
							},
							{
								"tag": "version",
								"text": "SDK: 1.24.0 | ThoughtSpot: 9.5.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 909,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.excludeRuntimeFiltersfromURL"
					}
				},
				{
					"id": 2052,
					"name": "excludeRuntimeParametersfromURL",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Boolean to exclude runtimeParameters from the URL\nwhen set to true, this flag removes runtime parameters from the URL.",
						"text": "Irrespective of this flag, runtime filters ( if passed ) will be applied to the\nembedded view.",
						"tags": [
							{
								"tag": "default",
								"text": "false"
							},
							{
								"tag": "version",
								"text": "SDK: 1.29.0 | ThoughtSpot: 10.1.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1046,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.excludeRuntimeParametersfromURL"
					}
				},
				{
					"id": 2042,
					"name": "frameParams",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The width and height dimensions to render an embedded\nobject inside your app.  Specify the values in pixels or percentage.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.1.0 | ThoughtSpot: ts7.may.cl, 7.2.1"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  ... // other liveboard view config\n  frameParams: {\n    width: '500px' | '50%',\n     height: '400px' | '60%',\n  },\n});\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 686,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"id": 2062,
						"name": "FrameParams"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.frameParams"
					}
				},
				{
					"id": 2003,
					"name": "fullHeight",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "If set to true, the Liveboard container dynamically resizes\naccording to the height of the Liveboard.",
						"text": "**Note**: Using fullHeight loads all visualizations\non the Liveboard simultaneously, which results in\nmultiple warehouse queries and potentially a\nlonger wait for the topmost visualizations to\ndisplay on the screen. Setting fullHeight to\n`false` fetches visualizations incrementally as\nusers scroll the page to view the charts and tables.\n",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.21.0 | ThoughtSpot: 9.4.0.cl, 9.4.0-sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new AppEmbed('#tsEmbed', {\n   ... // other options\n   fullHeight: true,\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/app.ts",
							"line": 280,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 2030,
					"name": "hiddenActions",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The list of actions to hide from the embedded.\nThis actions will be hidden from the user.\nUse this to hide an action.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.6.0 | ThoughtSpot: ts8.nov.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  ... // other liveboard view config\n  hiddenActions: [Action.Download, Action.Export]\n});\n```"
							},
							{
								"tag": "important",
								"text": "\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 738,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 1617,
							"name": "Action"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.hiddenActions"
					}
				},
				{
					"id": 2027,
					"name": "hiddenHomeLeftNavItems",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "homepageLeftNavItems : Show or hide the left navigation bar items.\nThere are 8 eight home navigation list items.\nTo hide these items, specify the string in the array.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new AppEmbed('#tsEmbed', {\n   ... // other options\n   hiddenHomeLeftNavItems : [HomeLeftNavItem.Home,HomeLeftNavItem.Answers],\n})\n```\n\n**Note**: This option does not apply to the classic homepage.\nTo access the updated modular homepage, set\n`modularHomeExperience` to `true` (available as Early Access feature in 9.12.5.cl)."
							},
							{
								"tag": "version",
								"text": "SDK: 1.28.0 | ThoughtSpot: 9.12.5.cl, 10.1.0.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 995,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 2068,
							"name": "HomeLeftNavItem"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.hiddenHomeLeftNavItems"
					}
				},
				{
					"id": 2025,
					"name": "hiddenHomepageModules",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Hide the home page modules\nFor example: hiddenHomepageModules = [HomepageModule.MyLibrary]",
						"text": "**Note**: This option does not apply to the classic homepage.\nTo access the updated modular homepage, set\n`modularHomeExperience` to `true` (available as Early Access feature in 9.12.5.cl).",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.28.0 | ThoughtSpot: 9.12.5.cl, 10.1.0.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new AppEmbed('#tsEmbed', {\n   ... // other options\n   hiddenHomepageModules : [HomepageModule.Favorite,HomepageModule.Learning],\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 942,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 2076,
							"name": "HomepageModule"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.hiddenHomepageModules"
					}
				},
				{
					"id": 2032,
					"name": "hiddenTabs",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The list of tab IDs to hide from the embedded.\nThis Tabs will be hidden from their respective LBs.\nUse this to hide an tabID.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  ... // other liveboard view config\n  hiddenTabs: [\n'430496d6-6903-4601-937e-2c691821af3c',\n 'f547ec54-2a37-4516-a222-2b06719af726']\n});\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.26.0 | ThoughtSpot: 9.7.0.cl, 10.1.0.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 925,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.hiddenTabs"
					}
				},
				{
					"id": 1995,
					"name": "hideApplicationSwitcher",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Control the visibility of the application switcher button on the nav-bar.\nBy default, the application switcher is shown.",
						"text": "**Note**: This option does not apply to the classic homepage.\nTo access the updated modular homepage, set\n`modularHomeExperience` to `true` (available as Early Access feature in 9.12.5.cl).",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.28.0 | Thoughtspot: 9.12.5.cl"
							},
							{
								"tag": "default",
								"text": "false"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new AppEmbed('#tsEmbed', {\n   ... // other options\n   hideApplicationSwitcher : true,\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/app.ts",
							"line": 157,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1993,
					"name": "hideHomepageLeftNav",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Control the visibility of the left navigation bar on the Homepage.\nIf showPrimaryNavbar is true, that is, if the Global and Homepage\nnav-bars are visible, this flag will only hide the homepage left nav-bar.\nThe showPrimaryNavbar flag takes precedence over the hideHomepageLeftNav.",
						"text": "**Note**: This option does not apply to the classic homepage.\nTo access the updated modular homepage, set\n`modularHomeExperience` to `true` (available as Early Access feature in 9.12.5.cl).",
						"tags": [
							{
								"tag": "default",
								"text": "false"
							},
							{
								"tag": "version",
								"text": "SDK: 1.28.0 | Thoughtspot: 9.12.5.cl"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new AppEmbed('#tsEmbed', {\n   ... // other options\n   hideHomepageLeftNav : true,\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/app.ts",
							"line": 125,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 2017,
					"name": "hideIrrelevantChipsInLiveboardTabs",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "This flag is used to enable/disable hide irrelevant filters in Liveboard tab",
						"tags": [
							{
								"tag": "default",
								"text": "false"
							},
							{
								"tag": "version",
								"text": "SDK: 1.36.0 | ThoughtSpot:10.6.0.cl"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new AppEmbed('#embed-container', {\n   ... // other options\n   hideIrrelevantChipsInLiveboardTabs: true,\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/app.ts",
							"line": 442,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 2004,
					"name": "hideLiveboardHeader",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Show or hide Liveboard header",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.26.0 | Thoughtspot: 9.7.0.cl"
							},
							{
								"tag": "default",
								"text": "false"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new AppEmbed('#tsEmbed', {\n   ... // other options\n   hideLiveboardHeader : true,\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/app.ts",
							"line": 293,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 2000,
					"name": "hideObjects",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The array of GUIDs to be hidden",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.11.0 | ThoughtSpot: 8.3.0.cl, 8.4.1-sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new AppEmbed('#tsEmbed', {\n   ... // other options\n   hideObjects: [\n      '430496d6-6903-4601-937e-2c691821af3c',\n      'f547ec54-2a37-4516-a222-2b06719af726'\n    ]\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/app.ts",
							"line": 238,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				},
				{
					"id": 1996,
					"name": "hideOrgSwitcher",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Control the visibility of the Org switcher button on the nav-bar.\nBy default, the Org switcher button is shown.",
						"text": "**Note**: This option does not apply to the classic homepage.\nTo access the updated modular homepage, set\n`modularHomeExperience` to `true` (available as Early Access feature in 9.12.5.cl).",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.28.0 | Thoughtspot: 9.12.5.cl"
							},
							{
								"tag": "default",
								"text": "true"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new AppEmbed('#tsEmbed', {\n   ... // other options\n   hideOrgSwitcher : true,\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/app.ts",
							"line": 175,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 2014,
					"name": "homePageSearchBarMode",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Flag to use home page search bar mode",
						"tags": [
							{
								"tag": "version",
								"text": "SDK : 1.33.0 | Thoughtspot : 10.3.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/app.ts",
							"line": 400,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"id": 2237,
						"name": "HomePageSearchBarMode"
					}
				},
				{
					"id": 2047,
					"name": "insertAsSibling",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Insert as a sibling of the target container, instead of appending to a\nchild inside it.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.2.0 | ThoughtSpot: 9.0.0.cl, 9.0.0.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed-container', {\n   ... // other options\n   insertAsSibling:true,\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 859,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.insertAsSibling"
					}
				},
				{
					"id": 2015,
					"name": "isLiveboardCompactHeaderEnabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "This flag can be used to enable the compact header in Liveboard",
						"tags": [
							{
								"tag": "default",
								"text": "false"
							},
							{
								"tag": "version",
								"text": "SDK: 1.35.0 | ThoughtSpot:10.3.0.cl"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new AppEmbed('#embed-container', {\n   ... // other options\n   isLiveboardCompactHeaderEnabled: true,\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/app.ts",
							"line": 414,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 2008,
					"name": "isLiveboardHeaderSticky",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Boolean to control if Liveboard header is sticky or not.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new AppEmbed('#embed', {\n  ... // other app view config\n  isLiveboardHeaderSticky: true,\n});\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.26.0 | Thoughtspot: 9.7.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/app.ts",
							"line": 344,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 2013,
					"name": "isOnBeforeGetVizDataInterceptEnabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Flag that allows using `EmbedEvent.OnBeforeGetVizDataIntercept`.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK : 1.29.0 | Thoughtspot : 10.1.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/app.ts",
							"line": 395,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 2019,
					"name": "isUnifiedSearchExperienceEnabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "This flag is used to enable unified search experience for full app embed.",
						"tags": [
							{
								"tag": "default",
								"text": "true"
							},
							{
								"tag": "version",
								"text": "SDK: 1.34.0 | ThoughtSpot:10.5.0.cl"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new AppEmbed('#embed-container', {\n   ... // other options\n   isUnifiedSearchExperienceEnabled: true,\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/app.ts",
							"line": 470,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 2036,
					"name": "linkOverride",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Flag to override openNew tab context menu link",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.21.0 | ThoughtSpot: 9.2.0.cl"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed-container', {\n   ... // other options\n   linkOverride:false,\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 883,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.linkOverride"
					}
				},
				{
					"id": 2034,
					"name": "locale",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The locale/language to use for the embedded view.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.9.4 | ThoughtSpot 8.1.0.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed-container', {\n   ... // other options\n   locale:'en',\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 818,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.locale"
					}
				},
				{
					"id": 2007,
					"name": "modularHomeExperience",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Flag to control new Modular Home experience.",
						"tags": [
							{
								"tag": "default",
								"text": "false"
							},
							{
								"tag": "version",
								"text": "SDK: 1.28.0 | Thoughtspot: 9.12.5.cl"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new AppEmbed('#tsEmbed', {\n   ... // other options\n   modularHomeExperience : true,\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/app.ts",
							"line": 332,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 2039,
					"name": "overrideOrgId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Overrides an Org context for embedding application users.\nThis parameter allows a user authenticated to one Org to view the\nobjects from another Org.\nThe `overrideOrgId` setting is honoured only if the\nPer Org URL feature is enabled on your ThoughtSpot instance.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  ... // other options\n  overrideOrgId: 142536\n});\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.35.0 | ThoughtSpot: 10.5.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1126,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.overrideOrgId"
					}
				},
				{
					"id": 1998,
					"name": "pageId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The application page to set as the start page\nin the embedded view.",
						"text": "Use this to open to particular page in the app. To open to a specific\npath within the app, use the `path` attribute which is more flexible.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.1.0 | Thoughtspot: 9.4.0.cl"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new AppEmbed('#tsEmbed', {\n   ... // other options\n   pageId : Page.Answers | Page.Data\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/app.ts",
							"line": 209,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"id": 1434,
						"name": "Page"
					}
				},
				{
					"id": 1997,
					"name": "path",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "A URL path to the embedded application page\nIf both path and pageId attributes are defined, the path definition\ntakes precedence. This is the path post the `#/` in the URL of the standalone\nThoughtSpot app. Use this to open the embedded view to a specific path.",
						"text": "For eg, if you want the component to open to a specific Liveboard\nyou could set the path to `pinboard/<liveboardId>/tab/<tabId>`.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.1.0 | Thoughtspot: 9.4.0.cl"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new AppEmbed('#tsEmbed', {\n   ... // other options\n   path:\"pinboard/1234/tab/7464\"\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/app.ts",
							"line": 193,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2040,
					"name": "preRenderId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "PreRender id to be used for PreRendering the embed.\nUse PreRender to render the embed in the background and then\nshow or hide the rendered embed using showPreRender or hidePreRender respectively.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  ... // other liveboard view config\n  preRenderId: \"preRenderId-123\"\n});\nembed.showPreRender();\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.25.0 | ThoughtSpot: 9.6.0.cl, 9.8.0.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1010,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.preRenderId"
					}
				},
				{
					"id": 2026,
					"name": "reorderedHomepageModules",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "reordering the home page modules\neg: reorderedHomepageModules = [HomepageModule.MyLibrary, HomepageModule.Watchlist]",
						"text": "**Note**: This option does not apply to the classic homepage.\nTo access the updated modular homepage, set\n`modularHomeExperience` to `true` (available as Early Access feature in 9.12.5.cl).",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.28.0| ThoughtSpot: 9.12.5.cl, 10.1.0.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new AppEmbed('#tsEmbed', {\n   ... // other options\n   reorderedHomepageModules:[HomepageModule.Favorite,HomepageModule.MyLibrary]\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 959,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 2076,
							"name": "HomepageModule"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.reorderedHomepageModules"
					}
				},
				{
					"id": 2045,
					"name": "runtimeFilters",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The list of runtime filters to apply to a search answer,\nvisualization, or Liveboard.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.9.4 | ThoughtSpot 8.1.0.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed-container', {\n   ... // other options\n   runtimeFilters: [\n          {\n            columnName: 'value',\n             operator: RuntimeFilterOp.EQ,\n            values: ['string' | 123 | true],\n          },\n      ],\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 788,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 1455,
							"name": "RuntimeFilter"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.runtimeFilters"
					}
				},
				{
					"id": 2046,
					"name": "runtimeParameters",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The list of parameter override to apply to a search answer,\nvisualization, or Liveboard.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK : 1.25.0 | ThoughtSpot: 9.2.0.cl, 9.5.0.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed-container', {\n   ... // other options\n   runtimeParameters: [\n    {\n      name: 'value',\n      value: 'string' | 123 | true,\n    },\n  ],\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 806,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 2211,
							"name": "RuntimeParameter"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.runtimeParameters"
					}
				},
				{
					"id": 2033,
					"name": "showAlerts",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Show alert messages and toast messages in the embedded\nview in full app embed.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.11.0 | ThoughtSpot: 8.3.0.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new AppEmbed('#embed-container', {\n   ... // other options\n   showAlerts:true,\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 769,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.showAlerts"
					}
				},
				{
					"id": 2006,
					"name": "showLiveboardDescription",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Show or hide Liveboard description",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.26.0 | Thoughtspot: 9.7.0.cl"
							},
							{
								"tag": "default",
								"text": "false"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new AppEmbed('#tsEmbed', {\n   ... // other options\n   showLiveboardDescription:true,\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/app.ts",
							"line": 319,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 2018,
					"name": "showLiveboardReverifyBanner",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "This flag can be used to show or hide the re-verify banner on the Liveboard compact header",
						"tags": [
							{
								"tag": "default",
								"text": "true"
							},
							{
								"tag": "version",
								"text": "SDK: 1.35.0 | ThoughtSpot:10.4.0.cl"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new AppEmbed('#embed-container', {\n   ... // other options\n   showLiveboardReverifyBanner: true,\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/app.ts",
							"line": 456,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 2005,
					"name": "showLiveboardTitle",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Show or hide Liveboard title",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.26.0 | Thoughtspot: 9.7.0.cl"
							},
							{
								"tag": "default",
								"text": "false"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new AppEmbed('#tsEmbed', {\n   ... // other options\n   showLiveboardTitle:true,\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/app.ts",
							"line": 306,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 2016,
					"name": "showLiveboardVerifiedBadge",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "This flag can be used to show or hide the Liveboard verified icon in the compact header.",
						"tags": [
							{
								"tag": "default",
								"text": "true"
							},
							{
								"tag": "version",
								"text": "SDK: 1.35.0 | ThoughtSpot:10.4.0.cl"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new AppEmbed('#embed-container', {\n   ... // other options\n   showLiveboardVerifiedBadge: true,\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/app.ts",
							"line": 428,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1992,
					"name": "showPrimaryNavbar",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "If true, the top navigation bar within the ThoughtSpot app\nis displayed. By default, the navigation bar is hidden.\nThis flag also controls the homepage left navigation bar.",
						"tags": [
							{
								"tag": "default",
								"text": "true"
							},
							{
								"tag": "version",
								"text": "SDK: 1.2.0 | Thoughtspot: 8.4.0.cl"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new AppEmbed('#tsEmbed', {\n   ... // other options\n   showPrimaryNavbar:true,\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/app.ts",
							"line": 105,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1999,
					"name": "tag",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "This puts a filter tag on the application. All metadata lists in the\napplication, such as Liveboards and answers, would be filtered by this\ntag.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.1.0 | Thoughtspot: 9.4.0.cl"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new AppEmbed('#tsEmbed', {\n   ... // other options\n   tag:'value',\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/app.ts",
							"line": 223,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2031,
					"name": "visibleActions",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The list of actions to display from the primary menu, more menu\n(...), and the contextual menu. These will be only actions that\nare visible to the user.\nUse this to hide all actions except the ones you want to show.",
						"text": "Use either this or hiddenActions.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.6.0 | ThoughtSpot: ts8.nov.cl, 8.4.1.sw"
							},
							{
								"tag": "important",
								"text": ""
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  ... // other liveboard view config\n  visibleActions: [Action.Download, Action.Export]\n});\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 756,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 1617,
							"name": "Action"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.visibleActions"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2021,
						2054,
						2010,
						2035,
						2020,
						2011,
						2055,
						1994,
						2038,
						2029,
						2028,
						2050,
						2012,
						2009,
						2056,
						2002,
						2053,
						2049,
						2052,
						2042,
						2003,
						2030,
						2027,
						2025,
						2032,
						1995,
						1993,
						2017,
						2004,
						2000,
						1996,
						2014,
						2047,
						2015,
						2008,
						2013,
						2019,
						2036,
						2034,
						2007,
						2039,
						1998,
						1997,
						2040,
						2026,
						2045,
						2046,
						2033,
						2006,
						2018,
						2005,
						2016,
						1992,
						1999,
						2031
					]
				}
			],
			"sources": [
				{
					"fileName": "embed/app.ts",
					"line": 90,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"name": "ViewConfig"
						},
						{
							"type": "literal",
							"value": "visibleTabs"
						}
					],
					"name": "Omit"
				}
			]
		},
		{
			"id": 1298,
			"name": "AuthEventEmitter",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Event emitter returned from {@link init}.",
				"tags": [
					{
						"tag": "group",
						"text": "Authentication / Init\n"
					}
				]
			},
			"children": [
				{
					"id": 1335,
					"name": "emit",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"signatures": [
						{
							"id": 1336,
							"name": "emit",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Trigger an event on the emitter returned from init."
							},
							"parameters": [
								{
									"id": 1337,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1297,
										"name": "TRIGGER_SSO_POPUP"
									}
								},
								{
									"id": 1338,
									"name": "args",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				},
				{
					"id": 1339,
					"name": "off",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"signatures": [
						{
							"id": 1340,
							"name": "off",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Remove listener from the emitter returned from init."
							},
							"parameters": [
								{
									"id": 1341,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"id": 1290,
										"name": "AuthStatus"
									}
								},
								{
									"id": 1342,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1343,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1344,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1345,
															"name": "args",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 1346,
									"name": "context",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 1347,
									"name": "once",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1298,
								"name": "AuthEventEmitter"
							}
						}
					]
				},
				{
					"id": 1299,
					"name": "on",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"signatures": [
						{
							"id": 1300,
							"name": "on",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Register a listener on Auth failure."
							},
							"parameters": [
								{
									"id": 1301,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"id": 1291,
										"name": "FAILURE"
									}
								},
								{
									"id": 1302,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "\n"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1303,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1304,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1305,
															"name": "failureType",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"id": 1285,
																"name": "AuthFailureType"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1298,
								"name": "AuthEventEmitter"
							}
						},
						{
							"id": 1306,
							"name": "on",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Register a listener on Auth SDK success."
							},
							"parameters": [
								{
									"id": 1307,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 1292,
												"name": "SDK_SUCCESS"
											},
											{
												"type": "reference",
												"id": 1294,
												"name": "LOGOUT"
											},
											{
												"type": "reference",
												"id": 1295,
												"name": "WAITING_FOR_POPUP"
											}
										]
									}
								},
								{
									"id": 1308,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "\n"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1309,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1310,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1298,
								"name": "AuthEventEmitter"
							}
						},
						{
							"id": 1311,
							"name": "on",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1312,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1293,
										"name": "SUCCESS"
									}
								},
								{
									"id": 1313,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1314,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1315,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1316,
															"name": "sessionInfo",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1298,
								"name": "AuthEventEmitter"
							}
						}
					]
				},
				{
					"id": 1317,
					"name": "once",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"signatures": [
						{
							"id": 1318,
							"name": "once",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1319,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1291,
										"name": "FAILURE"
									}
								},
								{
									"id": 1320,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1321,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1322,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1323,
															"name": "failureType",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"id": 1285,
																"name": "AuthFailureType"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1298,
								"name": "AuthEventEmitter"
							}
						},
						{
							"id": 1324,
							"name": "once",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1325,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 1292,
												"name": "SDK_SUCCESS"
											},
											{
												"type": "reference",
												"id": 1294,
												"name": "LOGOUT"
											},
											{
												"type": "reference",
												"id": 1295,
												"name": "WAITING_FOR_POPUP"
											}
										]
									}
								},
								{
									"id": 1326,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1327,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1328,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1298,
								"name": "AuthEventEmitter"
							}
						},
						{
							"id": 1329,
							"name": "once",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1330,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1293,
										"name": "SUCCESS"
									}
								},
								{
									"id": 1331,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1332,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 1333,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1334,
															"name": "sessionInfo",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1298,
								"name": "AuthEventEmitter"
							}
						}
					]
				},
				{
					"id": 1348,
					"name": "removeAllListeners",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"signatures": [
						{
							"id": 1349,
							"name": "removeAllListeners",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Remove all the event listeners"
							},
							"parameters": [
								{
									"id": 1350,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "\n"
									},
									"type": {
										"type": "reference",
										"id": 1290,
										"name": "AuthStatus"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1298,
								"name": "AuthEventEmitter"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						1335,
						1339,
						1299,
						1317,
						1348
					]
				}
			],
			"sources": [
				{
					"fileName": "auth.ts",
					"line": 78,
					"character": 17
				}
			]
		},
		{
			"id": 1056,
			"name": "BodylessConversationViewConfig",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Configuration for bodyless conversation options.",
				"tags": [
					{
						"tag": "group",
						"text": "Embed components\n"
					}
				]
			},
			"children": [
				{
					"id": 1070,
					"name": "additionalFlags",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "This is an object (key/val) of override flags which will be applied\nto the internal embedded object. This can be used to add any\nURL flag.\nIf the same flags are passed in init, they will be overriden by the values here.\nWarning: This option is for advanced use only and is used internally\nto control embed behavior in non-regular ways. We do not publish the\nlist of supported keys and values associated with each.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  ... // other liveboard view config\n  additionalFlags: {\n       flag1: 'value1',\n       flag2: 'value2'\n    }\n});\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.9.0 | ThoughtSpot: 8.1.0.cl, 8.4.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 839,
							"character": 4
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1071,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"indexSignature": {
								"id": 1072,
								"name": "__index",
								"kind": 8192,
								"kindString": "Index signature",
								"flags": {},
								"parameters": [
									{
										"id": 1073,
										"name": "key",
										"kind": 32768,
										"flags": {},
										"type": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								],
								"type": {
									"type": "union",
									"types": [
										{
											"type": "intrinsic",
											"name": "string"
										},
										{
											"type": "intrinsic",
											"name": "number"
										},
										{
											"type": "intrinsic",
											"name": "boolean"
										}
									]
								}
							}
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ViewConfig.additionalFlags"
					}
				},
				{
					"id": 1091,
					"name": "collapseSearchBar",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "To set the initial state of the search bar in case of saved Answers.",
						"tags": [
							{
								"tag": "default",
								"text": "true"
							},
							{
								"tag": "version",
								"text": "SDK: 1.34.0 | ThoughtSpot: 10.3.0.cl"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  liveboardId: '123',\n  collapseSearchBar: true\n});\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1072,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ViewConfig.collapseSearchBar"
					}
				},
				{
					"id": 1076,
					"name": "contextMenuTrigger",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "flag to set ContextMenu Trigger to either left or right click.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#tsEmbed', {\n   ... // other options\n   contextMenuTrigger:ContextMenuTriggerOptions.LEFT_CLICK || RIGHT_CLICK,\n})\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.21.0 | ThoughtSpot: 9.2.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 871,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"id": 1745,
						"name": "ContextMenuTriggerOptions"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ViewConfig.contextMenuTrigger"
					}
				},
				{
					"id": 1074,
					"name": "customizations",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Dynamic CSSUrl and customCSS to be injected in the loaded application.\nYou would also need to set `style-src` in the CSP settings.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.17.2 | ThoughtSpot: 8.4.1.sw, 8.4.0.cl"
							},
							{
								"tag": "default",
								"text": "''\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 846,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"id": 2100,
						"name": "CustomisationsInterface"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ViewConfig.customizations"
					}
				},
				{
					"id": 1093,
					"name": "dataPanelV2",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Flag to control Data panel experience",
						"tags": [
							{
								"tag": "default",
								"text": "false"
							},
							{
								"tag": "version",
								"text": "SDK: 1.34.0 | ThoughtSpot Cloud: 10.3.0.cl"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new AppEmbed('#tsEmbed', {\n   ... // other options\n   dataPanelV2: true,\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1097,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ViewConfig.dataPanelV2"
					}
				},
				{
					"id": 1092,
					"name": "disableRedirectionLinksInNewTab",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "This flag can be used to disable links inside the embedded app,\nand disable redirection of links in a new tab.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  disableRedirectionLinksInNewTab: true\n});\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.32.1 | ThoughtSpot: 10.3.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1084,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ViewConfig.disableRedirectionLinksInNewTab"
					}
				},
				{
					"id": 1063,
					"name": "disabledActionReason",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The tooltip to display for disabled actions.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.6.0 | ThoughtSpot: ts8.nov.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  ... // other liveboard view config\n  disabledActions: [Action.Download, Action.Save]\n  disabledActionReason: \"Reason for disabling\",\n});\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 723,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ViewConfig.disabledActionReason"
					}
				},
				{
					"id": 1062,
					"name": "disabledActions",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The list of actions to disable from the primary menu, more menu\n(...), and the contextual menu. These actions will be disabled\nfor the user.\nUse this to disable actions.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.6.0 | ThoughtSpot: ts8.nov.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  ... // other liveboard view config\n  disabledActions: [Action.Download, Action.Save]\n});\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 710,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 1617,
							"name": "Action"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ViewConfig.disabledActions"
					}
				},
				{
					"id": 1087,
					"name": "doNotTrackPreRenderSize",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Determines whether the PreRender component should not dynamically track the size\nof its embedding element and adjust its own size accordingly.\nEnabling this option allows the PreRender component to automatically adapt\nits dimensions based on changes to the size of the embedding element.",
						"tags": [
							{
								"tag": "default",
								"text": "false"
							},
							{
								"tag": "version",
								"text": "SDK: 1.24.0 | ThoughtSpot:9.4.0.cl, 9.4.0.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\n// Disable tracking PreRender size in the configuration\nconst config = {\n  doNotTrackPreRenderSize: true,\n};\n\n// Instantiate an object with the configuration\nconst myComponent = new MyComponent(config);\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1031,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ViewConfig.doNotTrackPreRenderSize"
					}
				},
				{
					"id": 1094,
					"name": "enableCustomColumnGroups",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "To enable custom column groups in data panel v2",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.32.0 | ThoughtSpot: 10.0.0.cl, 10.1.0.sw"
							},
							{
								"tag": "default",
								"text": "false"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new SearchEmbed('#tsEmbed', {\n  ... // other options\n  enableCustomColumnGroups: true,\n});\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1110,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ViewConfig.enableCustomColumnGroups"
					}
				},
				{
					"id": 1090,
					"name": "enableV2Shell_experimental",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Enable the V2 shell. This can provide performance benefits\ndue to a lighterweight shell.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  liveboardId: '123',\n  enableV2Shell_experimental: true\n});\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.31.2 | ThoughtSpot: 10.0.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1060,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ViewConfig.enableV2Shell_experimental"
					}
				},
				{
					"id": 1080,
					"name": "excludeRuntimeFiltersfromURL",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Boolean to exclude runtimeFilters in the URL\nBy default it is true, this flag removes runtime filters from the URL\nwhen set to false, runtime filters will be included in the URL.",
						"text": "Irrespective of this flag, runtime filters ( if passed ) will be applied to the\nembedded view.",
						"tags": [
							{
								"tag": "default",
								"text": "false"
							},
							{
								"tag": "version",
								"text": "SDK: 1.24.0 | ThoughtSpot: 9.5.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 909,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ViewConfig.excludeRuntimeFiltersfromURL"
					}
				},
				{
					"id": 1089,
					"name": "excludeRuntimeParametersfromURL",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Boolean to exclude runtimeParameters from the URL\nwhen set to true, this flag removes runtime parameters from the URL.",
						"text": "Irrespective of this flag, runtime filters ( if passed ) will be applied to the\nembedded view.",
						"tags": [
							{
								"tag": "default",
								"text": "false"
							},
							{
								"tag": "version",
								"text": "SDK: 1.29.0 | ThoughtSpot: 10.1.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1046,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ViewConfig.excludeRuntimeParametersfromURL"
					}
				},
				{
					"id": 1059,
					"name": "frameParams",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The width and height dimensions to render an embedded\nobject inside your app.  Specify the values in pixels or percentage.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.1.0 | ThoughtSpot: ts7.may.cl, 7.2.1"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  ... // other liveboard view config\n  frameParams: {\n    width: '500px' | '50%',\n     height: '400px' | '60%',\n  },\n});\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 686,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"id": 2062,
						"name": "FrameParams"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ViewConfig.frameParams"
					}
				},
				{
					"id": 1064,
					"name": "hiddenActions",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The list of actions to hide from the embedded.\nThis actions will be hidden from the user.\nUse this to hide an action.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.6.0 | ThoughtSpot: ts8.nov.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  ... // other liveboard view config\n  hiddenActions: [Action.Download, Action.Export]\n});\n```"
							},
							{
								"tag": "important",
								"text": "\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 738,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 1617,
							"name": "Action"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ViewConfig.hiddenActions"
					}
				},
				{
					"id": 1085,
					"name": "hiddenHomeLeftNavItems",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "homepageLeftNavItems : Show or hide the left navigation bar items.\nThere are 8 eight home navigation list items.\nTo hide these items, specify the string in the array.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new AppEmbed('#tsEmbed', {\n   ... // other options\n   hiddenHomeLeftNavItems : [HomeLeftNavItem.Home,HomeLeftNavItem.Answers],\n})\n```\n\n**Note**: This option does not apply to the classic homepage.\nTo access the updated modular homepage, set\n`modularHomeExperience` to `true` (available as Early Access feature in 9.12.5.cl)."
							},
							{
								"tag": "version",
								"text": "SDK: 1.28.0 | ThoughtSpot: 9.12.5.cl, 10.1.0.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 995,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 2068,
							"name": "HomeLeftNavItem"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ViewConfig.hiddenHomeLeftNavItems"
					}
				},
				{
					"id": 1082,
					"name": "hiddenHomepageModules",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Hide the home page modules\nFor example: hiddenHomepageModules = [HomepageModule.MyLibrary]",
						"text": "**Note**: This option does not apply to the classic homepage.\nTo access the updated modular homepage, set\n`modularHomeExperience` to `true` (available as Early Access feature in 9.12.5.cl).",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.28.0 | ThoughtSpot: 9.12.5.cl, 10.1.0.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new AppEmbed('#tsEmbed', {\n   ... // other options\n   hiddenHomepageModules : [HomepageModule.Favorite,HomepageModule.Learning],\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 942,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 2076,
							"name": "HomepageModule"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ViewConfig.hiddenHomepageModules"
					}
				},
				{
					"id": 1081,
					"name": "hiddenTabs",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The list of tab IDs to hide from the embedded.\nThis Tabs will be hidden from their respective LBs.\nUse this to hide an tabID.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  ... // other liveboard view config\n  hiddenTabs: [\n'430496d6-6903-4601-937e-2c691821af3c',\n 'f547ec54-2a37-4516-a222-2b06719af726']\n});\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.26.0 | ThoughtSpot: 9.7.0.cl, 10.1.0.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 925,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ViewConfig.hiddenTabs"
					}
				},
				{
					"id": 1075,
					"name": "insertAsSibling",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Insert as a sibling of the target container, instead of appending to a\nchild inside it.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.2.0 | ThoughtSpot: 9.0.0.cl, 9.0.0.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed-container', {\n   ... // other options\n   insertAsSibling:true,\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 859,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ViewConfig.insertAsSibling"
					}
				},
				{
					"id": 1077,
					"name": "linkOverride",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Flag to override openNew tab context menu link",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.21.0 | ThoughtSpot: 9.2.0.cl"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed-container', {\n   ... // other options\n   linkOverride:false,\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 883,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ViewConfig.linkOverride"
					}
				},
				{
					"id": 1069,
					"name": "locale",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The locale/language to use for the embedded view.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.9.4 | ThoughtSpot 8.1.0.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed-container', {\n   ... // other options\n   locale:'en',\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 818,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ViewConfig.locale"
					}
				},
				{
					"id": 1095,
					"name": "overrideOrgId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Overrides an Org context for embedding application users.\nThis parameter allows a user authenticated to one Org to view the\nobjects from another Org.\nThe `overrideOrgId` setting is honoured only if the\nPer Org URL feature is enabled on your ThoughtSpot instance.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  ... // other options\n  overrideOrgId: 142536\n});\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.35.0 | ThoughtSpot: 10.5.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1126,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ViewConfig.overrideOrgId"
					}
				},
				{
					"id": 1086,
					"name": "preRenderId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "PreRender id to be used for PreRendering the embed.\nUse PreRender to render the embed in the background and then\nshow or hide the rendered embed using showPreRender or hidePreRender respectively.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  ... // other liveboard view config\n  preRenderId: \"preRenderId-123\"\n});\nembed.showPreRender();\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.25.0 | ThoughtSpot: 9.6.0.cl, 9.8.0.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1010,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ViewConfig.preRenderId"
					}
				},
				{
					"id": 1083,
					"name": "reorderedHomepageModules",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "reordering the home page modules\neg: reorderedHomepageModules = [HomepageModule.MyLibrary, HomepageModule.Watchlist]",
						"text": "**Note**: This option does not apply to the classic homepage.\nTo access the updated modular homepage, set\n`modularHomeExperience` to `true` (available as Early Access feature in 9.12.5.cl).",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.28.0| ThoughtSpot: 9.12.5.cl, 10.1.0.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new AppEmbed('#tsEmbed', {\n   ... // other options\n   reorderedHomepageModules:[HomepageModule.Favorite,HomepageModule.MyLibrary]\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 959,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 2076,
							"name": "HomepageModule"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ViewConfig.reorderedHomepageModules"
					}
				},
				{
					"id": 1067,
					"name": "runtimeFilters",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The list of runtime filters to apply to a search answer,\nvisualization, or Liveboard.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.9.4 | ThoughtSpot 8.1.0.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed-container', {\n   ... // other options\n   runtimeFilters: [\n          {\n            columnName: 'value',\n             operator: RuntimeFilterOp.EQ,\n            values: ['string' | 123 | true],\n          },\n      ],\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 788,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 1455,
							"name": "RuntimeFilter"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ViewConfig.runtimeFilters"
					}
				},
				{
					"id": 1068,
					"name": "runtimeParameters",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The list of parameter override to apply to a search answer,\nvisualization, or Liveboard.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK : 1.25.0 | ThoughtSpot: 9.2.0.cl, 9.5.0.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed-container', {\n   ... // other options\n   runtimeParameters: [\n    {\n      name: 'value',\n      value: 'string' | 123 | true,\n    },\n  ],\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 806,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 2211,
							"name": "RuntimeParameter"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ViewConfig.runtimeParameters"
					}
				},
				{
					"id": 1066,
					"name": "showAlerts",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Show alert messages and toast messages in the embedded\nview in full app embed.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.11.0 | ThoughtSpot: 8.3.0.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new AppEmbed('#embed-container', {\n   ... // other options\n   showAlerts:true,\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 769,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ViewConfig.showAlerts"
					}
				},
				{
					"id": 1065,
					"name": "visibleActions",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The list of actions to display from the primary menu, more menu\n(...), and the contextual menu. These will be only actions that\nare visible to the user.\nUse this to hide all actions except the ones you want to show.",
						"text": "Use either this or hiddenActions.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.6.0 | ThoughtSpot: ts8.nov.cl, 8.4.1.sw"
							},
							{
								"tag": "important",
								"text": ""
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  ... // other liveboard view config\n  visibleActions: [Action.Download, Action.Export]\n});\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 756,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 1617,
							"name": "Action"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ViewConfig.visibleActions"
					}
				},
				{
					"id": 1084,
					"name": "visibleTabs",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The list of tab IDs to show in the embedded Liveboard.\nOnly the tabs specified in the array will be shown in the Liveboard.",
						"text": "Use either `visibleTabs` or `hiddenTabs`.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.26.0 | ThoughtSpot: 9.7.0.cl, 10.1.0.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed-container', {\n   ... // other options\n   visibleTabs: [\n      '430496d6-6903-4601-937e-2c691821af3c',\n      'f547ec54-2a37-4516-a222-2b06719af726'\n    ]\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 977,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ViewConfig.visibleTabs"
					}
				},
				{
					"id": 1057,
					"name": "worksheetId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The ID of the worksheet to use for the conversation."
					},
					"sources": [
						{
							"fileName": "embed/bodyless-conversation.ts",
							"line": 15,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1070,
						1091,
						1076,
						1074,
						1093,
						1092,
						1063,
						1062,
						1087,
						1094,
						1090,
						1080,
						1089,
						1059,
						1064,
						1085,
						1082,
						1081,
						1075,
						1077,
						1069,
						1095,
						1086,
						1083,
						1067,
						1068,
						1066,
						1065,
						1084,
						1057
					]
				}
			],
			"sources": [
				{
					"fileName": "embed/bodyless-conversation.ts",
					"line": 11,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "ViewConfig"
				}
			]
		},
		{
			"id": 1242,
			"name": "ConversationViewConfig",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "The configuration for the embedded conversationEmbed options.",
				"tags": [
					{
						"tag": "group",
						"text": "Embed components\n"
					}
				]
			},
			"children": [
				{
					"id": 1259,
					"name": "additionalFlags",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "This is an object (key/val) of override flags which will be applied\nto the internal embedded object. This can be used to add any\nURL flag.\nIf the same flags are passed in init, they will be overriden by the values here.\nWarning: This option is for advanced use only and is used internally\nto control embed behavior in non-regular ways. We do not publish the\nlist of supported keys and values associated with each.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  ... // other liveboard view config\n  additionalFlags: {\n       flag1: 'value1',\n       flag2: 'value2'\n    }\n});\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.9.0 | ThoughtSpot: 8.1.0.cl, 8.4.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 839,
							"character": 4
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1260,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"indexSignature": {
								"id": 1261,
								"name": "__index",
								"kind": 8192,
								"kindString": "Index signature",
								"flags": {},
								"parameters": [
									{
										"id": 1262,
										"name": "key",
										"kind": 32768,
										"flags": {},
										"type": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								],
								"type": {
									"type": "union",
									"types": [
										{
											"type": "intrinsic",
											"name": "string"
										},
										{
											"type": "intrinsic",
											"name": "number"
										},
										{
											"type": "intrinsic",
											"name": "boolean"
										}
									]
								}
							}
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ViewConfig.additionalFlags"
					}
				},
				{
					"id": 1280,
					"name": "collapseSearchBar",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "To set the initial state of the search bar in case of saved Answers.",
						"tags": [
							{
								"tag": "default",
								"text": "true"
							},
							{
								"tag": "version",
								"text": "SDK: 1.34.0 | ThoughtSpot: 10.3.0.cl"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  liveboardId: '123',\n  collapseSearchBar: true\n});\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1072,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ViewConfig.collapseSearchBar"
					}
				},
				{
					"id": 1265,
					"name": "contextMenuTrigger",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "flag to set ContextMenu Trigger to either left or right click.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#tsEmbed', {\n   ... // other options\n   contextMenuTrigger:ContextMenuTriggerOptions.LEFT_CLICK || RIGHT_CLICK,\n})\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.21.0 | ThoughtSpot: 9.2.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 871,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"id": 1745,
						"name": "ContextMenuTriggerOptions"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ViewConfig.contextMenuTrigger"
					}
				},
				{
					"id": 1263,
					"name": "customizations",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Dynamic CSSUrl and customCSS to be injected in the loaded application.\nYou would also need to set `style-src` in the CSP settings.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.17.2 | ThoughtSpot: 8.4.1.sw, 8.4.0.cl"
							},
							{
								"tag": "default",
								"text": "''\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 846,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"id": 2100,
						"name": "CustomisationsInterface"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ViewConfig.customizations"
					}
				},
				{
					"id": 1282,
					"name": "dataPanelV2",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Flag to control Data panel experience",
						"tags": [
							{
								"tag": "default",
								"text": "false"
							},
							{
								"tag": "version",
								"text": "SDK: 1.34.0 | ThoughtSpot Cloud: 10.3.0.cl"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new AppEmbed('#tsEmbed', {\n   ... // other options\n   dataPanelV2: true,\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1097,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ViewConfig.dataPanelV2"
					}
				},
				{
					"id": 1281,
					"name": "disableRedirectionLinksInNewTab",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "This flag can be used to disable links inside the embedded app,\nand disable redirection of links in a new tab.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  disableRedirectionLinksInNewTab: true\n});\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.32.1 | ThoughtSpot: 10.3.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1084,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ViewConfig.disableRedirectionLinksInNewTab"
					}
				},
				{
					"id": 1245,
					"name": "disableSourceSelection",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "disableSourceSelection : Disables data source selection\nbut still display the selected data source.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new ConversationEmbed('#tsEmbed', {\n   ... // other options\n   disableSourceSelection : true,\n})\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.36.0 | Thoughtspot: 10.6.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/conversation.ts",
							"line": 42,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1252,
					"name": "disabledActionReason",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The tooltip to display for disabled actions.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.6.0 | ThoughtSpot: ts8.nov.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  ... // other liveboard view config\n  disabledActions: [Action.Download, Action.Save]\n  disabledActionReason: \"Reason for disabling\",\n});\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 723,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ViewConfig.disabledActionReason"
					}
				},
				{
					"id": 1251,
					"name": "disabledActions",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The list of actions to disable from the primary menu, more menu\n(...), and the contextual menu. These actions will be disabled\nfor the user.\nUse this to disable actions.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.6.0 | ThoughtSpot: ts8.nov.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  ... // other liveboard view config\n  disabledActions: [Action.Download, Action.Save]\n});\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 710,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 1617,
							"name": "Action"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ViewConfig.disabledActions"
					}
				},
				{
					"id": 1276,
					"name": "doNotTrackPreRenderSize",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Determines whether the PreRender component should not dynamically track the size\nof its embedding element and adjust its own size accordingly.\nEnabling this option allows the PreRender component to automatically adapt\nits dimensions based on changes to the size of the embedding element.",
						"tags": [
							{
								"tag": "default",
								"text": "false"
							},
							{
								"tag": "version",
								"text": "SDK: 1.24.0 | ThoughtSpot:9.4.0.cl, 9.4.0.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\n// Disable tracking PreRender size in the configuration\nconst config = {\n  doNotTrackPreRenderSize: true,\n};\n\n// Instantiate an object with the configuration\nconst myComponent = new MyComponent(config);\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1031,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ViewConfig.doNotTrackPreRenderSize"
					}
				},
				{
					"id": 1283,
					"name": "enableCustomColumnGroups",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "To enable custom column groups in data panel v2",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.32.0 | ThoughtSpot: 10.0.0.cl, 10.1.0.sw"
							},
							{
								"tag": "default",
								"text": "false"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new SearchEmbed('#tsEmbed', {\n  ... // other options\n  enableCustomColumnGroups: true,\n});\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1110,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ViewConfig.enableCustomColumnGroups"
					}
				},
				{
					"id": 1279,
					"name": "enableV2Shell_experimental",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Enable the V2 shell. This can provide performance benefits\ndue to a lighterweight shell.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  liveboardId: '123',\n  enableV2Shell_experimental: true\n});\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.31.2 | ThoughtSpot: 10.0.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1060,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ViewConfig.enableV2Shell_experimental"
					}
				},
				{
					"id": 1269,
					"name": "excludeRuntimeFiltersfromURL",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Boolean to exclude runtimeFilters in the URL\nBy default it is true, this flag removes runtime filters from the URL\nwhen set to false, runtime filters will be included in the URL.",
						"text": "Irrespective of this flag, runtime filters ( if passed ) will be applied to the\nembedded view.",
						"tags": [
							{
								"tag": "default",
								"text": "false"
							},
							{
								"tag": "version",
								"text": "SDK: 1.24.0 | ThoughtSpot: 9.5.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 909,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ViewConfig.excludeRuntimeFiltersfromURL"
					}
				},
				{
					"id": 1278,
					"name": "excludeRuntimeParametersfromURL",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Boolean to exclude runtimeParameters from the URL\nwhen set to true, this flag removes runtime parameters from the URL.",
						"text": "Irrespective of this flag, runtime filters ( if passed ) will be applied to the\nembedded view.",
						"tags": [
							{
								"tag": "default",
								"text": "false"
							},
							{
								"tag": "version",
								"text": "SDK: 1.29.0 | ThoughtSpot: 10.1.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1046,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ViewConfig.excludeRuntimeParametersfromURL"
					}
				},
				{
					"id": 1248,
					"name": "frameParams",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The width and height dimensions to render an embedded\nobject inside your app.  Specify the values in pixels or percentage.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.1.0 | ThoughtSpot: ts7.may.cl, 7.2.1"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  ... // other liveboard view config\n  frameParams: {\n    width: '500px' | '50%',\n     height: '400px' | '60%',\n  },\n});\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 686,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"id": 2062,
						"name": "FrameParams"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ViewConfig.frameParams"
					}
				},
				{
					"id": 1253,
					"name": "hiddenActions",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The list of actions to hide from the embedded.\nThis actions will be hidden from the user.\nUse this to hide an action.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.6.0 | ThoughtSpot: ts8.nov.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  ... // other liveboard view config\n  hiddenActions: [Action.Download, Action.Export]\n});\n```"
							},
							{
								"tag": "important",
								"text": "\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 738,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 1617,
							"name": "Action"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ViewConfig.hiddenActions"
					}
				},
				{
					"id": 1274,
					"name": "hiddenHomeLeftNavItems",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "homepageLeftNavItems : Show or hide the left navigation bar items.\nThere are 8 eight home navigation list items.\nTo hide these items, specify the string in the array.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new AppEmbed('#tsEmbed', {\n   ... // other options\n   hiddenHomeLeftNavItems : [HomeLeftNavItem.Home,HomeLeftNavItem.Answers],\n})\n```\n\n**Note**: This option does not apply to the classic homepage.\nTo access the updated modular homepage, set\n`modularHomeExperience` to `true` (available as Early Access feature in 9.12.5.cl)."
							},
							{
								"tag": "version",
								"text": "SDK: 1.28.0 | ThoughtSpot: 9.12.5.cl, 10.1.0.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 995,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 2068,
							"name": "HomeLeftNavItem"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ViewConfig.hiddenHomeLeftNavItems"
					}
				},
				{
					"id": 1271,
					"name": "hiddenHomepageModules",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Hide the home page modules\nFor example: hiddenHomepageModules = [HomepageModule.MyLibrary]",
						"text": "**Note**: This option does not apply to the classic homepage.\nTo access the updated modular homepage, set\n`modularHomeExperience` to `true` (available as Early Access feature in 9.12.5.cl).",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.28.0 | ThoughtSpot: 9.12.5.cl, 10.1.0.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new AppEmbed('#tsEmbed', {\n   ... // other options\n   hiddenHomepageModules : [HomepageModule.Favorite,HomepageModule.Learning],\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 942,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 2076,
							"name": "HomepageModule"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ViewConfig.hiddenHomepageModules"
					}
				},
				{
					"id": 1270,
					"name": "hiddenTabs",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The list of tab IDs to hide from the embedded.\nThis Tabs will be hidden from their respective LBs.\nUse this to hide an tabID.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  ... // other liveboard view config\n  hiddenTabs: [\n'430496d6-6903-4601-937e-2c691821af3c',\n 'f547ec54-2a37-4516-a222-2b06719af726']\n});\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.26.0 | ThoughtSpot: 9.7.0.cl, 10.1.0.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 925,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ViewConfig.hiddenTabs"
					}
				},
				{
					"id": 1246,
					"name": "hideSourceSelection",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "hideSourceSelection : Hide data source selection",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new ConversationEmbed('#tsEmbed', {\n   ... // other options\n   hideSourceSelection : true,\n})\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.36.0 | Thoughtspot: 10.6.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/conversation.ts",
							"line": 54,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1264,
					"name": "insertAsSibling",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Insert as a sibling of the target container, instead of appending to a\nchild inside it.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.2.0 | ThoughtSpot: 9.0.0.cl, 9.0.0.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed-container', {\n   ... // other options\n   insertAsSibling:true,\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 859,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ViewConfig.insertAsSibling"
					}
				},
				{
					"id": 1266,
					"name": "linkOverride",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Flag to override openNew tab context menu link",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.21.0 | ThoughtSpot: 9.2.0.cl"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed-container', {\n   ... // other options\n   linkOverride:false,\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 883,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ViewConfig.linkOverride"
					}
				},
				{
					"id": 1258,
					"name": "locale",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The locale/language to use for the embedded view.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.9.4 | ThoughtSpot 8.1.0.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed-container', {\n   ... // other options\n   locale:'en',\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 818,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ViewConfig.locale"
					}
				},
				{
					"id": 1284,
					"name": "overrideOrgId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Overrides an Org context for embedding application users.\nThis parameter allows a user authenticated to one Org to view the\nobjects from another Org.\nThe `overrideOrgId` setting is honoured only if the\nPer Org URL feature is enabled on your ThoughtSpot instance.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  ... // other options\n  overrideOrgId: 142536\n});\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.35.0 | ThoughtSpot: 10.5.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1126,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ViewConfig.overrideOrgId"
					}
				},
				{
					"id": 1275,
					"name": "preRenderId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "PreRender id to be used for PreRendering the embed.\nUse PreRender to render the embed in the background and then\nshow or hide the rendered embed using showPreRender or hidePreRender respectively.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  ... // other liveboard view config\n  preRenderId: \"preRenderId-123\"\n});\nembed.showPreRender();\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.25.0 | ThoughtSpot: 9.6.0.cl, 9.8.0.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1010,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ViewConfig.preRenderId"
					}
				},
				{
					"id": 1272,
					"name": "reorderedHomepageModules",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "reordering the home page modules\neg: reorderedHomepageModules = [HomepageModule.MyLibrary, HomepageModule.Watchlist]",
						"text": "**Note**: This option does not apply to the classic homepage.\nTo access the updated modular homepage, set\n`modularHomeExperience` to `true` (available as Early Access feature in 9.12.5.cl).",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.28.0| ThoughtSpot: 9.12.5.cl, 10.1.0.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new AppEmbed('#tsEmbed', {\n   ... // other options\n   reorderedHomepageModules:[HomepageModule.Favorite,HomepageModule.MyLibrary]\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 959,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 2076,
							"name": "HomepageModule"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ViewConfig.reorderedHomepageModules"
					}
				},
				{
					"id": 1256,
					"name": "runtimeFilters",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The list of runtime filters to apply to a search answer,\nvisualization, or Liveboard.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.9.4 | ThoughtSpot 8.1.0.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed-container', {\n   ... // other options\n   runtimeFilters: [\n          {\n            columnName: 'value',\n             operator: RuntimeFilterOp.EQ,\n            values: ['string' | 123 | true],\n          },\n      ],\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 788,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 1455,
							"name": "RuntimeFilter"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ViewConfig.runtimeFilters"
					}
				},
				{
					"id": 1257,
					"name": "runtimeParameters",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The list of parameter override to apply to a search answer,\nvisualization, or Liveboard.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK : 1.25.0 | ThoughtSpot: 9.2.0.cl, 9.5.0.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed-container', {\n   ... // other options\n   runtimeParameters: [\n    {\n      name: 'value',\n      value: 'string' | 123 | true,\n    },\n  ],\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 806,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 2211,
							"name": "RuntimeParameter"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ViewConfig.runtimeParameters"
					}
				},
				{
					"id": 1244,
					"name": "searchOptions",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Ability to pass a starting search query to the conversation."
					},
					"sources": [
						{
							"fileName": "embed/conversation.ts",
							"line": 29,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "SearchOptions"
					}
				},
				{
					"id": 1255,
					"name": "showAlerts",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Show alert messages and toast messages in the embedded\nview in full app embed.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.11.0 | ThoughtSpot: 8.3.0.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new AppEmbed('#embed-container', {\n   ... // other options\n   showAlerts:true,\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 769,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ViewConfig.showAlerts"
					}
				},
				{
					"id": 1254,
					"name": "visibleActions",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The list of actions to display from the primary menu, more menu\n(...), and the contextual menu. These will be only actions that\nare visible to the user.\nUse this to hide all actions except the ones you want to show.",
						"text": "Use either this or hiddenActions.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.6.0 | ThoughtSpot: ts8.nov.cl, 8.4.1.sw"
							},
							{
								"tag": "important",
								"text": ""
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  ... // other liveboard view config\n  visibleActions: [Action.Download, Action.Export]\n});\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 756,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 1617,
							"name": "Action"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ViewConfig.visibleActions"
					}
				},
				{
					"id": 1273,
					"name": "visibleTabs",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The list of tab IDs to show in the embedded Liveboard.\nOnly the tabs specified in the array will be shown in the Liveboard.",
						"text": "Use either `visibleTabs` or `hiddenTabs`.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.26.0 | ThoughtSpot: 9.7.0.cl, 10.1.0.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed-container', {\n   ... // other options\n   visibleTabs: [\n      '430496d6-6903-4601-937e-2c691821af3c',\n      'f547ec54-2a37-4516-a222-2b06719af726'\n    ]\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 977,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "ViewConfig.visibleTabs"
					}
				},
				{
					"id": 1243,
					"name": "worksheetId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The ID of the worksheet to use for the conversation."
					},
					"sources": [
						{
							"fileName": "embed/conversation.ts",
							"line": 25,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1259,
						1280,
						1265,
						1263,
						1282,
						1281,
						1245,
						1252,
						1251,
						1276,
						1283,
						1279,
						1269,
						1278,
						1248,
						1253,
						1274,
						1271,
						1270,
						1246,
						1264,
						1266,
						1258,
						1284,
						1275,
						1272,
						1256,
						1257,
						1244,
						1255,
						1254,
						1273,
						1243
					]
				}
			],
			"sources": [
				{
					"fileName": "embed/conversation.ts",
					"line": 21,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "ViewConfig"
				}
			]
		},
		{
			"id": 2244,
			"name": "CustomActionPayload",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"tags": [
					{
						"tag": "group",
						"text": "Events\n"
					}
				]
			},
			"children": [
				{
					"id": 2245,
					"name": "contextMenuPoints",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4665,
							"character": 4
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2246,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 2247,
									"name": "clickedPoint",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "types.ts",
											"line": 4666,
											"character": 8
										}
									],
									"type": {
										"type": "reference",
										"id": 2241,
										"name": "VizPoint"
									}
								},
								{
									"id": 2248,
									"name": "selectedPoints",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "types.ts",
											"line": 4667,
											"character": 8
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 2241,
											"name": "VizPoint"
										}
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2247,
										2248
									]
								}
							]
						}
					}
				},
				{
					"id": 2249,
					"name": "embedAnswerData",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4669,
							"character": 4
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2250,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 2258,
									"name": "columns",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "types.ts",
											"line": 4677,
											"character": 8
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 2259,
									"name": "data",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "types.ts",
											"line": 4678,
											"character": 8
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 2252,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "types.ts",
											"line": 4671,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2251,
									"name": "name",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "types.ts",
											"line": 4670,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2253,
									"name": "sources",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "types.ts",
											"line": 4672,
											"character": 8
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2254,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 2255,
													"name": "header",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "types.ts",
															"line": 4673,
															"character": 12
														}
													],
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 2256,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"children": [
																{
																	"id": 2257,
																	"name": "guid",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "types.ts",
																			"line": 4674,
																			"character": 16
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"groups": [
																{
																	"title": "Properties",
																	"kind": 1024,
																	"children": [
																		2257
																	]
																}
															]
														}
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														2255
													]
												}
											]
										}
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2258,
										2259,
										2252,
										2251,
										2253
									]
								}
							],
							"indexSignature": {
								"id": 2260,
								"name": "__index",
								"kind": 8192,
								"kindString": "Index signature",
								"flags": {},
								"parameters": [
									{
										"id": 2261,
										"name": "key",
										"kind": 32768,
										"flags": {},
										"type": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								],
								"type": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					}
				},
				{
					"id": 2262,
					"name": "session",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4681,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"id": 1424,
						"name": "SessionInterface"
					}
				},
				{
					"id": 2263,
					"name": "vizId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4682,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2245,
						2249,
						2262,
						2263
					]
				}
			],
			"sources": [
				{
					"fileName": "types.ts",
					"line": 4664,
					"character": 17
				}
			]
		},
		{
			"id": 2120,
			"name": "CustomCssVariables",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "The list of customization css variables. These\nare the only allowed variables possible."
			},
			"children": [
				{
					"id": 2172,
					"name": "--ts-var-answer-chart-hover-background",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Background color of the chart type element when a user hovers over a chart type on\nthe chart selection widget."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 281,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2171,
					"name": "--ts-var-answer-chart-select-background",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Background color of the selected chart type on the chart selection widget."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 275,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2141,
					"name": "--ts-var-answer-data-panel-background-color",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Background color of the data panel."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 117,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2142,
					"name": "--ts-var-answer-edit-panel-background-color",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Background color of the vertical panel on the right side of the Answer page, which\nincludes the options to edit charts and tables."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 123,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2144,
					"name": "--ts-var-answer-view-table-chart-switcher-active-background",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Background color of the currently selected chart type in the chart switcher."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 133,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2143,
					"name": "--ts-var-answer-view-table-chart-switcher-background",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Background color of the chart switcher on search results and Answer pages."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 128,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2125,
					"name": "--ts-var-application-color",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Font color of the text on toggle buttons such as\n**All**, **Answers**, and **Liveboards** on the Home page (Classic experience),\nthe text color of the chart and table tiles on Home page (New modular Homepage\nexperience), and title text on the AI-generated charts and tables.\nThe default color code is #2770EF."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 34,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2184,
					"name": "--ts-var-axis-data-label-color",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Font color of the X and Y axis labels."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 341,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2185,
					"name": "--ts-var-axis-data-label-font-family",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Font family specification for X and Y axis labels."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 346,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2182,
					"name": "--ts-var-axis-title-color",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Font color of axis title on charts."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 331,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2183,
					"name": "--ts-var-axis-title-font-family",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Font family specification for the X and Y axis title text."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 336,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2146,
					"name": "--ts-var-button--icon-border-radius",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Border-radius of small buttons such as secondary buttons.\nFor example, share and favorite buttons."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 145,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2151,
					"name": "--ts-var-button--primary--active-background",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Backgroud color of the primary buttons when active."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 172,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2148,
					"name": "--ts-var-button--primary--font-family",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Font family specification for the text on primary buttons."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 156,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2150,
					"name": "--ts-var-button--primary--hover-background",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Background color of the primary buttons on hover."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 167,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2149,
					"name": "--ts-var-button--primary-background",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Background color of the primary buttons. For example, the primary buttons such as\nPin* and *Save*."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 162,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2147,
					"name": "--ts-var-button--primary-color",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Font color of the text on primary buttons. For example, the primary buttons on\nLiveboard*, Answer, *Data* workspace, *SpotIQ*, or *Home* page."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 151,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2156,
					"name": "--ts-var-button--secondary--active-background",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Backgroud color of the secondary buttons when active."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 197,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2153,
					"name": "--ts-var-button--secondary--font-family",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Font family specification for the text on the secondary buttons."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 182,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2155,
					"name": "--ts-var-button--secondary--hover-background",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Background color of the secondary button on hover."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 192,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2154,
					"name": "--ts-var-button--secondary-background",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Background color of the secondary buttons."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 187,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2152,
					"name": "--ts-var-button--secondary-color",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Font color of the text on the secondary buttons."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 177,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2160,
					"name": "--ts-var-button--tertiary--active-background",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Backgroud color of the tertiary buttons when active."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 218,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2159,
					"name": "--ts-var-button--tertiary--hover-background",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Background color of the tertiary button when a user hovers over these buttons."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 213,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2158,
					"name": "--ts-var-button--tertiary-background",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Background color of the tertiary button."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 208,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2157,
					"name": "--ts-var-button--tertiary-color",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Font color of the tertiary button. For example, the *Undo*, *Redo*, and *Reset*\nbuttons on the *Search* page."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 203,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2145,
					"name": "--ts-var-button-border-radius",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Border-radius of main buttons.\nFor example, the *Search data* button in the top navigation panel."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 139,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2207,
					"name": "--ts-var-checkbox-active-color",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Border and font color of checkbox in active state."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 452,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2210,
					"name": "--ts-var-checkbox-background-color",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Background color of checkbox."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 464,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2205,
					"name": "--ts-var-checkbox-border-color",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Border color of checkbox."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 444,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2208,
					"name": "--ts-var-checkbox-checked-color",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Border color and font color of checkbox in checked state."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 456,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2209,
					"name": "--ts-var-checkbox-checked-disabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Border and font color of checkbox in disabled state."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 460,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2204,
					"name": "--ts-var-checkbox-error-border",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Border color of checkbox in error state."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 440,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2206,
					"name": "--ts-var-checkbox-hover-border",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Border color of checkbox in hover state."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 448,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2177,
					"name": "--ts-var-chip--active-background",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Background color of the filter chips when selected."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 306,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2176,
					"name": "--ts-var-chip--active-color",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Font color of the filter label when a filter chip is selected"
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 301,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2179,
					"name": "--ts-var-chip--hover-background",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Background color of filter chips on hover."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 316,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2178,
					"name": "--ts-var-chip--hover-color",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Font color of the text on filter chips when hovered over."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 311,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2175,
					"name": "--ts-var-chip-background",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Background color of filter chips."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 296,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2173,
					"name": "--ts-var-chip-border-radius",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Border-radius of filter chips."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 286,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2174,
					"name": "--ts-var-chip-box-shadow",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Shadow effect for filter chips."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 291,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2180,
					"name": "--ts-var-chip-color",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Font color of the text on filter chips."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 321,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2181,
					"name": "--ts-var-chip-title-font-family",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Font family specification for the text on filter chips."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 326,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2192,
					"name": "--ts-var-dialog-body-background",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Background color of the dialogs."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 381,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2193,
					"name": "--ts-var-dialog-body-color",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Font color of the body text displayed on dialogs."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 386,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2196,
					"name": "--ts-var-dialog-footer-background",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Background color of the footer area on dialogs."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 401,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2194,
					"name": "--ts-var-dialog-header-background",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Background color of the header text on dialogs."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 391,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2195,
					"name": "--ts-var-dialog-header-color",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Font color of the header text on dialogs."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 396,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2203,
					"name": "--ts-var-home-favorite-suggestion-card-background",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Background for favorite carousel find your favorites card in modular home."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 436,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2202,
					"name": "--ts-var-home-favorite-suggestion-card-icon-color",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Icon color for favorite carousel find your favorites card in modular home."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 431,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2201,
					"name": "--ts-var-home-favorite-suggestion-card-text-color",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Text color for favorite carousel find your favorites card in modular home."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 426,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2200,
					"name": "--ts-var-home-watchlist-selected-text-color",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Text color for slected item in modular home's watchlist."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 421,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2198,
					"name": "--ts-var-list-hover-background",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Background for hover state in list"
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 411,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2197,
					"name": "--ts-var-list-selected-background",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Background for selected state in list"
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 406,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2190,
					"name": "--ts-var-menu--hover-background",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Background color for menu items on hover."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 371,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2187,
					"name": "--ts-var-menu-background",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Background color of menu panels."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 356,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2186,
					"name": "--ts-var-menu-color",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Font color of the menu items."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 351,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2188,
					"name": "--ts-var-menu-font-family",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Font family specification for the menu items."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 361,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2191,
					"name": "--ts-var-menu-selected-text-color",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Text color for selected menu items."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 376,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2189,
					"name": "--ts-var-menu-text-transform",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Text capitalization specification for the menu items."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 366,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2126,
					"name": "--ts-var-nav-background",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Background color of the top navigation panel."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 39,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2127,
					"name": "--ts-var-nav-color",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Font color of the top navigation panel."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 44,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2121,
					"name": "--ts-var-root-background",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Background color of the Liveboard, visualization, Search, and Answer pages."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 9,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2122,
					"name": "--ts-var-root-color",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Color of the text on application pages."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 14,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2123,
					"name": "--ts-var-root-font-family",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Font type for the text on application pages."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 19,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2124,
					"name": "--ts-var-root-text-transform",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Text transformation specification for UI elements in the app."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 24,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2135,
					"name": "--ts-var-search-auto-complete-background",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Background color of the search suggestions panel."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 84,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2139,
					"name": "--ts-var-search-auto-complete-font-color",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Font color of the text in the search suggestion panel."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 106,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2140,
					"name": "--ts-var-search-auto-complete-subtext-font-color",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Font color of the sub-text that appears below the keyword in the search suggestion\npanel."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 112,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2138,
					"name": "--ts-var-search-bar-auto-complete-hover-background",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Background color of the search suggestion block on hover."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 101,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2134,
					"name": "--ts-var-search-bar-background",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Background color of the search bar."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 79,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2137,
					"name": "--ts-var-search-bar-navigation-help-text-background",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Background color of the navigation help text that appears at the bottom of the\nsearch suggestions panel."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 96,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2131,
					"name": "--ts-var-search-bar-text-font-color",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Font color of the text in the Search bar."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 64,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2132,
					"name": "--ts-var-search-bar-text-font-family",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Font of the text in the Search bar."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 69,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2133,
					"name": "--ts-var-search-bar-text-font-style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Font style of the text in the Search bar."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 74,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2128,
					"name": "--ts-var-search-data-button-background",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Background color of the *Search data* button."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 49,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2129,
					"name": "--ts-var-search-data-button-font-color",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Color of the text on the *Search data* button."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 54,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2130,
					"name": "--ts-var-search-data-button-font-family",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Font of the text on the *Search data* button."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 59,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2136,
					"name": "--ts-var-search-navigation-button-background",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Background color of the navigation panel that allows you to undo, redo, and reset\nsearch operations."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 90,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2199,
					"name": "--ts-var-segment-control-hover-background",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Background for hover state in segment control."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 416,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2169,
					"name": "--ts-var-viz-background",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Background color of the visualization tiles and header panel on a Liveboard."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 265,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2167,
					"name": "--ts-var-viz-border-radius",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Border-radius for the visualization tiles and header panel on a Liveboard."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 255,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2168,
					"name": "--ts-var-viz-box-shadow",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Box shadow property for the visualization tiles and header panel on a Liveboard."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 260,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2164,
					"name": "--ts-var-viz-description-color",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Font color of the description text and subtitle of a visualization or Answer."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 238,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2165,
					"name": "--ts-var-viz-description-font-family",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Font family specification of description text and subtitle of a visualization or\nAnswer."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 244,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2166,
					"name": "--ts-var-viz-description-text-transform",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Text transformation specification for  description text and subtitle of a\nvisualization or Answer."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 250,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2170,
					"name": "--ts-var-viz-legend-hover-background",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Background color of the legend on a visualization or Answer."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 270,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2161,
					"name": "--ts-var-viz-title-color",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Font color of the title text of a visualization or Answer."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 223,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2162,
					"name": "--ts-var-viz-title-font-family",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Font family specification for the title text of a visualization/Answer."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 228,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2163,
					"name": "--ts-var-viz-title-text-transform",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Text transformation specification for visualization and Answer titles."
					},
					"sources": [
						{
							"fileName": "css-variables.ts",
							"line": 233,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2172,
						2171,
						2141,
						2142,
						2144,
						2143,
						2125,
						2184,
						2185,
						2182,
						2183,
						2146,
						2151,
						2148,
						2150,
						2149,
						2147,
						2156,
						2153,
						2155,
						2154,
						2152,
						2160,
						2159,
						2158,
						2157,
						2145,
						2207,
						2210,
						2205,
						2208,
						2209,
						2204,
						2206,
						2177,
						2176,
						2179,
						2178,
						2175,
						2173,
						2174,
						2180,
						2181,
						2192,
						2193,
						2196,
						2194,
						2195,
						2203,
						2202,
						2201,
						2200,
						2198,
						2197,
						2190,
						2187,
						2186,
						2188,
						2191,
						2189,
						2126,
						2127,
						2121,
						2122,
						2123,
						2124,
						2135,
						2139,
						2140,
						2138,
						2134,
						2137,
						2131,
						2132,
						2133,
						2128,
						2129,
						2130,
						2136,
						2199,
						2169,
						2167,
						2168,
						2164,
						2165,
						2166,
						2170,
						2161,
						2162,
						2163
					]
				}
			],
			"sources": [
				{
					"fileName": "css-variables.ts",
					"line": 5,
					"character": 17
				}
			]
		},
		{
			"id": 2108,
			"name": "CustomStyles",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Styles within the {@link CustomisationsInterface}."
			},
			"children": [
				{
					"id": 2110,
					"name": "customCSS",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 259,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"id": 2111,
						"name": "customCssInterface"
					}
				},
				{
					"id": 2109,
					"name": "customCSSUrl",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 258,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2110,
						2109
					]
				}
			],
			"sources": [
				{
					"fileName": "types.ts",
					"line": 257,
					"character": 17
				}
			]
		},
		{
			"id": 2100,
			"name": "CustomisationsInterface",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Configuration to define the customization on the Embedded\nThoughtSpot components.\nYou can customize styles, text strings, and icons.\nFor more information, see https://developers.thoughtspot.com/docs/custom-css.",
				"tags": [
					{
						"tag": "example",
						"text": "\n```js\n init({\n   // ...\n   customizations: {\n    style: {\n      customCSS: {\n        variables: {},\n        rules_UNSTABLE: {}\n      }\n    },\n    content: {\n     strings: {\n       'LIVEBOARDS': 'Dashboards',\n       'ANSWERS': 'Visualizations',\n       'Edit': 'Modify',\n       'Show underlying data': 'Show source data',\n       'SpotIQ': 'Insights',\n       'Monitor': 'Alerts',\n     }\n    },\n    iconSpriteUrl: 'https://my-custom-icon-sprite.svg'\n   }\n })\n```\n"
					}
				]
			},
			"children": [
				{
					"id": 2102,
					"name": "content",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 295,
							"character": 4
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2103,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 2104,
									"name": "strings",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"tags": [
											{
												"tag": "version",
												"text": "SDK: 1.26.0 | 9.7.0.cl\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "types.ts",
											"line": 299,
											"character": 8
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2104
									]
								}
							],
							"indexSignature": {
								"id": 2105,
								"name": "__index",
								"kind": 8192,
								"kindString": "Index signature",
								"flags": {},
								"parameters": [
									{
										"id": 2106,
										"name": "key",
										"kind": 32768,
										"flags": {},
										"type": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								],
								"type": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					}
				},
				{
					"id": 2107,
					"name": "iconSpriteUrl",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 302,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2101,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 294,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"id": 2108,
						"name": "CustomStyles"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2102,
						2107,
						2101
					]
				}
			],
			"sources": [
				{
					"fileName": "types.ts",
					"line": 293,
					"character": 17
				}
			]
		},
		{
			"id": 1749,
			"name": "EmbedConfig",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "The configuration object for embedding ThoughtSpot content.\nIt includes the ThoughtSpot hostname or IP address,\nthe type of authentication, and the authentication endpoint\nif a trusted authentication server is used.",
				"tags": [
					{
						"tag": "group",
						"text": "Authentication / Init\n"
					}
				]
			},
			"children": [
				{
					"id": 1791,
					"name": "additionalFlags",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "This is an object (key/val) of override flags which will be applied\nto the internal embedded object. This can be used to add any\nURL flag.\nWarning: This option is for advanced use only and is used internally\nto control embed behavior in non-regular ways. We do not publish the\nlist of supported keys and values associated with each.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  ... // other liveboard view config\n  additionalFlags: {\n       flag1: 'value1',\n       flag2: 'value2'\n    }\n});\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.33.5 | ThoughtSpot: *\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 615,
							"character": 4
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1792,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"indexSignature": {
								"id": 1793,
								"name": "__index",
								"kind": 8192,
								"kindString": "Index signature",
								"flags": {},
								"parameters": [
									{
										"id": 1794,
										"name": "key",
										"kind": 32768,
										"flags": {},
										"type": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								],
								"type": {
									"type": "union",
									"types": [
										{
											"type": "intrinsic",
											"name": "string"
										},
										{
											"type": "intrinsic",
											"name": "number"
										},
										{
											"type": "intrinsic",
											"name": "boolean"
										}
									]
								}
							}
						}
					}
				},
				{
					"id": 1752,
					"name": "authEndpoint",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "[AuthServer] The trusted authentication endpoint to use to get the\nauthentication token. A `GET` request is made to the\nauthentication API endpoint, which  returns the token\nas a plaintext response. For trusted authentication,\nthe `authEndpoint` or `getAuthToken` attribute is required."
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 328,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1773,
					"name": "authTriggerContainer",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "For `inPopup` SAMLRedirect or OIDCRedirect authentication, we need a\nbutton that the user can click to trigger the flow.\nThis attribute sets a containing element for that button.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ninit({\n  authType: AuthType.SAMLRedirect,\n  inPopup: true,\n  authTriggerContainer: '#auth-trigger-container'\n})\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.17.0 | ThoughtSpot: 8.9.0.cl, 9.0.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 491,
							"character": 4
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reference",
								"name": "HTMLElement"
							}
						]
					}
				},
				{
					"id": 1775,
					"name": "authTriggerText",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Text to show in the button which triggers the popup auth flow.\nDefault: `Authorize`.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.17.0 | ThoughtSpot: 8.9.0.cl, 9.0.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 504,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1751,
					"name": "authType",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The authentication mechanism to use."
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 320,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"id": 1443,
						"name": "AuthType"
					}
				},
				{
					"id": 1764,
					"name": "autoLogin",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Re-login a user with the previous login options\nwhen a user session expires.",
						"tags": [
							{
								"tag": "default",
								"text": "false\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 419,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1776,
					"name": "blockNonEmbedFullAppAccess",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Prevent users from accessing the full application or ThoughtSpot application pages\naccess to the embedded application users\noutside of the iframe.",
						"tags": [
							{
								"tag": "default",
								"text": "true"
							},
							{
								"tag": "version",
								"text": "SDK: 1.22.0 | ThoughtSpot: 9.3.0.cl, 9.5.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 512,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1767,
					"name": "callPrefetch",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Calls the prefetch method internally when set to `true`",
						"tags": [
							{
								"tag": "default",
								"text": "false\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 441,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1788,
					"name": "currencyFormat",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Format to be used for currency when currency format is set to infer from browser",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.28.4 | ThoughtSpot: 10.0.0.cl, 9.5.0.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 574,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1795,
					"name": "customVariablesForThirdPartyTools",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "This is an object (key/val) for customVariables being\nused by the third party tool's script.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  ... // other liveboard view config\n  customVariablesForThirdPartyTools: {\n       key1: 'value1',\n       key2: 'value2'\n    }\n});\n```"
							},
							{
								"tag": "version",
								"text": "SDK 1.37.0 | ThoughtSpot: 10.7.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 631,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "any"
							}
						],
						"name": "Record"
					}
				},
				{
					"id": 1772,
					"name": "customizations",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Custom style params for embed Config.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.17.0 | ThoughtSpot: 8.9.0.cl, 9.0.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 476,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"id": 2100,
						"name": "CustomisationsInterface"
					}
				},
				{
					"id": 1786,
					"name": "dateFormatLocale",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Overrides default/user preferred locale for date formatting",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.28.4 | ThoughtSpot: 10.0.0.cl, 9.5.0.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 564,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1769,
					"name": "detectCookieAccessSlow",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "[AuthServer|Basic] Detect if third-party party cookies are enabled by doing an\nadditional call. This is slower and should be avoided. Listen to the\n`NO_COOKIE_ACCESS` event to handle the situation.",
						"text": "This is slightly slower than letting the browser handle the cookie check, as it\ninvolves an extra network call.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.10.4 | ThoughtSpot: 8.2.0.cl, 8.4.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 461,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1790,
					"name": "disableLoginFailurePage",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "This flag is used to disable showing the login failure page in the embedded app.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK 1.32.3 | ThoughtSpot: 10.1.0.cl, 10.1.0.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 595,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1765,
					"name": "disableLoginRedirect",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Disable redirection to the login page when the embedded session expires\nThis flag is typically used alongside the combination of authentication modes such\nas {@link AuthType.AuthServer} and auto-login behavior {@link\nEmbedConfig.autoLogin}",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.9.3 | ThoughtSpot: 8.1.0.cl, 8.4.1.sw"
							},
							{
								"tag": "default",
								"text": "false\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 429,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1785,
					"name": "disableSDKTracking",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Disables the Mixpanel tracking from the SDK.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.27.9\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 559,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1763,
					"name": "ignoreNoCookieAccess",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Ignore the cookie access alert when third-party cookies are blocked by the\nuser's browser. If you set this to `true`, the embedded iframe behaviour\npersists even in the case of a non-logged-in user.",
						"tags": [
							{
								"tag": "default",
								"text": "false\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 412,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1758,
					"name": "inPopup",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "[SSO] For SSO Authentication, if `inPopup` is set to true, it will open\nthe SAML auth flow in a popup, instead of redirecting the browser in place.",
						"text": "Need to use this with `authTriggerContainer`. Or manually trigger\nthe `AuthEvent.TRIGGER_SSO_POPUP` event on a user interaction.",
						"tags": [
							{
								"tag": "default",
								"text": "false"
							},
							{
								"tag": "version",
								"text": "SDK: 1.18.0\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 373,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1784,
					"name": "logLevel",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Suppress or show specific types of logs in the console output.\nFor example, `LogLevel.ERROR` shows only Visual Embed SDK and\nThoughtSpot application errors and suppresses\nother logs such as warnings, information alerts,\nand debug messages in the console output.",
						"tags": [
							{
								"tag": "default",
								"text": "LogLevel.ERROR"
							},
							{
								"tag": "example",
								"text": "\n```js\ninit({\n  ...embedConfig,\n  logLevel: LogLevel.SILENT\n})\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.26.7 | ThoughtSpot: 9.10.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 554,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"id": 2214,
						"name": "LogLevel"
					}
				},
				{
					"id": 1766,
					"name": "loginFailedMessage",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "This message is displayed in the embedded view when a user login fails.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.10.1 | ThoughtSpot: 8.2.0.cl, 8.4.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 435,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1757,
					"name": "noRedirect",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "[SSO] For SSO Authentication, if `noRedirect` is set to true, it will\nopen the SAML auth flow in a popup, instead of redirecting the browser in\nplace.",
						"tags": [
							{
								"tag": "default",
								"text": "false"
							},
							{
								"tag": "deprecated",
								"text": "\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 362,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1787,
					"name": "numberFormatLocale",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Overrides default/user preferred locale for number formatting",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.28.4 | ThoughtSpot: 10.0.0.cl, 9.5.0.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 569,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1756,
					"name": "password",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "[Basic] The ThoughtSpot login password corresponding to the username",
						"text": "Warning: This feature is primarily intended for developer testing. It is\nstrongly advised not to use this authentication method in production.\n"
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 353,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1782,
					"name": "pendoTrackingKey",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Pendo API key to enable Pendo tracking to your own subscription, the key\nis added as an additional key to the embed, as per this link:https://support.pendo.io/hc/en-us/articles/360032201951-Send-data-to-multiple-subscriptions[document].",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.27.0 | ThoughtSpot: 9.8.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 529,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1768,
					"name": "queueMultiRenders",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "When there are multiple objects embedded, queue the rendering of embedded objects\nto start after the previous embed's render is complete. This helps improve\nperformance by decreasing the load on the browser.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.5.0 | ThoughtSpot: ts7.oct.cl, 7.2.1"
							},
							{
								"tag": "default",
								"text": "false\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 450,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1759,
					"name": "redirectPath",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "[SSO] For SSO Authentication, one can supply an optional path param;\nThis will be the path on the host origin where the SAML flow will be\nterminated.",
						"text": "Eg: \"/dashboard\", \"#/foo\" [Do not include the host]",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.10.2 | ThoughtSpot 8.2.0.cl, 8.4.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 383,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1761,
					"name": "shouldEncodeUrlQueryParams",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Boolean to define if the query parameters in the ThoughtSpot URL\nshould be encoded in base64. This provides additional security to\nThoughtSpot clusters against cross-site scripting attacks.",
						"tags": [
							{
								"tag": "default",
								"text": "false\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 394,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1783,
					"name": "suppressErrorAlerts",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "If passed as true all alerts will be suppressed in the embedded app.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.26.2 | ThoughtSpot: *\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 535,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1762,
					"name": "suppressNoCookieAccessAlert",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Suppress cookie access alert when third-party cookies are blocked by the\nuser's browser. Third-party cookie blocking is the default behaviour on\nsome web browsers like Safari. If you set this attribute to `true`,\nyou are encouraged to handle `noCookieAccess` event, to show your own treatment\nin this case.",
						"tags": [
							{
								"tag": "default",
								"text": "false\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 404,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1771,
					"name": "suppressSageEmbedBetaWarning",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Hide `beta` alert warning message for SageEmbed."
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 471,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1770,
					"name": "suppressSearchEmbedBetaWarning",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Hide the `beta` alert warning message for SearchEmbed.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.12.0 | ThoughtSpot: 8.4.0.cl, 8.4.1.sw*\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 466,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1750,
					"name": "thoughtSpotHost",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The ThoughtSpot cluster hostname or IP address."
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 316,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1774,
					"name": "useEventForSAMLPopup",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Specify that we want to use the `AuthEvent.TRIGGER_SSO_POPUP` event to trigger\nSAML popup. This is useful when you want to trigger the popup on a custom user\naction."
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 498,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1755,
					"name": "username",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "[AuthServer / Basic] The user name of the ThoughtSpot user. This\nattribute is required for trusted authentication."
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 345,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1753,
					"name": "getAuthToken",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 340,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 1754,
							"name": "getAuthToken",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "[AuthServer] A function that invokes the trusted authentication endpoint\nand returns a Promise that resolves to the `auth token` string.\nFor trusted authentication, the `authEndpoint` or `getAuthToken`\nattribute is required.",
								"text": "It is advisable to fetch a new token inside this method and not\nreuse the old issued token. When auth expires this method is\ncalled again and if it is called with an older token, the authentication\nwill not succeed.\n"
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1791,
						1752,
						1773,
						1775,
						1751,
						1764,
						1776,
						1767,
						1788,
						1795,
						1772,
						1786,
						1769,
						1790,
						1765,
						1785,
						1763,
						1758,
						1784,
						1766,
						1757,
						1787,
						1756,
						1782,
						1768,
						1759,
						1761,
						1783,
						1762,
						1771,
						1770,
						1750,
						1774,
						1755
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						1753
					]
				}
			],
			"sources": [
				{
					"fileName": "types.ts",
					"line": 312,
					"character": 17
				}
			]
		},
		{
			"id": 2062,
			"name": "FrameParams",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Embedded iframe configuration",
				"tags": [
					{
						"tag": "group",
						"text": "Embed components\n"
					}
				]
			},
			"children": [
				{
					"id": 2064,
					"name": "height",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The height of the iframe (unit is pixels if numeric)."
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 649,
							"character": 4
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				},
				{
					"id": 2065,
					"name": "loading",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Set to 'lazy' to enable lazy loading of the embedded TS frame.\nThis will defer loading of the frame until it comes into the\nviewport. This is useful for performance optimization."
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 655,
							"character": 4
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "lazy"
							},
							{
								"type": "literal",
								"value": "eager"
							},
							{
								"type": "literal",
								"value": "auto"
							}
						]
					}
				},
				{
					"id": 2063,
					"name": "width",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The width of the iframe (unit is pixels if numeric)."
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 645,
							"character": 4
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2064,
						2065,
						2063
					]
				}
			],
			"sources": [
				{
					"fileName": "types.ts",
					"line": 641,
					"character": 17
				}
			],
			"indexSignature": {
				"id": 2066,
				"name": "__index",
				"kind": 8192,
				"kindString": "Index signature",
				"flags": {},
				"comment": {
					"shortText": "This parameters will be passed on the iframe\nas is."
				},
				"parameters": [
					{
						"id": 2067,
						"name": "key",
						"kind": 32768,
						"flags": {},
						"type": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				],
				"type": {
					"type": "union",
					"types": [
						{
							"type": "intrinsic",
							"name": "string"
						},
						{
							"type": "intrinsic",
							"name": "number"
						},
						{
							"type": "intrinsic",
							"name": "boolean"
						},
						{
							"type": "intrinsic",
							"name": "undefined"
						}
					]
				}
			}
		},
		{
			"id": 1884,
			"name": "LiveboardViewConfig",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "The configuration for the embedded Liveboard or visualization page view.",
				"tags": [
					{
						"tag": "group",
						"text": "Embed components\n"
					}
				]
			},
			"children": [
				{
					"id": 1895,
					"name": "activeTabId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Set a Liveboard tab as an active tab.\nSpecify the tab ID.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#tsEmbed', {\n   ... // other options\n   activeTabId:'id-1234',\n})\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.15.0 | ThoughtSpot: 8.7.0.cl, 8.8.1-sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/liveboard.ts",
							"line": 174,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1912,
					"name": "additionalFlags",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "This is an object (key/val) of override flags which will be applied\nto the internal embedded object. This can be used to add any\nURL flag.\nIf the same flags are passed in init, they will be overriden by the values here.\nWarning: This option is for advanced use only and is used internally\nto control embed behavior in non-regular ways. We do not publish the\nlist of supported keys and values associated with each.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  ... // other liveboard view config\n  additionalFlags: {\n       flag1: 'value1',\n       flag2: 'value2'\n    }\n});\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.9.0 | ThoughtSpot: 8.1.0.cl, 8.4.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 839,
							"character": 4
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1913,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"indexSignature": {
								"id": 1914,
								"name": "__index",
								"kind": 8192,
								"kindString": "Index signature",
								"flags": {},
								"parameters": [
									{
										"id": 1915,
										"name": "key",
										"kind": 32768,
										"flags": {},
										"type": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								],
								"type": {
									"type": "union",
									"types": [
										{
											"type": "intrinsic",
											"name": "string"
										},
										{
											"type": "intrinsic",
											"name": "number"
										},
										{
											"type": "intrinsic",
											"name": "boolean"
										}
									]
								}
							}
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.additionalFlags"
					}
				},
				{
					"id": 1943,
					"name": "collapseSearchBar",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "To set the initial state of the search bar in case of saved Answers.",
						"tags": [
							{
								"tag": "default",
								"text": "true"
							},
							{
								"tag": "version",
								"text": "SDK: 1.34.0 | ThoughtSpot: 10.3.0.cl"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  liveboardId: '123',\n  collapseSearchBar: true\n});\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1072,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.collapseSearchBar"
					}
				},
				{
					"id": 1924,
					"name": "contextMenuTrigger",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "flag to set ContextMenu Trigger to either left or right click.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#tsEmbed', {\n   ... // other options\n   contextMenuTrigger:ContextMenuTriggerOptions.LEFT_CLICK || RIGHT_CLICK,\n})\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.21.0 | ThoughtSpot: 9.2.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 871,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"id": 1745,
						"name": "ContextMenuTriggerOptions"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.contextMenuTrigger"
					}
				},
				{
					"id": 1911,
					"name": "customizations",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Dynamic CSSUrl and customCSS to be injected in the loaded application.\nYou would also need to set `style-src` in the CSP settings.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.17.2 | ThoughtSpot: 8.4.1.sw, 8.4.0.cl"
							},
							{
								"tag": "default",
								"text": "''\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 846,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"id": 2100,
						"name": "CustomisationsInterface"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.customizations"
					}
				},
				{
					"id": 1944,
					"name": "dataPanelV2",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Flag to control Data panel experience",
						"tags": [
							{
								"tag": "default",
								"text": "false"
							},
							{
								"tag": "version",
								"text": "SDK: 1.34.0 | ThoughtSpot Cloud: 10.3.0.cl"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new AppEmbed('#tsEmbed', {\n   ... // other options\n   dataPanelV2: true,\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1097,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.dataPanelV2"
					}
				},
				{
					"id": 1886,
					"name": "defaultHeight",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "This is the minimum height(in pixels) for a full-height Liveboard.\nSetting this height helps resolve issues with empty Liveboards and\nother screens navigable from a Liveboard.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.5.0 | ThoughtSpot: ts7.oct.cl, 7.2.1"
							},
							{
								"tag": "default",
								"text": "500"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  ... // other liveboard view config\n  fullHeight: true,\n  defaultHeight: 600,\n});\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/liveboard.ts",
							"line": 73,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1927,
					"name": "disableRedirectionLinksInNewTab",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "This flag can be used to disable links inside the embedded app,\nand disable redirection of links in a new tab.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  disableRedirectionLinksInNewTab: true\n});\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.32.1 | ThoughtSpot: 10.3.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1084,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.disableRedirectionLinksInNewTab"
					}
				},
				{
					"id": 1917,
					"name": "disabledActionReason",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The tooltip to display for disabled actions.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.6.0 | ThoughtSpot: ts8.nov.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  ... // other liveboard view config\n  disabledActions: [Action.Download, Action.Save]\n  disabledActionReason: \"Reason for disabling\",\n});\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 723,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.disabledActionReason"
					}
				},
				{
					"id": 1916,
					"name": "disabledActions",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The list of actions to disable from the primary menu, more menu\n(...), and the contextual menu. These actions will be disabled\nfor the user.\nUse this to disable actions.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.6.0 | ThoughtSpot: ts8.nov.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  ... // other liveboard view config\n  disabledActions: [Action.Download, Action.Save]\n});\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 710,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 1617,
							"name": "Action"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.disabledActions"
					}
				},
				{
					"id": 1939,
					"name": "doNotTrackPreRenderSize",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Determines whether the PreRender component should not dynamically track the size\nof its embedding element and adjust its own size accordingly.\nEnabling this option allows the PreRender component to automatically adapt\nits dimensions based on changes to the size of the embedding element.",
						"tags": [
							{
								"tag": "default",
								"text": "false"
							},
							{
								"tag": "version",
								"text": "SDK: 1.24.0 | ThoughtSpot:9.4.0.cl, 9.4.0.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\n// Disable tracking PreRender size in the configuration\nconst config = {\n  doNotTrackPreRenderSize: true,\n};\n\n// Instantiate an object with the configuration\nconst myComponent = new MyComponent(config);\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1031,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.doNotTrackPreRenderSize"
					}
				},
				{
					"id": 1902,
					"name": "enable2ColumnLayout",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "This flag is used to enable the 2 column layout on a Liveboard",
						"tags": [
							{
								"tag": "default",
								"text": "false"
							},
							{
								"tag": "version",
								"text": "SDK: 1.32.0 | ThoughtSpot:10.1.0.cl"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed-container', {\n   ... // other options\n   enable2ColumnLayout: true,\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/liveboard.ts",
							"line": 266,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1901,
					"name": "enableAskSage",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "enable or disable ask sage",
						"tags": [
							{
								"tag": "default",
								"text": "false"
							},
							{
								"tag": "version",
								"text": "SDK: 1.29.0 | Thoughtspot: 9.12.0.cl"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new SearchEmbed('#tsEmbed', {\n   ... // other options\n   enableAskSage:true,\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/liveboard.ts",
							"line": 252,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1945,
					"name": "enableCustomColumnGroups",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "To enable custom column groups in data panel v2",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.32.0 | ThoughtSpot: 10.0.0.cl, 10.1.0.sw"
							},
							{
								"tag": "default",
								"text": "false"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new SearchEmbed('#tsEmbed', {\n  ... // other options\n  enableCustomColumnGroups: true,\n});\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1110,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.enableCustomColumnGroups"
					}
				},
				{
					"id": 1942,
					"name": "enableV2Shell_experimental",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Enable the V2 shell. This can provide performance benefits\ndue to a lighterweight shell.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  liveboardId: '123',\n  enableV2Shell_experimental: true\n});\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.31.2 | ThoughtSpot: 10.0.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1060,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.enableV2Shell_experimental"
					}
				},
				{
					"id": 1887,
					"name": "enableVizTransformations",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"tags": [
							{
								"tag": "deprecated",
								"text": "If set to true, the context menu in visualizations will be enabled."
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#tsEmbed', {\n   ... // other options\n   enableVizTransformations:true,\n})\n```"
							},
							{
								"tag": "version:",
								"text": "SDK: 1.1.0 | ThoughtSpot: 8.1.0.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/liveboard.ts",
							"line": 85,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1938,
					"name": "excludeRuntimeFiltersfromURL",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Boolean to exclude runtimeFilters in the URL\nBy default it is true, this flag removes runtime filters from the URL\nwhen set to false, runtime filters will be included in the URL.",
						"text": "Irrespective of this flag, runtime filters ( if passed ) will be applied to the\nembedded view.",
						"tags": [
							{
								"tag": "default",
								"text": "false"
							},
							{
								"tag": "version",
								"text": "SDK: 1.24.0 | ThoughtSpot: 9.5.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 909,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.excludeRuntimeFiltersfromURL"
					}
				},
				{
					"id": 1941,
					"name": "excludeRuntimeParametersfromURL",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Boolean to exclude runtimeParameters from the URL\nwhen set to true, this flag removes runtime parameters from the URL.",
						"text": "Irrespective of this flag, runtime filters ( if passed ) will be applied to the\nembedded view.",
						"tags": [
							{
								"tag": "default",
								"text": "false"
							},
							{
								"tag": "version",
								"text": "SDK: 1.29.0 | ThoughtSpot: 10.1.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1046,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.excludeRuntimeParametersfromURL"
					}
				},
				{
					"id": 1931,
					"name": "frameParams",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The width and height dimensions to render an embedded\nobject inside your app.  Specify the values in pixels or percentage.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.1.0 | ThoughtSpot: ts7.may.cl, 7.2.1"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  ... // other liveboard view config\n  frameParams: {\n    width: '500px' | '50%',\n     height: '400px' | '60%',\n  },\n});\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 686,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"id": 2062,
						"name": "FrameParams"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.frameParams"
					}
				},
				{
					"id": 1885,
					"name": "fullHeight",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "If set to true, the embedded object container dynamically resizes\naccording to the height of the Liveboard.",
						"text": "**Note**:  Using fullHeight loads all visualizations on the\nLiveboard simultaneously, which results in multiple warehouse\nqueries and potentially a longer wait for the topmost\nvisualizations to display on the screen.\nSetting `fullHeight` to `false` fetches visualizations\nincrementally as users scroll the page to view the charts and tables.\n",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.1.0 | ThoughtSpot: ts7.may.cl, 7.2.1"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  ... // other liveboard view config\n fullHeight: true,\n});\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/liveboard.ts",
							"line": 57,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1918,
					"name": "hiddenActions",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The list of actions to hide from the embedded.\nThis actions will be hidden from the user.\nUse this to hide an action.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.6.0 | ThoughtSpot: ts8.nov.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  ... // other liveboard view config\n  hiddenActions: [Action.Download, Action.Export]\n});\n```"
							},
							{
								"tag": "important",
								"text": "\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 738,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 1617,
							"name": "Action"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.hiddenActions"
					}
				},
				{
					"id": 1920,
					"name": "hiddenTabs",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The list of tab IDs to hide from the embedded.\nThis Tabs will be hidden from their respective LBs.\nUse this to hide an tabID.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  ... // other liveboard view config\n  hiddenTabs: [\n'430496d6-6903-4601-937e-2c691821af3c',\n 'f547ec54-2a37-4516-a222-2b06719af726']\n});\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.26.0 | ThoughtSpot: 9.7.0.cl, 10.1.0.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 925,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.hiddenTabs"
					}
				},
				{
					"id": 1907,
					"name": "hideIrrelevantChipsInLiveboardTabs",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "This flag is used to enable/disable hide irrelevant filters in a Liveboard tab",
						"tags": [
							{
								"tag": "default",
								"text": "false"
							},
							{
								"tag": "version",
								"text": "SDK: 1.36.0 | ThoughtSpot:10.6.0.cl"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed-container', {\n   ... // other options\n   hideIrrelevantChipsInLiveboardTabs: true,\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/liveboard.ts",
							"line": 344,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1897,
					"name": "hideLiveboardHeader",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Show or hide the Liveboard header.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.26.0 | Thoughtspot: 9.7.0.cl, 9.8.0.sw"
							},
							{
								"tag": "default",
								"text": "false"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  ... // other liveboard view config\n  hideLiveboardHeader:true,\n});\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/liveboard.ts",
							"line": 199,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1896,
					"name": "hideTabPanel",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Show or hide the tab panel of the embedded Liveboard.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.25.0 | Thoughtspot: 9.6.0.cl, 9.8.0.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed-container', {\n   ... // other options\n   hideTabPanel:true,\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/liveboard.ts",
							"line": 186,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1936,
					"name": "insertAsSibling",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Insert as a sibling of the target container, instead of appending to a\nchild inside it.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.2.0 | ThoughtSpot: 9.0.0.cl, 9.0.0.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed-container', {\n   ... // other options\n   insertAsSibling:true,\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 859,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.insertAsSibling"
					}
				},
				{
					"id": 1904,
					"name": "isLiveboardCompactHeaderEnabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "This flag is used to enable the compact header on a Liveboard",
						"tags": [
							{
								"tag": "default",
								"text": "false"
							},
							{
								"tag": "version",
								"text": "SDK: 1.35.0 | ThoughtSpot:10.3.0.cl"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed-container', {\n   ... // other options\n   isLiveboardCompactHeaderEnabled: true,\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/liveboard.ts",
							"line": 301,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1900,
					"name": "isLiveboardHeaderSticky",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Control the position and visibility of\nthe Liveboard header as the users scroll down the\nembedded Liveboard page.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  ... // other Liveboard view config\n  isLiveboardHeaderSticky: true,\n});\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.26.0 | Thoughtspot: 9.7.0.cl, 9.8.0.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/liveboard.ts",
							"line": 239,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1925,
					"name": "linkOverride",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Flag to override openNew tab context menu link",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.21.0 | ThoughtSpot: 9.2.0.cl"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed-container', {\n   ... // other options\n   linkOverride:false,\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 883,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.linkOverride"
					}
				},
				{
					"id": 1888,
					"name": "liveboardId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The Liveboard to display in the embedded view.\nUse either liveboardId or pinboardId to reference the Liveboard to embed.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.3.0 | ThoughtSpot ts7.aug.cl, 7.2.1"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed-container', {\n   ... // other options\n   liveboardId:id of liveboard,\n})\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/liveboard.ts",
							"line": 97,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1894,
					"name": "liveboardV2",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Render embedded Liveboards and visualizations in the\nnew Liveboard experience mode.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.14.0 | ThoughtSpot: 8.6.0.cl, 8.8.1-sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed-container', {\n   ... // other options\n   liveboardV2:true,\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/liveboard.ts",
							"line": 161,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1923,
					"name": "locale",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The locale/language to use for the embedded view.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.9.4 | ThoughtSpot 8.1.0.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed-container', {\n   ... // other options\n   locale:'en',\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 818,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.locale"
					}
				},
				{
					"id": 1928,
					"name": "overrideOrgId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Overrides an Org context for embedding application users.\nThis parameter allows a user authenticated to one Org to view the\nobjects from another Org.\nThe `overrideOrgId` setting is honoured only if the\nPer Org URL feature is enabled on your ThoughtSpot instance.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  ... // other options\n  overrideOrgId: 142536\n});\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.35.0 | ThoughtSpot: 10.5.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1126,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.overrideOrgId"
					}
				},
				{
					"id": 1929,
					"name": "preRenderId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "PreRender id to be used for PreRendering the embed.\nUse PreRender to render the embed in the background and then\nshow or hide the rendered embed using showPreRender or hidePreRender respectively.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  ... // other liveboard view config\n  preRenderId: \"preRenderId-123\"\n});\nembed.showPreRender();\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.25.0 | ThoughtSpot: 9.6.0.cl, 9.8.0.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1010,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.preRenderId"
					}
				},
				{
					"id": 1891,
					"name": "preventLiveboardFilterRemoval",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "If set to true, all filter chips from a\nLiveboard page will be read-only (no X buttons)",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.3.0 | ThoughtSpot ts7.aug.cl, 7.2.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed-container', {\n   ... // other options\n   preventLiveboardFilterRemoval:true,\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/liveboard.ts",
							"line": 127,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1934,
					"name": "runtimeFilters",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The list of runtime filters to apply to a search answer,\nvisualization, or Liveboard.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.9.4 | ThoughtSpot 8.1.0.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed-container', {\n   ... // other options\n   runtimeFilters: [\n          {\n            columnName: 'value',\n             operator: RuntimeFilterOp.EQ,\n            values: ['string' | 123 | true],\n          },\n      ],\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 788,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 1455,
							"name": "RuntimeFilter"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.runtimeFilters"
					}
				},
				{
					"id": 1935,
					"name": "runtimeParameters",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The list of parameter override to apply to a search answer,\nvisualization, or Liveboard.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK : 1.25.0 | ThoughtSpot: 9.2.0.cl, 9.5.0.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed-container', {\n   ... // other options\n   runtimeParameters: [\n    {\n      name: 'value',\n      value: 'string' | 123 | true,\n    },\n  ],\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 806,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 2211,
							"name": "RuntimeParameter"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.runtimeParameters"
					}
				},
				{
					"id": 1922,
					"name": "showAlerts",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Show alert messages and toast messages in the embedded\nview in full app embed.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.11.0 | ThoughtSpot: 8.3.0.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new AppEmbed('#embed-container', {\n   ... // other options\n   showAlerts:true,\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 769,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.showAlerts"
					}
				},
				{
					"id": 1899,
					"name": "showLiveboardDescription",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Show or hide the Liveboard description.",
						"tags": [
							{
								"tag": "default",
								"text": "false"
							},
							{
								"tag": "version",
								"text": "SDK: 1.26.0 | Thoughtspot: 9.7.0.cl, 9.8.0.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed-container', {\n   ... // other options\n   showLiveboardDescription:true,\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/liveboard.ts",
							"line": 225,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1906,
					"name": "showLiveboardReverifyBanner",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "This flag is used to show/hide the re-verify banner\nin Liveboard compact header",
						"tags": [
							{
								"tag": "default",
								"text": "true"
							},
							{
								"tag": "version",
								"text": "SDK: 1.35.0 | ThoughtSpot:10.4.0.cl"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed-container', {\n   ... // other options\n   showLiveboardReverifyBanner: true,\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/liveboard.ts",
							"line": 330,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1898,
					"name": "showLiveboardTitle",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Show or hide the Liveboard title.",
						"tags": [
							{
								"tag": "default",
								"text": "false"
							},
							{
								"tag": "version",
								"text": "SDK: 1.26.0 | Thoughtspot: 9.7.0.cl, 9.8.0.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed-container', {\n   ... // other options\n   showLiveboardTitle:true,\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/liveboard.ts",
							"line": 212,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1905,
					"name": "showLiveboardVerifiedBadge",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "This flag is used to show/hide verified icon in the Liveboard compact header",
						"tags": [
							{
								"tag": "default",
								"text": "true"
							},
							{
								"tag": "version",
								"text": "SDK: 1.35.0 | ThoughtSpot:10.4.0.cl"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed-container', {\n   ... // other options\n   showLiveboardVerifiedBadge: true,\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/liveboard.ts",
							"line": 315,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1903,
					"name": "showPreviewLoader",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Show a preview image of the visualization before the visualization loads.\nOnly works for visualizations embeds with a viz id.",
						"text": "Also, viz snashot should be enabled in the ThoughtSpot instance.\nContact ThoughtSpot support to enable this feature.\n\nSince, this will show preview images, be careful that it may show\nundesired data to the user when using row level security.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed-container', {\n  liveboardId: 'liveboard-id',\n  vizId: 'viz-id',\n  showPreviewLoader: true,\n});\nembed.render();\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.32.0 | ThoughtSpot: 10.0.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/liveboard.ts",
							"line": 287,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1919,
					"name": "visibleActions",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The list of actions to display from the primary menu, more menu\n(...), and the contextual menu. These will be only actions that\nare visible to the user.\nUse this to hide all actions except the ones you want to show.",
						"text": "Use either this or hiddenActions.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.6.0 | ThoughtSpot: ts8.nov.cl, 8.4.1.sw"
							},
							{
								"tag": "important",
								"text": ""
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  ... // other liveboard view config\n  visibleActions: [Action.Download, Action.Export]\n});\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 756,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 1617,
							"name": "Action"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.visibleActions"
					}
				},
				{
					"id": 1921,
					"name": "visibleTabs",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The list of tab IDs to show in the embedded Liveboard.\nOnly the tabs specified in the array will be shown in the Liveboard.",
						"text": "Use either `visibleTabs` or `hiddenTabs`.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.26.0 | ThoughtSpot: 9.7.0.cl, 10.1.0.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed-container', {\n   ... // other options\n   visibleTabs: [\n      '430496d6-6903-4601-937e-2c691821af3c',\n      'f547ec54-2a37-4516-a222-2b06719af726'\n    ]\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 977,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.visibleTabs"
					}
				},
				{
					"id": 1892,
					"name": "visibleVizs",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Array of visualization IDs which should be visible when the Liveboard\nrenders. This can be changed by triggering the `SetVisibleVizs`\nevent.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.9.1 | ThoughtSpot: 8.1.0.cl, 8.4.1-sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed-container', {\n   ... // other options\n   visibleVizs: [\n      '430496d6-6903-4601-937e-2c691821af3c',\n      'f547ec54-2a37-4516-a222-2b06719af726'\n    ]\n})\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/liveboard.ts",
							"line": 143,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				},
				{
					"id": 1890,
					"name": "vizId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The visualization within the Liveboard to display.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.9.1 | ThoughtSpot: 8.1.0.cl, 8.4.1-sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed-container', {\n   ... // other options\n   vizId:'430496d6-6903-4601-937e-2c691821af3c',\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/liveboard.ts",
							"line": 114,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1895,
						1912,
						1943,
						1924,
						1911,
						1944,
						1886,
						1927,
						1917,
						1916,
						1939,
						1902,
						1901,
						1945,
						1942,
						1887,
						1938,
						1941,
						1931,
						1885,
						1918,
						1920,
						1907,
						1897,
						1896,
						1936,
						1904,
						1900,
						1925,
						1888,
						1894,
						1923,
						1928,
						1929,
						1891,
						1934,
						1935,
						1922,
						1899,
						1906,
						1898,
						1905,
						1903,
						1919,
						1921,
						1892,
						1890
					]
				}
			],
			"sources": [
				{
					"fileName": "embed/liveboard.ts",
					"line": 32,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"name": "ViewConfig"
						},
						{
							"type": "union",
							"types": [
								{
									"type": "literal",
									"value": "hiddenHomepageModules"
								},
								{
									"type": "literal",
									"value": "hiddenHomeLeftNavItems"
								},
								{
									"type": "literal",
									"value": "reorderedHomepageModules"
								}
							]
						}
					],
					"name": "Omit"
				}
			]
		},
		{
			"id": 1455,
			"name": "RuntimeFilter",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "A filter that can be applied to ThoughtSpot answers, Liveboards, or\nvisualizations at runtime."
			},
			"children": [
				{
					"id": 1456,
					"name": "columnName",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The name of the column to filter on (case-sensitive)"
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1295,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1457,
					"name": "operator",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The operator to apply"
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1299,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"id": 1459,
						"name": "RuntimeFilterOp"
					}
				},
				{
					"id": 1458,
					"name": "values",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The list of operands. Some operators like EQ, LE accept\na single operand, whereas other operators like BW and IN accept multiple\noperands."
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1305,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "union",
							"types": [
								{
									"type": "intrinsic",
									"name": "string"
								},
								{
									"type": "intrinsic",
									"name": "number"
								},
								{
									"type": "intrinsic",
									"name": "bigint"
								},
								{
									"type": "intrinsic",
									"name": "boolean"
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1456,
						1457,
						1458
					]
				}
			],
			"sources": [
				{
					"fileName": "types.ts",
					"line": 1291,
					"character": 17
				}
			]
		},
		{
			"id": 2211,
			"name": "RuntimeParameter",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "A filter that can be applied to ThoughtSpot Answers, Liveboards, or\nvisualizations at runtime."
			},
			"children": [
				{
					"id": 2212,
					"name": "name",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "The name of the runtime parameter to filter on (case-sensitive)"
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1315,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 2213,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Values"
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1319,
							"character": 4
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "number"
							},
							{
								"type": "intrinsic",
								"name": "boolean"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2212,
						2213
					]
				}
			],
			"sources": [
				{
					"fileName": "types.ts",
					"line": 1311,
					"character": 17
				}
			]
		},
		{
			"id": 1946,
			"name": "SageViewConfig",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "The configuration attributes for the embedded Natural language search view. Based on\nGPT and LLM.",
				"tags": [
					{
						"tag": "version:",
						"text": "SDK: 1.23.0 | ThoughtSpot: 9.8.0.cl, 9.8.0.sw"
					},
					{
						"tag": "group",
						"text": "Embed components\n"
					}
				]
			},
			"children": [
				{
					"id": 1959,
					"name": "additionalFlags",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "This is an object (key/val) of override flags which will be applied\nto the internal embedded object. This can be used to add any\nURL flag.\nIf the same flags are passed in init, they will be overriden by the values here.\nWarning: This option is for advanced use only and is used internally\nto control embed behavior in non-regular ways. We do not publish the\nlist of supported keys and values associated with each.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  ... // other liveboard view config\n  additionalFlags: {\n       flag1: 'value1',\n       flag2: 'value2'\n    }\n});\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.9.0 | ThoughtSpot: 8.1.0.cl, 8.4.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 839,
							"character": 4
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1960,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"indexSignature": {
								"id": 1961,
								"name": "__index",
								"kind": 8192,
								"kindString": "Index signature",
								"flags": {},
								"parameters": [
									{
										"id": 1962,
										"name": "key",
										"kind": 32768,
										"flags": {},
										"type": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								],
								"type": {
									"type": "union",
									"types": [
										{
											"type": "intrinsic",
											"name": "string"
										},
										{
											"type": "intrinsic",
											"name": "number"
										},
										{
											"type": "intrinsic",
											"name": "boolean"
										}
									]
								}
							}
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.additionalFlags"
					}
				},
				{
					"id": 1988,
					"name": "collapseSearchBar",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "To set the initial state of the search bar in case of saved Answers.",
						"tags": [
							{
								"tag": "default",
								"text": "true"
							},
							{
								"tag": "version",
								"text": "SDK: 1.34.0 | ThoughtSpot: 10.3.0.cl"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  liveboardId: '123',\n  collapseSearchBar: true\n});\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1072,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.collapseSearchBar"
					}
				},
				{
					"id": 1969,
					"name": "contextMenuTrigger",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "flag to set ContextMenu Trigger to either left or right click.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#tsEmbed', {\n   ... // other options\n   contextMenuTrigger:ContextMenuTriggerOptions.LEFT_CLICK || RIGHT_CLICK,\n})\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.21.0 | ThoughtSpot: 9.2.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 871,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"id": 1745,
						"name": "ContextMenuTriggerOptions"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.contextMenuTrigger"
					}
				},
				{
					"id": 1958,
					"name": "customizations",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Dynamic CSSUrl and customCSS to be injected in the loaded application.\nYou would also need to set `style-src` in the CSP settings.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.17.2 | ThoughtSpot: 8.4.1.sw, 8.4.0.cl"
							},
							{
								"tag": "default",
								"text": "''\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 846,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"id": 2100,
						"name": "CustomisationsInterface"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.customizations"
					}
				},
				{
					"id": 1989,
					"name": "dataPanelV2",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Flag to control Data panel experience",
						"tags": [
							{
								"tag": "default",
								"text": "false"
							},
							{
								"tag": "version",
								"text": "SDK: 1.34.0 | ThoughtSpot Cloud: 10.3.0.cl"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new AppEmbed('#tsEmbed', {\n   ... // other options\n   dataPanelV2: true,\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1097,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.dataPanelV2"
					}
				},
				{
					"id": 1956,
					"name": "dataSource",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The data source GUID (Worksheet GUID) to set on load."
					},
					"sources": [
						{
							"fileName": "embed/sage.ts",
							"line": 104,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1972,
					"name": "disableRedirectionLinksInNewTab",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "This flag can be used to disable links inside the embedded app,\nand disable redirection of links in a new tab.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  disableRedirectionLinksInNewTab: true\n});\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.32.1 | ThoughtSpot: 10.3.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1084,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.disableRedirectionLinksInNewTab"
					}
				},
				{
					"id": 1951,
					"name": "disableWorksheetChange",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Disable the worksheet selection option.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.26.0 | Thoughtspot: 9.8.0.cl, 9.8.0.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/sage.ts",
							"line": 76,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1964,
					"name": "disabledActionReason",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The tooltip to display for disabled actions.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.6.0 | ThoughtSpot: ts8.nov.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  ... // other liveboard view config\n  disabledActions: [Action.Download, Action.Save]\n  disabledActionReason: \"Reason for disabling\",\n});\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 723,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.disabledActionReason"
					}
				},
				{
					"id": 1963,
					"name": "disabledActions",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The list of actions to disable from the primary menu, more menu\n(...), and the contextual menu. These actions will be disabled\nfor the user.\nUse this to disable actions.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.6.0 | ThoughtSpot: ts8.nov.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  ... // other liveboard view config\n  disabledActions: [Action.Download, Action.Save]\n});\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 710,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 1617,
							"name": "Action"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.disabledActions"
					}
				},
				{
					"id": 1984,
					"name": "doNotTrackPreRenderSize",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Determines whether the PreRender component should not dynamically track the size\nof its embedding element and adjust its own size accordingly.\nEnabling this option allows the PreRender component to automatically adapt\nits dimensions based on changes to the size of the embedding element.",
						"tags": [
							{
								"tag": "default",
								"text": "false"
							},
							{
								"tag": "version",
								"text": "SDK: 1.24.0 | ThoughtSpot:9.4.0.cl, 9.4.0.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\n// Disable tracking PreRender size in the configuration\nconst config = {\n  doNotTrackPreRenderSize: true,\n};\n\n// Instantiate an object with the configuration\nconst myComponent = new MyComponent(config);\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1031,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.doNotTrackPreRenderSize"
					}
				},
				{
					"id": 1990,
					"name": "enableCustomColumnGroups",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "To enable custom column groups in data panel v2",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.32.0 | ThoughtSpot: 10.0.0.cl, 10.1.0.sw"
							},
							{
								"tag": "default",
								"text": "false"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new SearchEmbed('#tsEmbed', {\n  ... // other options\n  enableCustomColumnGroups: true,\n});\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1110,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.enableCustomColumnGroups"
					}
				},
				{
					"id": 1987,
					"name": "enableV2Shell_experimental",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Enable the V2 shell. This can provide performance benefits\ndue to a lighterweight shell.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  liveboardId: '123',\n  enableV2Shell_experimental: true\n});\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.31.2 | ThoughtSpot: 10.0.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1060,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.enableV2Shell_experimental"
					}
				},
				{
					"id": 1983,
					"name": "excludeRuntimeFiltersfromURL",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Boolean to exclude runtimeFilters in the URL\nBy default it is true, this flag removes runtime filters from the URL\nwhen set to false, runtime filters will be included in the URL.",
						"text": "Irrespective of this flag, runtime filters ( if passed ) will be applied to the\nembedded view.",
						"tags": [
							{
								"tag": "default",
								"text": "false"
							},
							{
								"tag": "version",
								"text": "SDK: 1.24.0 | ThoughtSpot: 9.5.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 909,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.excludeRuntimeFiltersfromURL"
					}
				},
				{
					"id": 1986,
					"name": "excludeRuntimeParametersfromURL",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Boolean to exclude runtimeParameters from the URL\nwhen set to true, this flag removes runtime parameters from the URL.",
						"text": "Irrespective of this flag, runtime filters ( if passed ) will be applied to the\nembedded view.",
						"tags": [
							{
								"tag": "default",
								"text": "false"
							},
							{
								"tag": "version",
								"text": "SDK: 1.29.0 | ThoughtSpot: 10.1.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1046,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.excludeRuntimeParametersfromURL"
					}
				},
				{
					"id": 1976,
					"name": "frameParams",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The width and height dimensions to render an embedded\nobject inside your app.  Specify the values in pixels or percentage.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.1.0 | ThoughtSpot: ts7.may.cl, 7.2.1"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  ... // other liveboard view config\n  frameParams: {\n    width: '500px' | '50%',\n     height: '400px' | '60%',\n  },\n});\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 686,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"id": 2062,
						"name": "FrameParams"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.frameParams"
					}
				},
				{
					"id": 1965,
					"name": "hiddenActions",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The list of actions to hide from the embedded.\nThis actions will be hidden from the user.\nUse this to hide an action.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.6.0 | ThoughtSpot: ts8.nov.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  ... // other liveboard view config\n  hiddenActions: [Action.Download, Action.Export]\n});\n```"
							},
							{
								"tag": "important",
								"text": "\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 738,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 1617,
							"name": "Action"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.hiddenActions"
					}
				},
				{
					"id": 1953,
					"name": "hideAutocompleteSuggestions",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Show or hide autocomplete suggestions for the search query string.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.26.0 | Thoughtspot: 9.8.0.cl, 9.8.0.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/sage.ts",
							"line": 86,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1950,
					"name": "hideSageAnswerHeader",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Show or hide the Answer header, that is, the `AI Answer` title\nat the top of the Answer page.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.26.0 | Thoughtspot: 9.10.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/sage.ts",
							"line": 71,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1955,
					"name": "hideSampleQuestions",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Show or hide sample questions.\nThe sample questions are autogenerated based on the worksheet\nselected for the search operation.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.26.0 | Thoughtspot: 9.8.0.cl, 9.8.0.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/sage.ts",
							"line": 100,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1949,
					"name": "hideSearchBarTitle",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Show or hide the search bar title.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.29.0 | Thoughtspot: 9.8.0.cl, 9.8.0.sw"
							},
							{
								"tag": "deprecated",
								"text": "Thoughtspot: 9.10.0.cl | search bar doesn't have the title from 9.10.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/sage.ts",
							"line": 65,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1952,
					"name": "hideWorksheetSelector",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Hide the worksheet selection panel.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.26.0 | Thoughtspot: 9.8.0.cl, 9.8.0.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/sage.ts",
							"line": 81,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1981,
					"name": "insertAsSibling",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Insert as a sibling of the target container, instead of appending to a\nchild inside it.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.2.0 | ThoughtSpot: 9.0.0.cl, 9.0.0.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed-container', {\n   ... // other options\n   insertAsSibling:true,\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 859,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.insertAsSibling"
					}
				},
				{
					"id": 1970,
					"name": "linkOverride",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Flag to override openNew tab context menu link",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.21.0 | ThoughtSpot: 9.2.0.cl"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed-container', {\n   ... // other options\n   linkOverride:false,\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 883,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.linkOverride"
					}
				},
				{
					"id": 1968,
					"name": "locale",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The locale/language to use for the embedded view.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.9.4 | ThoughtSpot 8.1.0.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed-container', {\n   ... // other options\n   locale:'en',\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 818,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.locale"
					}
				},
				{
					"id": 1973,
					"name": "overrideOrgId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Overrides an Org context for embedding application users.\nThis parameter allows a user authenticated to one Org to view the\nobjects from another Org.\nThe `overrideOrgId` setting is honoured only if the\nPer Org URL feature is enabled on your ThoughtSpot instance.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  ... // other options\n  overrideOrgId: 142536\n});\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.35.0 | ThoughtSpot: 10.5.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1126,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.overrideOrgId"
					}
				},
				{
					"id": 1974,
					"name": "preRenderId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "PreRender id to be used for PreRendering the embed.\nUse PreRender to render the embed in the background and then\nshow or hide the rendered embed using showPreRender or hidePreRender respectively.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  ... // other liveboard view config\n  preRenderId: \"preRenderId-123\"\n});\nembed.showPreRender();\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.25.0 | ThoughtSpot: 9.6.0.cl, 9.8.0.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1010,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.preRenderId"
					}
				},
				{
					"id": 1979,
					"name": "runtimeFilters",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The list of runtime filters to apply to a search answer,\nvisualization, or Liveboard.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.9.4 | ThoughtSpot 8.1.0.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed-container', {\n   ... // other options\n   runtimeFilters: [\n          {\n            columnName: 'value',\n             operator: RuntimeFilterOp.EQ,\n            values: ['string' | 123 | true],\n          },\n      ],\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 788,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 1455,
							"name": "RuntimeFilter"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.runtimeFilters"
					}
				},
				{
					"id": 1980,
					"name": "runtimeParameters",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The list of parameter override to apply to a search answer,\nvisualization, or Liveboard.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK : 1.25.0 | ThoughtSpot: 9.2.0.cl, 9.5.0.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed-container', {\n   ... // other options\n   runtimeParameters: [\n    {\n      name: 'value',\n      value: 'string' | 123 | true,\n    },\n  ],\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 806,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 2211,
							"name": "RuntimeParameter"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.runtimeParameters"
					}
				},
				{
					"id": 1957,
					"name": "searchOptions",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Includes the following properties:",
						"text": "`searchQuery`: The search query string to pass in the search bar.\nSupports Natural Language Search queries.\n\n`executeSearch`: Boolean to define if the search should be executed or not.\nIf it is executed, the focus is placed on the results.\nIf itâ€™s not executed, the focus is placed at the end of\nthe token string in the search bar.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nsearchOptions: {\n   searchQuery: 'average sales by country and product type',\n   executeSearch: true,\n}\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.26.0 | Thoughtspot: 9.8.0.cl, 9.8.0.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/sage.ts",
							"line": 124,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "SearchOptions"
					}
				},
				{
					"id": 1967,
					"name": "showAlerts",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Show alert messages and toast messages in the embedded\nview in full app embed.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.11.0 | ThoughtSpot: 8.3.0.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new AppEmbed('#embed-container', {\n   ... // other options\n   showAlerts:true,\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 769,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.showAlerts"
					}
				},
				{
					"id": 1947,
					"name": "showObjectResults",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "If set to true, a list of Liveboard and Answers related\nto the natural language search will be shown below the\nAI generated answer.",
						"tags": [
							{
								"tag": "deprecated",
								"text": "Currently Liveboard and Answers related\nto the natural language search will not be shown for sage\nembed\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/sage.ts",
							"line": 49,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1954,
					"name": "showObjectSuggestions",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Show or hide autocomplete suggestions for the search query string.",
						"tags": [
							{
								"tag": "deprecated",
								"text": "\nCurrently, the object suggestions will not be shown for Natural Language Search.\nYou can use {@link hideAutocompleteSuggestions} instead.\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/sage.ts",
							"line": 93,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1966,
					"name": "visibleActions",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The list of actions to display from the primary menu, more menu\n(...), and the contextual menu. These will be only actions that\nare visible to the user.\nUse this to hide all actions except the ones you want to show.",
						"text": "Use either this or hiddenActions.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.6.0 | ThoughtSpot: ts8.nov.cl, 8.4.1.sw"
							},
							{
								"tag": "important",
								"text": ""
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  ... // other liveboard view config\n  visibleActions: [Action.Download, Action.Export]\n});\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 756,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 1617,
							"name": "Action"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.visibleActions"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1959,
						1988,
						1969,
						1958,
						1989,
						1956,
						1972,
						1951,
						1964,
						1963,
						1984,
						1990,
						1987,
						1983,
						1986,
						1976,
						1965,
						1953,
						1950,
						1955,
						1949,
						1952,
						1981,
						1970,
						1968,
						1973,
						1974,
						1979,
						1980,
						1957,
						1967,
						1947,
						1954,
						1966
					]
				}
			],
			"sources": [
				{
					"fileName": "embed/sage.ts",
					"line": 36,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"name": "ViewConfig"
						},
						{
							"type": "union",
							"types": [
								{
									"type": "literal",
									"value": "hiddenHomepageModules"
								},
								{
									"type": "literal",
									"value": "hiddenHomeLeftNavItems"
								},
								{
									"type": "literal",
									"value": "hiddenTabs"
								},
								{
									"type": "literal",
									"value": "visibleTabs"
								},
								{
									"type": "literal",
									"value": "reorderedHomepageModules"
								}
							]
						}
					],
					"name": "Omit"
				}
			]
		},
		{
			"id": 1848,
			"name": "SearchBarViewConfig",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"tags": [
					{
						"tag": "group",
						"text": "Embed components\n"
					}
				]
			},
			"children": [
				{
					"id": 1855,
					"name": "additionalFlags",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "This is an object (key/val) of override flags which will be applied\nto the internal embedded object. This can be used to add any\nURL flag.\nIf the same flags are passed in init, they will be overriden by the values here.\nWarning: This option is for advanced use only and is used internally\nto control embed behavior in non-regular ways. We do not publish the\nlist of supported keys and values associated with each.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  ... // other liveboard view config\n  additionalFlags: {\n       flag1: 'value1',\n       flag2: 'value2'\n    }\n});\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.9.0 | ThoughtSpot: 8.1.0.cl, 8.4.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 839,
							"character": 4
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1856,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"indexSignature": {
								"id": 1857,
								"name": "__index",
								"kind": 8192,
								"kindString": "Index signature",
								"flags": {},
								"parameters": [
									{
										"id": 1858,
										"name": "key",
										"kind": 32768,
										"flags": {},
										"type": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								],
								"type": {
									"type": "union",
									"types": [
										{
											"type": "intrinsic",
											"name": "string"
										},
										{
											"type": "intrinsic",
											"name": "number"
										},
										{
											"type": "intrinsic",
											"name": "boolean"
										}
									]
								}
							}
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.additionalFlags"
					}
				},
				{
					"id": 1882,
					"name": "collapseSearchBar",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "To set the initial state of the search bar in case of saved Answers.",
						"tags": [
							{
								"tag": "default",
								"text": "true"
							},
							{
								"tag": "version",
								"text": "SDK: 1.34.0 | ThoughtSpot: 10.3.0.cl"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  liveboardId: '123',\n  collapseSearchBar: true\n});\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1072,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.collapseSearchBar"
					}
				},
				{
					"id": 1864,
					"name": "contextMenuTrigger",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "flag to set ContextMenu Trigger to either left or right click.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#tsEmbed', {\n   ... // other options\n   contextMenuTrigger:ContextMenuTriggerOptions.LEFT_CLICK || RIGHT_CLICK,\n})\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.21.0 | ThoughtSpot: 9.2.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 871,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"id": 1745,
						"name": "ContextMenuTriggerOptions"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.contextMenuTrigger"
					}
				},
				{
					"id": 1854,
					"name": "customizations",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Dynamic CSSUrl and customCSS to be injected in the loaded application.\nYou would also need to set `style-src` in the CSP settings.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.17.2 | ThoughtSpot: 8.4.1.sw, 8.4.0.cl"
							},
							{
								"tag": "default",
								"text": "''\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 846,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"id": 2100,
						"name": "CustomisationsInterface"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.customizations"
					}
				},
				{
					"id": 1850,
					"name": "dataSource",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Pass the ID of the source to be selected.",
						"tags": [
							{
								"tag": "version:",
								"text": "SDK: 1.19.0, ThoughtSpot 9.0.0.cl, 9.0.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new SearchBarEmbed('#tsEmbed', {\n   ... // other options\n   dataSource:'id-2345',\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/search-bar.tsx",
							"line": 46,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1849,
					"name": "dataSources",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The array of data source GUIDs to set on load.\nOnly a single data source is supported currently.",
						"tags": [
							{
								"tag": "deprecated",
								"text": "Use `dataSource` instead"
							},
							{
								"tag": "version:",
								"text": "SDK: 1.1.0 | ThoughtSpot: 8.1.1-sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new SearchBarEmbed('#tsEmbed', {\n   ... // other options\n   dataSources:['id-2345','id-2345'],\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/search-bar.tsx",
							"line": 34,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				},
				{
					"id": 1867,
					"name": "disableRedirectionLinksInNewTab",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "This flag can be used to disable links inside the embedded app,\nand disable redirection of links in a new tab.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  disableRedirectionLinksInNewTab: true\n});\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.32.1 | ThoughtSpot: 10.3.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1084,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.disableRedirectionLinksInNewTab"
					}
				},
				{
					"id": 1860,
					"name": "disabledActionReason",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The tooltip to display for disabled actions.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.6.0 | ThoughtSpot: ts8.nov.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  ... // other liveboard view config\n  disabledActions: [Action.Download, Action.Save]\n  disabledActionReason: \"Reason for disabling\",\n});\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 723,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.disabledActionReason"
					}
				},
				{
					"id": 1859,
					"name": "disabledActions",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The list of actions to disable from the primary menu, more menu\n(...), and the contextual menu. These actions will be disabled\nfor the user.\nUse this to disable actions.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.6.0 | ThoughtSpot: ts8.nov.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  ... // other liveboard view config\n  disabledActions: [Action.Download, Action.Save]\n});\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 710,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 1617,
							"name": "Action"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.disabledActions"
					}
				},
				{
					"id": 1878,
					"name": "doNotTrackPreRenderSize",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Determines whether the PreRender component should not dynamically track the size\nof its embedding element and adjust its own size accordingly.\nEnabling this option allows the PreRender component to automatically adapt\nits dimensions based on changes to the size of the embedding element.",
						"tags": [
							{
								"tag": "default",
								"text": "false"
							},
							{
								"tag": "version",
								"text": "SDK: 1.24.0 | ThoughtSpot:9.4.0.cl, 9.4.0.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\n// Disable tracking PreRender size in the configuration\nconst config = {\n  doNotTrackPreRenderSize: true,\n};\n\n// Instantiate an object with the configuration\nconst myComponent = new MyComponent(config);\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1031,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.doNotTrackPreRenderSize"
					}
				},
				{
					"id": 1883,
					"name": "enableCustomColumnGroups",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "To enable custom column groups in data panel v2",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.32.0 | ThoughtSpot: 10.0.0.cl, 10.1.0.sw"
							},
							{
								"tag": "default",
								"text": "false"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new SearchEmbed('#tsEmbed', {\n  ... // other options\n  enableCustomColumnGroups: true,\n});\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1110,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.enableCustomColumnGroups"
					}
				},
				{
					"id": 1881,
					"name": "enableV2Shell_experimental",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Enable the V2 shell. This can provide performance benefits\ndue to a lighterweight shell.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  liveboardId: '123',\n  enableV2Shell_experimental: true\n});\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.31.2 | ThoughtSpot: 10.0.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1060,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.enableV2Shell_experimental"
					}
				},
				{
					"id": 1877,
					"name": "excludeRuntimeFiltersfromURL",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Boolean to exclude runtimeFilters in the URL\nBy default it is true, this flag removes runtime filters from the URL\nwhen set to false, runtime filters will be included in the URL.",
						"text": "Irrespective of this flag, runtime filters ( if passed ) will be applied to the\nembedded view.",
						"tags": [
							{
								"tag": "default",
								"text": "false"
							},
							{
								"tag": "version",
								"text": "SDK: 1.24.0 | ThoughtSpot: 9.5.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 909,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.excludeRuntimeFiltersfromURL"
					}
				},
				{
					"id": 1880,
					"name": "excludeRuntimeParametersfromURL",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Boolean to exclude runtimeParameters from the URL\nwhen set to true, this flag removes runtime parameters from the URL.",
						"text": "Irrespective of this flag, runtime filters ( if passed ) will be applied to the\nembedded view.",
						"tags": [
							{
								"tag": "default",
								"text": "false"
							},
							{
								"tag": "version",
								"text": "SDK: 1.29.0 | ThoughtSpot: 10.1.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1046,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.excludeRuntimeParametersfromURL"
					}
				},
				{
					"id": 1853,
					"name": "excludeSearchTokenStringFromURL",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Exclude the search token string from the URL.\nIf set to true, the search token string is not appended to the URL.",
						"tags": [
							{
								"tag": "version:",
								"text": "SDK: 1.35.7 | ThoughtSpot: 10.7.0.cl"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new SearchEmbed('#tsEmbed', {\n searchOptions: {\n   searchTokenString: '[quantity purchased] [region]',\n   executeSearch: true,\n },\n excludeSearchTokenStringFromURL: true,\n});\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/search-bar.tsx",
							"line": 97,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1871,
					"name": "frameParams",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The width and height dimensions to render an embedded\nobject inside your app.  Specify the values in pixels or percentage.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.1.0 | ThoughtSpot: ts7.may.cl, 7.2.1"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  ... // other liveboard view config\n  frameParams: {\n    width: '500px' | '50%',\n     height: '400px' | '60%',\n  },\n});\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 686,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"id": 2062,
						"name": "FrameParams"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.frameParams"
					}
				},
				{
					"id": 1861,
					"name": "hiddenActions",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The list of actions to hide from the embedded.\nThis actions will be hidden from the user.\nUse this to hide an action.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.6.0 | ThoughtSpot: ts8.nov.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  ... // other liveboard view config\n  hiddenActions: [Action.Download, Action.Export]\n});\n```"
							},
							{
								"tag": "important",
								"text": "\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 738,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 1617,
							"name": "Action"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.hiddenActions"
					}
				},
				{
					"id": 1875,
					"name": "insertAsSibling",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Insert as a sibling of the target container, instead of appending to a\nchild inside it.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.2.0 | ThoughtSpot: 9.0.0.cl, 9.0.0.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed-container', {\n   ... // other options\n   insertAsSibling:true,\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 859,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.insertAsSibling"
					}
				},
				{
					"id": 1865,
					"name": "linkOverride",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Flag to override openNew tab context menu link",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.21.0 | ThoughtSpot: 9.2.0.cl"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed-container', {\n   ... // other options\n   linkOverride:false,\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 883,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.linkOverride"
					}
				},
				{
					"id": 1863,
					"name": "locale",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The locale/language to use for the embedded view.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.9.4 | ThoughtSpot 8.1.0.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed-container', {\n   ... // other options\n   locale:'en',\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 818,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.locale"
					}
				},
				{
					"id": 1868,
					"name": "overrideOrgId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Overrides an Org context for embedding application users.\nThis parameter allows a user authenticated to one Org to view the\nobjects from another Org.\nThe `overrideOrgId` setting is honoured only if the\nPer Org URL feature is enabled on your ThoughtSpot instance.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  ... // other options\n  overrideOrgId: 142536\n});\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.35.0 | ThoughtSpot: 10.5.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1126,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.overrideOrgId"
					}
				},
				{
					"id": 1869,
					"name": "preRenderId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "PreRender id to be used for PreRendering the embed.\nUse PreRender to render the embed in the background and then\nshow or hide the rendered embed using showPreRender or hidePreRender respectively.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  ... // other liveboard view config\n  preRenderId: \"preRenderId-123\"\n});\nembed.showPreRender();\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.25.0 | ThoughtSpot: 9.6.0.cl, 9.8.0.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1010,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.preRenderId"
					}
				},
				{
					"id": 1874,
					"name": "runtimeParameters",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The list of parameter override to apply to a search answer,\nvisualization, or Liveboard.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK : 1.25.0 | ThoughtSpot: 9.2.0.cl, 9.5.0.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed-container', {\n   ... // other options\n   runtimeParameters: [\n    {\n      name: 'value',\n      value: 'string' | 123 | true,\n    },\n  ],\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 806,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 2211,
							"name": "RuntimeParameter"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.runtimeParameters"
					}
				},
				{
					"id": 1852,
					"name": "searchOptions",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Configuration for search options.\nIncludes the following properties:",
						"text": "`searchTokenString`: Search tokens to pass in the query.\n\n`executeSearch`: Boolean to define if the search should be executed or not.\nIf it is executed, the focus is placed on the results.\nIf itâ€™s not executed, the focus is placed at the end of\nthe token string in the search bar.",
						"tags": [
							{
								"tag": "version:",
								"text": "SDK: 1.2.0 | ThoughtSpot: 9.4.0.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new SearchBarEmbed('#tsEmbed', {\n   ... // other options\n   searchOptions: {\n       searchTokenString: '[quantity purchased] [region]',\n       executeSearch: true,\n   }\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/search-bar.tsx",
							"line": 81,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "SearchOptions"
					}
				},
				{
					"id": 1851,
					"name": "useLastSelectedSources",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Boolean to define if the last selected data source should be used",
						"tags": [
							{
								"tag": "version:",
								"text": "SDK: 1.24.0, ThoughtSpot 9.5.0.cl, 9.5.0.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new SearchBarEmbed('#tsEmbed', {\n   ... // other options\n   useLastSelectedSources:false,\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/search-bar.tsx",
							"line": 58,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1862,
					"name": "visibleActions",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The list of actions to display from the primary menu, more menu\n(...), and the contextual menu. These will be only actions that\nare visible to the user.\nUse this to hide all actions except the ones you want to show.",
						"text": "Use either this or hiddenActions.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.6.0 | ThoughtSpot: ts8.nov.cl, 8.4.1.sw"
							},
							{
								"tag": "important",
								"text": ""
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  ... // other liveboard view config\n  visibleActions: [Action.Download, Action.Export]\n});\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 756,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 1617,
							"name": "Action"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.visibleActions"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1855,
						1882,
						1864,
						1854,
						1850,
						1849,
						1867,
						1860,
						1859,
						1878,
						1883,
						1881,
						1877,
						1880,
						1853,
						1871,
						1861,
						1875,
						1865,
						1863,
						1868,
						1869,
						1874,
						1852,
						1851,
						1862
					]
				}
			],
			"sources": [
				{
					"fileName": "embed/search-bar.tsx",
					"line": 9,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"name": "ViewConfig"
						},
						{
							"type": "union",
							"types": [
								{
									"type": "literal",
									"value": "runtimeFilters"
								},
								{
									"type": "literal",
									"value": "showAlerts"
								},
								{
									"type": "literal",
									"value": "dataPanelV2"
								},
								{
									"type": "literal",
									"value": "hiddenHomepageModules"
								},
								{
									"type": "literal",
									"value": "hiddenHomeLeftNavItems"
								},
								{
									"type": "literal",
									"value": "hiddenTabs"
								},
								{
									"type": "literal",
									"value": "visibleTabs"
								},
								{
									"type": "literal",
									"value": "reorderedHomepageModules"
								}
							]
						}
					],
					"name": "Omit"
				}
			]
		},
		{
			"id": 1796,
			"name": "SearchViewConfig",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "The configuration attributes for the embedded search view.",
				"tags": [
					{
						"tag": "group",
						"text": "Embed components\n"
					}
				]
			},
			"children": [
				{
					"id": 1816,
					"name": "additionalFlags",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "This is an object (key/val) of override flags which will be applied\nto the internal embedded object. This can be used to add any\nURL flag.\nIf the same flags are passed in init, they will be overriden by the values here.\nWarning: This option is for advanced use only and is used internally\nto control embed behavior in non-regular ways. We do not publish the\nlist of supported keys and values associated with each.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  ... // other liveboard view config\n  additionalFlags: {\n       flag1: 'value1',\n       flag2: 'value2'\n    }\n});\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.9.0 | ThoughtSpot: 8.1.0.cl, 8.4.1.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 839,
							"character": 4
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1817,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"indexSignature": {
								"id": 1818,
								"name": "__index",
								"kind": 8192,
								"kindString": "Index signature",
								"flags": {},
								"parameters": [
									{
										"id": 1819,
										"name": "key",
										"kind": 32768,
										"flags": {},
										"type": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								],
								"type": {
									"type": "union",
									"types": [
										{
											"type": "intrinsic",
											"name": "string"
										},
										{
											"type": "intrinsic",
											"name": "number"
										},
										{
											"type": "intrinsic",
											"name": "boolean"
										}
									]
								}
							}
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.additionalFlags"
					}
				},
				{
					"id": 1808,
					"name": "answerId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The GUID of a saved answer to load initially.",
						"tags": [
							{
								"tag": "version:",
								"text": "SDK: 1.1.0 | ThoughtSpot: 8.1.0.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new SearchEmbed('#tsEmbed', {\n   ... // other options\n   answerId:'sed-1234',\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/search.ts",
							"line": 233,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1798,
					"name": "collapseDataPanel",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "If set to true, the data panel is collapsed on load,\nbut can be expanded manually.",
						"tags": [
							{
								"tag": "version:",
								"text": "SDK: 1.34.0 | ThoughtSpot: 10.3.0.cl"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new SearchEmbed('#tsEmbed', {\n   ... // other options\n   collapseDataPanel:true,\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/search.ts",
							"line": 104,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1797,
					"name": "collapseDataSources",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "If set to true, the data sources panel is collapsed on load,\nbut can be expanded manually.",
						"tags": [
							{
								"tag": "version:",
								"text": "SDK: 1.1.0 | ThoughtSpot: 8.1.0.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new SearchEmbed('#tsEmbed', {\n   ... // other options\n   collapseDataSources:true,\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/search.ts",
							"line": 91,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1845,
					"name": "collapseSearchBar",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "To set the initial state of the search bar in case of saved Answers.",
						"tags": [
							{
								"tag": "default",
								"text": "true"
							},
							{
								"tag": "version",
								"text": "SDK: 1.34.0 | ThoughtSpot: 10.3.0.cl"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  liveboardId: '123',\n  collapseSearchBar: true\n});\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1072,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.collapseSearchBar"
					}
				},
				{
					"id": 1811,
					"name": "collapseSearchBarInitially",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "To set the initial state of the search bar in case of saved-answers.",
						"tags": [
							{
								"tag": "default",
								"text": "false"
							},
							{
								"tag": "version",
								"text": "SDK: 1.32.0 | Thoughtspot: 10.0.0.cl"
							},
							{
								"tag": "deprecated",
								"text": "Use {@link collapseSearchBar} instead\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/search.ts",
							"line": 258,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1826,
					"name": "contextMenuTrigger",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "flag to set ContextMenu Trigger to either left or right click.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#tsEmbed', {\n   ... // other options\n   contextMenuTrigger:ContextMenuTriggerOptions.LEFT_CLICK || RIGHT_CLICK,\n})\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.21.0 | ThoughtSpot: 9.2.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 871,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"id": 1745,
						"name": "ContextMenuTriggerOptions"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.contextMenuTrigger"
					}
				},
				{
					"id": 1815,
					"name": "customizations",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Dynamic CSSUrl and customCSS to be injected in the loaded application.\nYou would also need to set `style-src` in the CSP settings.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.17.2 | ThoughtSpot: 8.4.1.sw, 8.4.0.cl"
							},
							{
								"tag": "default",
								"text": "''\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 846,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"id": 2100,
						"name": "CustomisationsInterface"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.customizations"
					}
				},
				{
					"id": 1813,
					"name": "dataPanelCustomGroupsAccordionInitialState",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "This controls the initial behaviour of custom column groups accordion.\nIt takes DataPanelCustomColumnGroupsAccordionState enum values as input.\nList of different enum values:-\n- EXPAND_ALL: Expand all the accordion initially in data panel v2.\n- COLLAPSE_ALL: Collapse all the accordions initially in data panel v2.\n- EXPAND_FIRST: Expand the first accordion and collapse the rest.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.32.0 | Thoughtspot: 10.0.0.cl"
							},
							{
								"tag": "default",
								"text": "DataPanelCustomColumnGroupsAccordionState.EXPAND_ALL"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new SearchEmbed('#tsEmbed', {\n  ... // other options\n  dataPanelCustomGroupsAccordionInitialState:\n     DataPanelCustomColumnGroupsAccordionState.EXPAND_ALL,\n});\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/search.ts",
							"line": 282,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "DataPanelCustomColumnGroupsAccordionState"
					}
				},
				{
					"id": 1846,
					"name": "dataPanelV2",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Flag to control Data panel experience",
						"tags": [
							{
								"tag": "default",
								"text": "false"
							},
							{
								"tag": "version",
								"text": "SDK: 1.34.0 | ThoughtSpot Cloud: 10.3.0.cl"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new AppEmbed('#tsEmbed', {\n   ... // other options\n   dataPanelV2: true,\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1097,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.dataPanelV2"
					}
				},
				{
					"id": 1804,
					"name": "dataSource",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The array of data source GUIDs to set on load.",
						"tags": [
							{
								"tag": "version:",
								"text": "SDK: 1.19.0"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new SearchEmbed('#tsEmbed', {\n   ... // other options\n   dataSource:'id-234',\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/search.ts",
							"line": 179,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1803,
					"name": "dataSources",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The array of data source GUIDs to set on load.\nOnly a single data source is supported currently.",
						"tags": [
							{
								"tag": "deprecated",
								"text": "Use `dataSource` instead."
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new SearchEmbed('#tsEmbed', {\n   ... // other options\n   dataSources:['id-234','id-456'],\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/search.ts",
							"line": 167,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				},
				{
					"id": 1829,
					"name": "disableRedirectionLinksInNewTab",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "This flag can be used to disable links inside the embedded app,\nand disable redirection of links in a new tab.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  disableRedirectionLinksInNewTab: true\n});\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.32.1 | ThoughtSpot: 10.3.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1084,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.disableRedirectionLinksInNewTab"
					}
				},
				{
					"id": 1821,
					"name": "disabledActionReason",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The tooltip to display for disabled actions.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.6.0 | ThoughtSpot: ts8.nov.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  ... // other liveboard view config\n  disabledActions: [Action.Download, Action.Save]\n  disabledActionReason: \"Reason for disabling\",\n});\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 723,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.disabledActionReason"
					}
				},
				{
					"id": 1820,
					"name": "disabledActions",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The list of actions to disable from the primary menu, more menu\n(...), and the contextual menu. These actions will be disabled\nfor the user.\nUse this to disable actions.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.6.0 | ThoughtSpot: ts8.nov.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  ... // other liveboard view config\n  disabledActions: [Action.Download, Action.Save]\n});\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 710,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 1617,
							"name": "Action"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.disabledActions"
					}
				},
				{
					"id": 1841,
					"name": "doNotTrackPreRenderSize",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Determines whether the PreRender component should not dynamically track the size\nof its embedding element and adjust its own size accordingly.\nEnabling this option allows the PreRender component to automatically adapt\nits dimensions based on changes to the size of the embedding element.",
						"tags": [
							{
								"tag": "default",
								"text": "false"
							},
							{
								"tag": "version",
								"text": "SDK: 1.24.0 | ThoughtSpot:9.4.0.cl, 9.4.0.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\n// Disable tracking PreRender size in the configuration\nconst config = {\n  doNotTrackPreRenderSize: true,\n};\n\n// Instantiate an object with the configuration\nconst myComponent = new MyComponent(config);\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1031,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.doNotTrackPreRenderSize"
					}
				},
				{
					"id": 1847,
					"name": "enableCustomColumnGroups",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "To enable custom column groups in data panel v2",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.32.0 | ThoughtSpot: 10.0.0.cl, 10.1.0.sw"
							},
							{
								"tag": "default",
								"text": "false"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new SearchEmbed('#tsEmbed', {\n  ... // other options\n  enableCustomColumnGroups: true,\n});\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1110,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.enableCustomColumnGroups"
					}
				},
				{
					"id": 1801,
					"name": "enableSearchAssist",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "If set to true, the Search Assist feature is enabled.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.13.0 | ThoughtSpot: 8.5.0.cl, 8.8.1-sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new SearchEmbed('#tsEmbed', {\n   ... // other options\n   enableSearchAssist:true,\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/search.ts",
							"line": 142,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1844,
					"name": "enableV2Shell_experimental",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Enable the V2 shell. This can provide performance benefits\ndue to a lighterweight shell.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  liveboardId: '123',\n  enableV2Shell_experimental: true\n});\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.31.2 | ThoughtSpot: 10.0.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1060,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.enableV2Shell_experimental"
					}
				},
				{
					"id": 1840,
					"name": "excludeRuntimeFiltersfromURL",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Boolean to exclude runtimeFilters in the URL\nBy default it is true, this flag removes runtime filters from the URL\nwhen set to false, runtime filters will be included in the URL.",
						"text": "Irrespective of this flag, runtime filters ( if passed ) will be applied to the\nembedded view.",
						"tags": [
							{
								"tag": "default",
								"text": "false"
							},
							{
								"tag": "version",
								"text": "SDK: 1.24.0 | ThoughtSpot: 9.5.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 909,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.excludeRuntimeFiltersfromURL"
					}
				},
				{
					"id": 1843,
					"name": "excludeRuntimeParametersfromURL",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Boolean to exclude runtimeParameters from the URL\nwhen set to true, this flag removes runtime parameters from the URL.",
						"text": "Irrespective of this flag, runtime filters ( if passed ) will be applied to the\nembedded view.",
						"tags": [
							{
								"tag": "default",
								"text": "false"
							},
							{
								"tag": "version",
								"text": "SDK: 1.29.0 | ThoughtSpot: 10.1.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1046,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.excludeRuntimeParametersfromURL"
					}
				},
				{
					"id": 1807,
					"name": "excludeSearchTokenStringFromURL",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Exclude the search token string from the URL.\nIf set to true, the search token string is not appended to the URL.",
						"tags": [
							{
								"tag": "version:",
								"text": "SDK: 1.35.7 | ThoughtSpot: 10.7.0.cl"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new SearchEmbed('#tsEmbed', {\n searchOptions: {\n   searchTokenString: '[quantity purchased] [region]',\n   executeSearch: true,\n },\n excludeSearchTokenStringFromURL: true,\n});\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/search.ts",
							"line": 221,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1814,
					"name": "focusSearchBarOnRender",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Flag to remove focus from search bar initially when user\nlands on search embed page.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.32.0 | Thoughtspot: 10.3.0.cl"
							},
							{
								"tag": "default",
								"text": "true"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new SearchEmbed('#tsEmbed', {\n ... // other options\nfocusSearchBarOnRender: false,\n});\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/search.ts",
							"line": 296,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1802,
					"name": "forceTable",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "If set to true, the tabular view is set as the default\nformat for presenting search data.",
						"tags": [
							{
								"tag": "version:",
								"text": "SDK: 1.1.0 | ThoughtSpot: 8.1.0.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new SearchEmbed('#tsEmbed', {\n   ... // other options\n   forceTable:true,\n})\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/search.ts",
							"line": 154,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1833,
					"name": "frameParams",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The width and height dimensions to render an embedded\nobject inside your app.  Specify the values in pixels or percentage.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.1.0 | ThoughtSpot: ts7.may.cl, 7.2.1"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  ... // other liveboard view config\n  frameParams: {\n    width: '500px' | '50%',\n     height: '400px' | '60%',\n  },\n});\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 686,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"id": 2062,
						"name": "FrameParams"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.frameParams"
					}
				},
				{
					"id": 1822,
					"name": "hiddenActions",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The list of actions to hide from the embedded.\nThis actions will be hidden from the user.\nUse this to hide an action.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.6.0 | ThoughtSpot: ts8.nov.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  ... // other liveboard view config\n  hiddenActions: [Action.Download, Action.Export]\n});\n```"
							},
							{
								"tag": "important",
								"text": "\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 738,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 1617,
							"name": "Action"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.hiddenActions"
					}
				},
				{
					"id": 1799,
					"name": "hideDataSources",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Show or hide the data sources panel.",
						"tags": [
							{
								"tag": "version:",
								"text": "SDK: 1.2.0 | ThoughtSpot: 9.1.0.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new SearchEmbed('#tsEmbed', {\n   ... // other options\n   hideDataSources:true,\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/search.ts",
							"line": 116,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1800,
					"name": "hideResults",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Show or hide the charts and tables in search answers.\nThis attribute can be used to create a custom visualization\nusing raw answer data.",
						"tags": [
							{
								"tag": "version:",
								"text": "SDK: 1.2.0 | ThoughtSpot: 9.1.0.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new SearchEmbed('#tsEmbed', {\n   ... // other options\n   hideResults:true,\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/search.ts",
							"line": 130,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1809,
					"name": "hideSearchBar",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "If set to true, the search page will render without the Search Bar\nThe chart/table should still be visible.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.21.0 | ThoughtSpot: 9.2.0.cl, 9.5.0.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new SearchEmbed('#tsEmbed', {\n   ... // other options\n   hideSearchBar:true,\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/search.ts",
							"line": 246,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1838,
					"name": "insertAsSibling",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Insert as a sibling of the target container, instead of appending to a\nchild inside it.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.2.0 | ThoughtSpot: 9.0.0.cl, 9.0.0.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed-container', {\n   ... // other options\n   insertAsSibling:true,\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 859,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.insertAsSibling"
					}
				},
				{
					"id": 1812,
					"name": "isOnBeforeGetVizDataInterceptEnabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Flag to enable onBeforeSearchExecute Embed Event",
						"tags": [
							{
								"tag": "version:",
								"text": "SDK: 1.29.0 | Thoughtspot: 10.1.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/search.ts",
							"line": 263,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1827,
					"name": "linkOverride",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Flag to override openNew tab context menu link",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.21.0 | ThoughtSpot: 9.2.0.cl"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed-container', {\n   ... // other options\n   linkOverride:false,\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 883,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.linkOverride"
					}
				},
				{
					"id": 1825,
					"name": "locale",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The locale/language to use for the embedded view.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.9.4 | ThoughtSpot 8.1.0.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed-container', {\n   ... // other options\n   locale:'en',\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 818,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.locale"
					}
				},
				{
					"id": 1830,
					"name": "overrideOrgId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Overrides an Org context for embedding application users.\nThis parameter allows a user authenticated to one Org to view the\nobjects from another Org.\nThe `overrideOrgId` setting is honoured only if the\nPer Org URL feature is enabled on your ThoughtSpot instance.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  ... // other options\n  overrideOrgId: 142536\n});\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.35.0 | ThoughtSpot: 10.5.0.cl\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1126,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.overrideOrgId"
					}
				},
				{
					"id": 1831,
					"name": "preRenderId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "PreRender id to be used for PreRendering the embed.\nUse PreRender to render the embed in the background and then\nshow or hide the rendered embed using showPreRender or hidePreRender respectively.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  ... // other liveboard view config\n  preRenderId: \"preRenderId-123\"\n});\nembed.showPreRender();\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.25.0 | ThoughtSpot: 9.6.0.cl, 9.8.0.sw\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1010,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.preRenderId"
					}
				},
				{
					"id": 1836,
					"name": "runtimeFilters",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The list of runtime filters to apply to a search answer,\nvisualization, or Liveboard.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.9.4 | ThoughtSpot 8.1.0.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed-container', {\n   ... // other options\n   runtimeFilters: [\n          {\n            columnName: 'value',\n             operator: RuntimeFilterOp.EQ,\n            values: ['string' | 123 | true],\n          },\n      ],\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 788,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 1455,
							"name": "RuntimeFilter"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.runtimeFilters"
					}
				},
				{
					"id": 1837,
					"name": "runtimeParameters",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The list of parameter override to apply to a search answer,\nvisualization, or Liveboard.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK : 1.25.0 | ThoughtSpot: 9.2.0.cl, 9.5.0.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed-container', {\n   ... // other options\n   runtimeParameters: [\n    {\n      name: 'value',\n      value: 'string' | 123 | true,\n    },\n  ],\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 806,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 2211,
							"name": "RuntimeParameter"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.runtimeParameters"
					}
				},
				{
					"id": 1806,
					"name": "searchOptions",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Configuration for search options.\nIncludes the following properties:",
						"text": "`searchTokenString`: Search tokens to pass in the query.\n\n`executeSearch`: Boolean to define if the search should be executed or not.\nIf it is executed, the focus is placed on the results.\nIf itâ€™s not executed, the focus is placed at the end of\nthe token string in the search bar.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nsearchOptions: {\n   searchTokenString: '[quantity purchased] [region]',\n   executeSearch: true,\n}\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/search.ts",
							"line": 205,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"name": "SearchOptions"
					}
				},
				{
					"id": 1805,
					"name": "searchQuery",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The initial search query to load the answer with.",
						"tags": [
							{
								"tag": "deprecated",
								"text": "\n\nUse {@link searchOptions} instead.\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/search.ts",
							"line": 186,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1824,
					"name": "showAlerts",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Show alert messages and toast messages in the embedded\nview in full app embed.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.11.0 | ThoughtSpot: 8.3.0.cl, 8.4.1.sw"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new AppEmbed('#embed-container', {\n   ... // other options\n   showAlerts:true,\n})\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 769,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.showAlerts"
					}
				},
				{
					"id": 1810,
					"name": "useLastSelectedSources",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Flag to set if last selected dataSource should be used",
						"tags": [
							{
								"tag": "version:",
								"text": "SDK: 1.24.0\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "embed/search.ts",
							"line": 251,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 1823,
					"name": "visibleActions",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The list of actions to display from the primary menu, more menu\n(...), and the contextual menu. These will be only actions that\nare visible to the user.\nUse this to hide all actions except the ones you want to show.",
						"text": "Use either this or hiddenActions.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.6.0 | ThoughtSpot: ts8.nov.cl, 8.4.1.sw"
							},
							{
								"tag": "important",
								"text": ""
							},
							{
								"tag": "example",
								"text": "\n```js\nconst embed = new LiveboardEmbed('#embed', {\n  ... // other liveboard view config\n  visibleActions: [Action.Download, Action.Export]\n});\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 756,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 1617,
							"name": "Action"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Omit.visibleActions"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1816,
						1808,
						1798,
						1797,
						1845,
						1811,
						1826,
						1815,
						1813,
						1846,
						1804,
						1803,
						1829,
						1821,
						1820,
						1841,
						1847,
						1801,
						1844,
						1840,
						1843,
						1807,
						1814,
						1802,
						1833,
						1822,
						1799,
						1800,
						1809,
						1838,
						1812,
						1827,
						1825,
						1830,
						1831,
						1836,
						1837,
						1806,
						1805,
						1824,
						1810,
						1823
					]
				}
			],
			"sources": [
				{
					"fileName": "embed/search.ts",
					"line": 70,
					"character": 17
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"name": "ViewConfig"
						},
						{
							"type": "union",
							"types": [
								{
									"type": "literal",
									"value": "hiddenHomepageModules"
								},
								{
									"type": "literal",
									"value": "hiddenHomeLeftNavItems"
								},
								{
									"type": "literal",
									"value": "hiddenTabs"
								},
								{
									"type": "literal",
									"value": "visibleTabs"
								},
								{
									"type": "literal",
									"value": "reorderedHomepageModules"
								}
							]
						}
					],
					"name": "Omit"
				}
			]
		},
		{
			"id": 1424,
			"name": "SessionInterface",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1427,
					"name": "acSession",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "utils/graphql/answerService/answerService.ts",
							"line": 14,
							"character": 4
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1428,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 1430,
									"name": "genNo",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "utils/graphql/answerService/answerService.ts",
											"line": 14,
											"character": 36
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1429,
									"name": "sessionId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "utils/graphql/answerService/answerService.ts",
											"line": 14,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1430,
										1429
									]
								}
							]
						}
					}
				},
				{
					"id": 1426,
					"name": "genNo",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "utils/graphql/answerService/answerService.ts",
							"line": 13,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 1425,
					"name": "sessionId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "utils/graphql/answerService/answerService.ts",
							"line": 12,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1427,
						1426,
						1425
					]
				}
			],
			"sources": [
				{
					"fileName": "utils/graphql/answerService/answerService.ts",
					"line": 11,
					"character": 17
				}
			]
		},
		{
			"id": 1431,
			"name": "UnderlyingDataPoint",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 1432,
					"name": "columnId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "utils/graphql/answerService/answerService.ts",
							"line": 24,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 1433,
					"name": "dataValue",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "utils/graphql/answerService/answerService.ts",
							"line": 25,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1432,
						1433
					]
				}
			],
			"sources": [
				{
					"fileName": "utils/graphql/answerService/answerService.ts",
					"line": 23,
					"character": 17
				}
			]
		},
		{
			"id": 2241,
			"name": "VizPoint",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 2242,
					"name": "selectedAttributes",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4657,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"name": "ColumnValue"
						}
					}
				},
				{
					"id": 2243,
					"name": "selectedMeasures",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 4658,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"name": "ColumnValue"
						}
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2242,
						2243
					]
				}
			],
			"sources": [
				{
					"fileName": "types.ts",
					"line": 4656,
					"character": 17
				}
			]
		},
		{
			"id": 2111,
			"name": "customCssInterface",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "inline customCSS within the {@link CustomisationsInterface}.\nUse {@link CustomCssVariables} or css rules."
			},
			"children": [
				{
					"id": 2113,
					"name": "rules_UNSTABLE",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Can be used to define a custom font face\nlike:",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nrules_UNSTABLE?: {\n    \"@font-face\": {\n        \"font-family\": \"custom-font\",\n        \"src\": url(\"/path/\")\n    };\n  };\n```\n\nAlso, custom css rules outside of variables."
							},
							{
								"tag": "example",
								"text": "\n```js\nrules_UNSTABLE?: {\n    \".thoughtspot_class_name\": {\n        \"border-radius\": \"10px\",\n        margin: \"20px\"\n    };\n  };\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 248,
							"character": 4
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2114,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"indexSignature": {
								"id": 2115,
								"name": "__index",
								"kind": 8192,
								"kindString": "Index signature",
								"flags": {},
								"parameters": [
									{
										"id": 2116,
										"name": "selector",
										"kind": 32768,
										"flags": {},
										"type": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								],
								"type": {
									"type": "reflection",
									"declaration": {
										"id": 2117,
										"name": "__type",
										"kind": 65536,
										"kindString": "Type literal",
										"flags": {},
										"sources": [
											{
												"fileName": "types.ts",
												"line": 249,
												"character": 28
											}
										],
										"indexSignature": {
											"id": 2118,
											"name": "__index",
											"kind": 8192,
											"kindString": "Index signature",
											"flags": {},
											"parameters": [
												{
													"id": 2119,
													"name": "declaration",
													"kind": 32768,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									}
								}
							}
						}
					}
				},
				{
					"id": 2112,
					"name": "variables",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "The custom css variables, which can be set.\nThe allowed list is in the CustomCssVariables\ninterface. For more information, see\nlink:https://developers.thoughtspot.com/docs/css-variables-reference"
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 222,
							"character": 4
						}
					],
					"type": {
						"type": "reference",
						"id": 2120,
						"name": "CustomCssVariables"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2113,
						2112
					]
				}
			],
			"sources": [
				{
					"fileName": "types.ts",
					"line": 215,
					"character": 17
				}
			]
		},
		{
			"id": 21,
			"name": "executeTMLInput",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 24,
					"name": "create_new",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "embed/base.ts",
							"line": 48,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 23,
					"name": "import_policy",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "embed/base.ts",
							"line": 47,
							"character": 4
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "PARTIAL"
							},
							{
								"type": "literal",
								"value": "ALL_OR_NONE"
							},
							{
								"type": "literal",
								"value": "VALIDATE_ONLY"
							}
						]
					}
				},
				{
					"id": 22,
					"name": "metadata_tmls",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "embed/base.ts",
							"line": 46,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						24,
						23,
						22
					]
				}
			],
			"sources": [
				{
					"fileName": "embed/base.ts",
					"line": 45,
					"character": 17
				}
			]
		},
		{
			"id": 25,
			"name": "exportTMLInput",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 32,
					"name": "edoc_format",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "embed/base.ts",
							"line": 58,
							"character": 4
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "JSON"
							},
							{
								"type": "literal",
								"value": "YAML"
							}
						]
					}
				},
				{
					"id": 30,
					"name": "export_associated",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "embed/base.ts",
							"line": 56,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 31,
					"name": "export_fqn",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "embed/base.ts",
							"line": 57,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 26,
					"name": "metadata",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "embed/base.ts",
							"line": 52,
							"character": 4
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reflection",
							"declaration": {
								"id": 27,
								"name": "__type",
								"kind": 65536,
								"kindString": "Type literal",
								"flags": {},
								"children": [
									{
										"id": 28,
										"name": "identifier",
										"kind": 1024,
										"kindString": "Property",
										"flags": {},
										"sources": [
											{
												"fileName": "embed/base.ts",
												"line": 53,
												"character": 8
											}
										],
										"type": {
											"type": "intrinsic",
											"name": "string"
										}
									},
									{
										"id": 29,
										"name": "type",
										"kind": 1024,
										"kindString": "Property",
										"flags": {
											"isOptional": true
										},
										"sources": [
											{
												"fileName": "embed/base.ts",
												"line": 54,
												"character": 8
											}
										],
										"type": {
											"type": "union",
											"types": [
												{
													"type": "literal",
													"value": "LIVEBOARD"
												},
												{
													"type": "literal",
													"value": "ANSWER"
												},
												{
													"type": "literal",
													"value": "LOGICAL_TABLE"
												},
												{
													"type": "literal",
													"value": "CONNECTION"
												}
											]
										}
									}
								],
								"groups": [
									{
										"title": "Properties",
										"kind": 1024,
										"children": [
											28,
											29
										]
									}
								]
							}
						}
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						32,
						30,
						31,
						26
					]
				}
			],
			"sources": [
				{
					"fileName": "embed/base.ts",
					"line": 51,
					"character": 17
				}
			]
		},
		{
			"id": 2083,
			"name": "DOMSelector",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "types.ts",
					"line": 209,
					"character": 12
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "intrinsic",
						"name": "string"
					},
					{
						"type": "reference",
						"name": "HTMLElement"
					}
				]
			}
		},
		{
			"id": 2087,
			"name": "MessageCallback",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "types.ts",
					"line": 1157,
					"character": 12
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 2088,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"comment": {
						"shortText": "MessageCallback: Embed event message callback",
						"tags": [
							{
								"tag": "group",
								"text": "Events\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1157,
							"character": 30
						}
					],
					"signatures": [
						{
							"id": 2089,
							"name": "__type",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "MessageCallback: Embed event message callback"
							},
							"parameters": [
								{
									"id": 2090,
									"name": "payload",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 2095,
										"name": "MessagePayload"
									}
								},
								{
									"id": 2091,
									"name": "responder",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2092,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "types.ts",
													"line": 1164,
													"character": 16
												}
											],
											"signatures": [
												{
													"id": 2093,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {
														"shortText": " responder: Message callback function triggered when embed event\n initiated"
													},
													"parameters": [
														{
															"id": 2094,
															"name": "data",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			}
		},
		{
			"id": 2084,
			"name": "MessageOptions",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"comment": {
				"shortText": "MessageOptions: By providing options, getting specific event start / end based on\noption",
				"tags": [
					{
						"tag": "group",
						"text": "Events\n"
					}
				]
			},
			"sources": [
				{
					"fileName": "types.ts",
					"line": 1146,
					"character": 12
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 2085,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 2086,
							"name": "start",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": " A boolean value indicating that start status events of this type\n will be dispatched."
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 1151,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2086
							]
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1146,
							"character": 29
						}
					]
				}
			}
		},
		{
			"id": 2095,
			"name": "MessagePayload",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"comment": {
				"shortText": "MessagePayload: Embed event payload: message type, data and status (start/end)",
				"tags": [
					{
						"tag": "group",
						"text": "Events\n"
					}
				]
			},
			"sources": [
				{
					"fileName": "types.ts",
					"line": 1133,
					"character": 12
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 2096,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 2098,
							"name": "data",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 1137,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 2099,
							"name": "status",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 1139,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2097,
							"name": "type",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 1135,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2098,
								2099,
								2097
							]
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1133,
							"character": 29
						}
					]
				}
			}
		},
		{
			"id": 48,
			"name": "createLiveboardWithAnswers",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isConst": true
			},
			"sources": [
				{
					"fileName": "utils/liveboardService/liveboardService.ts",
					"line": 19,
					"character": 13
				}
			],
			"signatures": [
				{
					"id": 49,
					"name": "createLiveboardWithAnswers",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Create a liveboard with the given answers",
						"returns": "result Promise",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.33.1 | ThoughtSpot: *"
							},
							{
								"tag": "example",
								"text": "\n```js\n  const lb = createLiveboardWithAnswers([\n     new AnswerService(session, null, 'tshost'),\n  ], \"my-liveboard\");\n```\n"
							}
						]
					},
					"parameters": [
						{
							"id": 50,
							"name": "answers",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "AnswerService[]"
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 1351,
									"name": "AnswerService"
								}
							}
						},
						{
							"id": 51,
							"name": "name",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "string"
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "any"
							}
						],
						"name": "Promise"
					}
				}
			]
		},
		{
			"id": 15,
			"name": "executeTML",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isConst": true
			},
			"sources": [
				{
					"fileName": "embed/base.ts",
					"line": 297,
					"character": 13
				}
			],
			"signatures": [
				{
					"id": 16,
					"name": "executeTML",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Imports TML representation of the metadata objects into ThoughtSpot.",
						"returns": "imports TML data into ThoughtSpot",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\n executeTML({\n//Array of metadata Tmls in string format\n     metadata_tmls: [\n         \"'\\''{\\\"guid\\\":\\\"9bd202f5-d431-44bf-9a07-b4f7be372125\\\",\n         \\\"liveboard\\\":{\\\"name\\\":\\\"Parameters Liveboard\\\"}}'\\''\"\n     ],\n     import_policy: 'PARTIAL', // Specifies the import policy for the TML import.\n     create_new: false, // If selected, creates TML objects with new GUIDs.\n }).then(result => {\n     console.log(result);\n }).catch(error => {\n     console.error(error);\n });\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.23.0 | ThoughtSpot: 9.4.0.cl"
							},
							{
								"tag": "group",
								"text": "Global methods\n"
							}
						]
					},
					"parameters": [
						{
							"id": 17,
							"name": "data",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"id": 21,
								"name": "executeTMLInput"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "any"
							}
						],
						"name": "Promise"
					}
				}
			]
		},
		{
			"id": 18,
			"name": "exportTML",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isConst": true
			},
			"sources": [
				{
					"fileName": "embed/base.ts",
					"line": 364,
					"character": 13
				}
			],
			"signatures": [
				{
					"id": 19,
					"name": "exportTML",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Exports TML representation of the metadata objects from ThoughtSpot in JSON or YAML\nformat.",
						"returns": "exports TML data",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nexportTML({\n  metadata: [\n    {\n      type: \"LIVEBOARD\", //Metadata Type\n      identifier: \"9bd202f5-d431-44bf-9a07-b4f7be372125\" //Metadata Id\n    }\n  ],\n  export_associated: false,//indicates whether to export associated metadata objects\n  export_fqn: false, //Adds FQNs of the referenced objects.For example, if you are\n                     //exporting a Liveboard and its associated objects, the API\n                     //returns the Liveboard TML data with the FQNs of the referenced\n                     //worksheet. If the exported TML data includes FQNs, you don't need\n                     //to manually add FQNs of the referenced objects during TML import.\n  edoc_format: \"JSON\" //It takes JSON or YAML value\n}).then(result => {\n  console.log(result);\n}).catch(error => {\n  console.error(error);\n});\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.23.0 | ThoughtSpot: 9.4.0.cl"
							},
							{
								"tag": "group",
								"text": "Global methods\n"
							}
						]
					},
					"parameters": [
						{
							"id": 20,
							"name": "data",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"id": 25,
								"name": "exportTMLInput"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "any"
							}
						],
						"name": "Promise"
					}
				}
			]
		},
		{
			"id": 41,
			"name": "getAnswerFromQuery",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isConst": true
			},
			"sources": [
				{
					"fileName": "utils/graphql/nlsService/nls-answer-service.ts",
					"line": 17,
					"character": 13
				}
			],
			"signatures": [
				{
					"id": 42,
					"name": "getAnswerFromQuery",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Get answer from natural language query",
						"returns": "AnswerService and the suggestion response.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.33.1 | ThoughtSpot: 10.3.0.cl"
							},
							{
								"tag": "example",
								"text": "\n```js\nconst { answer } = await getAnswerFromQuery('revenue', 'worksheetId');\n```\n"
							}
						]
					},
					"parameters": [
						{
							"id": 43,
							"name": "query",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "string"
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 44,
							"name": "worksheetId",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "string"
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reflection",
								"declaration": {
									"id": 45,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 46,
											"name": "answer",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "utils/graphql/nlsService/nls-answer-service.ts",
													"line": 20,
													"character": 13
												}
											],
											"type": {
												"type": "reference",
												"id": 1351,
												"name": "AnswerService"
											}
										},
										{
											"id": 47,
											"name": "suggestion",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "utils/graphql/nlsService/nls-answer-service.ts",
													"line": 20,
													"character": 36
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												46,
												47
											]
										}
									]
								}
							}
						],
						"name": "Promise"
					}
				}
			]
		},
		{
			"id": 33,
			"name": "getInitConfig",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isConst": true
			},
			"sources": [
				{
					"fileName": "embed/embedConfig.ts",
					"line": 11,
					"character": 13
				}
			],
			"signatures": [
				{
					"id": 34,
					"name": "getInitConfig",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Gets the configuration embed was initialized with.",
						"returns": "{@link EmbedConfig} The configuration embed was initialized with.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.19.0 | ThoughtSpot: *"
							},
							{
								"tag": "group",
								"text": "Global methods\n"
							}
						]
					},
					"type": {
						"type": "reference",
						"id": 1749,
						"name": "EmbedConfig"
					}
				}
			]
		},
		{
			"id": 35,
			"name": "getSessionInfo",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "utils/sessionInfoService.ts",
					"line": 29,
					"character": 22
				}
			],
			"signatures": [
				{
					"id": 36,
					"name": "getSessionInfo",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns the session info object and caches it for future use.\nOnce fetched the session info object is cached and returned from the cache on\nsubsequent calls.",
						"tags": [
							{
								"tag": "example",
								"text": "```js\nconst sessionInfo = await getSessionInfo();\nconsole.log(sessionInfo);\n```\n@version SDK: 1.28.3 | ThoughtSpot: *\n@returns {Promise<SessionInfo>} The session info object.\n"
							}
						]
					},
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "SessionInfo"
							}
						],
						"name": "Promise"
					}
				}
			]
		},
		{
			"id": 1,
			"name": "init",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isConst": true
			},
			"sources": [
				{
					"fileName": "embed/base.ts",
					"line": 194,
					"character": 13
				}
			],
			"signatures": [
				{
					"id": 2,
					"name": "init",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Initializes the Visual Embed SDK globally and perform\nauthentication if applicable. This function needs to be called before any ThoughtSpot\ncomponent like Liveboard etc can be embedded. But need not wait for AuthEvent.SUCCESS\nto actually embed. That is handled internally.",
						"returns": "{@link AuthEventEmitter} event emitter which emits events on authentication success,\n     failure and logout. See {@link AuthStatus}",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\n  const authStatus = init({\n    thoughtSpotHost: 'https://my.thoughtspot.cloud',\n    authType: AuthType.None,\n  });\n  authStatus.on(AuthStatus.FAILURE, (reason) => { // do something here });\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.0.0 | ThoughtSpot ts7.april.cl, 7.2.1"
							},
							{
								"tag": "group",
								"text": "Authentication / Init\n"
							}
						]
					},
					"parameters": [
						{
							"id": 3,
							"name": "embedConfig",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "The configuration object containing ThoughtSpot host,\nauthentication mechanism and so on."
							},
							"type": {
								"type": "reference",
								"id": 1749,
								"name": "EmbedConfig"
							}
						}
					],
					"type": {
						"type": "reference",
						"id": 1298,
						"name": "AuthEventEmitter"
					}
				}
			]
		},
		{
			"id": 4,
			"name": "logout",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isConst": true
			},
			"sources": [
				{
					"fileName": "embed/base.ts",
					"line": 247,
					"character": 13
				}
			],
			"signatures": [
				{
					"id": 5,
					"name": "logout",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Logs out from ThoughtSpot. This also sets the autoLogin flag to false, to\nprevent the SDK from automatically logging in again.",
						"text": "You can call the `init` method again to re login, if autoLogin is set to\ntrue in this second call it will be honored.",
						"returns": "Promise which resolves when logout completes.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.10.1 | ThoughtSpot: 8.2.0.cl, 8.4.1-sw"
							},
							{
								"tag": "group",
								"text": "Global methods\n"
							}
						]
					},
					"parameters": [
						{
							"id": 6,
							"name": "doNotDisableAutoLogin",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "This flag when passed will not disable autoLogin"
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "false"
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "boolean"
							}
						],
						"name": "Promise"
					}
				}
			]
		},
		{
			"id": 7,
			"name": "prefetch",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isConst": true
			},
			"sources": [
				{
					"fileName": "embed/base.ts",
					"line": 108,
					"character": 13
				}
			],
			"signatures": [
				{
					"id": 8,
					"name": "prefetch",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Prefetches static resources from the specified URL. Web browsers can then cache the\nprefetched resources and serve them from the user's local disk to provide faster access\nto your app.",
						"tags": [
							{
								"tag": "version",
								"text": "SDK: 1.4.0 | ThoughtSpot: ts7.sep.cl, 7.2.1"
							},
							{
								"tag": "group",
								"text": "Global methods\n"
							}
						]
					},
					"parameters": [
						{
							"id": 9,
							"name": "url",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"text": "The URL provided for prefetch"
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 10,
							"name": "prefetchFeatures",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"text": "Specify features which needs to be prefetched."
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 2057,
									"name": "PrefetchFeatures"
								}
							}
						},
						{
							"id": 11,
							"name": "additionalFlags",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"text": "This can be used to add any URL flag."
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 12,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": {
										"id": 13,
										"name": "__index",
										"kind": 8192,
										"kindString": "Index signature",
										"flags": {},
										"parameters": [
											{
												"id": 14,
												"name": "key",
												"kind": 32768,
												"flags": {},
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"type": {
											"type": "union",
											"types": [
												{
													"type": "intrinsic",
													"name": "string"
												},
												{
													"type": "intrinsic",
													"name": "number"
												},
												{
													"type": "intrinsic",
													"name": "boolean"
												}
											]
										}
									}
								}
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "void"
					}
				}
			]
		},
		{
			"id": 2271,
			"name": "resetCachedAuthToken",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isConst": true
			},
			"sources": [
				{
					"fileName": "authToken.ts",
					"line": 85,
					"character": 13
				}
			],
			"signatures": [
				{
					"id": 2272,
					"name": "resetCachedAuthToken",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Resets the auth token and a new token will be fetched on the next request.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nresetCachedAuthToken();\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.28.0 | ThoughtSpot: *"
							},
							{
								"tag": "group",
								"text": "Authentication / Init\n"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "void"
					}
				}
			]
		},
		{
			"id": 37,
			"name": "tokenizedFetch",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isConst": true
			},
			"sources": [
				{
					"fileName": "tokenizedFetch.ts",
					"line": 21,
					"character": 13
				}
			],
			"signatures": [
				{
					"id": 38,
					"name": "tokenizedFetch",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Fetch wrapper that adds the authentication token to the request.\nUse this to call the ThoughtSpot APIs when using the visual embed sdk.\nThe interface for this method is the same as Web `Fetch`.",
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\ntokenizedFetch(\"<TS_ORIGIN>/api/rest/2.0/auth/session/user\", {\n  // .. fetch options ..\n});\n```"
							},
							{
								"tag": "version",
								"text": "SDK: 1.28.0"
							},
							{
								"tag": "group",
								"text": "Global methods\n"
							}
						]
					},
					"parameters": [
						{
							"id": 39,
							"name": "input",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "RequestInfo"
									},
									{
										"type": "reference",
										"name": "URL"
									}
								]
							}
						},
						{
							"id": 40,
							"name": "init",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isOptional": true
							},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "RequestInit"
							}
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "Response"
							}
						],
						"name": "Promise"
					}
				}
			]
		},
		{
			"id": 2221,
			"name": "uploadMixpanelEvent",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "mixpanel-service.ts",
					"line": 38,
					"character": 16
				}
			],
			"signatures": [
				{
					"id": 2222,
					"name": "uploadMixpanelEvent",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Pushes the event with its Property key-value map to mixpanel."
					},
					"parameters": [
						{
							"id": 2223,
							"name": "eventId",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2224,
							"name": "eventProps",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 2225,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {}
								}
							},
							"defaultValue": "{}"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "void"
					}
				}
			]
		}
	],
	"groups": [
		{
			"title": "Enumerations",
			"kind": 4,
			"children": [
				1617,
				1296,
				1285,
				1290,
				1443,
				1745,
				1613,
				1475,
				2068,
				2237,
				2076,
				1553,
				2214,
				1434,
				2057,
				1459,
				2264
			]
		},
		{
			"title": "Classes",
			"kind": 128,
			"children": [
				1351,
				864,
				1042,
				1096,
				522,
				708,
				208,
				52
			]
		},
		{
			"title": "Interfaces",
			"kind": 256,
			"children": [
				1991,
				1298,
				1056,
				1242,
				2244,
				2120,
				2108,
				2100,
				1749,
				2062,
				1884,
				1455,
				2211,
				1946,
				1848,
				1796,
				1424,
				1431,
				2241,
				2111,
				21,
				25
			]
		},
		{
			"title": "Type aliases",
			"kind": 4194304,
			"children": [
				2083,
				2087,
				2084,
				2095
			]
		},
		{
			"title": "Functions",
			"kind": 64,
			"children": [
				48,
				15,
				18,
				41,
				33,
				35,
				1,
				4,
				7,
				2271,
				37,
				2221
			]
		}
	],
	"sources": [
		{
			"fileName": "index.ts",
			"line": 9,
			"character": 0
		}
	]
}